using System;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Web.UI.DataVisualization.Charting;
using RemoteAnalyst.BusinessLogic.ModelView;
using RemoteAnalyst.BusinessLogic.RemoteAnalystServices;
using RemoteAnalyst.BusinessLogic.RemoteAnalystSPAMServices;
using RemoteAnalyst.BusinessLogic.Util;
using RemoteAnalyst.Repository.Concrete.RemoteAnalystdbSPAM;
using RemoteAnalyst.Repository.Concrete.RemoteAnalystdb;

namespace RemoteAnalyst.BusinessLogic.Infrastructure {
    public class JobProcessorChart {
        private readonly string ConnectionString;
        private readonly string ConnectionStringSPAM;
        private readonly string ConnectionStringTrend;
        private readonly string ServerPath;

        public JobProcessorChart(string connectionString, string connectionStringTrend, string connectionStringSPAM,
            string serverPath) {
            ConnectionString = connectionString;
            ConnectionStringTrend = connectionStringTrend;
            ConnectionStringSPAM = connectionStringSPAM;
            ServerPath = serverPath;
        }
        
        public bool CheckTableFor(string systemSerial, List<string> tableNames) {
            var databaseMapService = new DatabaseMappingService(ConnectionString);
            string newConnectionString = databaseMapService.GetConnectionStringFor(systemSerial);

            var databaseCheck = new Database(newConnectionString, "");
            var databaseName = Helper.FindKeyName(newConnectionString, "DATABASE");
            bool exists = false;

            foreach (var tableName in tableNames) {
                exists = databaseCheck.CheckTableExists(tableName, databaseName);
                if (exists)
                    break;
            }

            return exists;
        }

        public string CreateChart(int nsid, string path, System.IO.StreamWriter newLog) {
            string alerttxt = "";

            var sampleInfoService = new SampleInfoService(ConnectionString);
            SampleInfoView sampleInfoView = sampleInfoService.GetNSIDInfoFor(nsid);

            if (sampleInfoView.SystemSerial.Length == 0) {
                return alerttxt;
            }

            string systemSerial = sampleInfoView.SystemSerial;
            DateTime startDate = sampleInfoView.StartDate;
            DateTime endDate = sampleInfoView.EndDate;
            string strEntity = sampleInfoView.Entities;

            //IR 6466
            var sysUnrated = new DailySysUnratedService(ConnectionStringSPAM);
            //DailySysUnratedService sysUnreated = new DailySysUnratedService(ConnectionStringTrend);
            int cpuNumber = sysUnrated.GetCPUNumberFor(1, startDate, endDate, systemSerial);

            //Getting Number of intervals
            if ((Convert.ToDateTime(endDate).Subtract(Convert.ToDateTime(startDate))).Days >= 1) {
                //DailySysUnratedService sysUnrated = new DailySysUnratedService(ConnectionStringTrend);
                DataSet dset = sysUnrated.GetDataDateFor(1, startDate, endDate, systemSerial);

                if (dset.Tables["Interval"].Rows.Count == 0) {
                    return alerttxt;
                }

                var reportDate = new DateTime[dset.Tables["Interval"].Rows.Count];
                for (int i = 0; i < dset.Tables["Interval"].Rows.Count; i++) {
                    reportDate[i] = Convert.ToDateTime(dset.Tables["Interval"].Rows[i]["DataDate"].ToString());
                }

                string overlay = "0";
                if (strEntity.Contains(" Disk"))
                    overlay = "2";
                else if (strEntity.Contains(" TMF"))
                    overlay = "1";


                string strReturn = CreatePerCPUDundasChart(systemSerial, cpuNumber, reportDate, overlay, path);
                strReturn += ",";
                strReturn += CreateHiLoDundasChart(systemSerial, cpuNumber, reportDate, overlay, path);


                return strReturn;
            }
            else {
                var reportDate = new DateTime[1];
                reportDate[0] = Convert.ToDateTime(startDate);
                string overlay = "0";

                if (strEntity.Contains(" Disk"))
                    overlay = "2";
                else if (strEntity.Contains(" TMF"))
                    overlay = "1";

                string strReturn = "";
                if (cpuNumber > 0) {
                    strReturn = CreatePerCPUDundasChart(systemSerial, cpuNumber, reportDate, overlay, path);
                    strReturn += ",";
                    strReturn += CreateHiLoDundasChart(systemSerial, cpuNumber, reportDate, overlay, path);
                }

                return strReturn;
            }
        }

        public string CreateChart(string systemSerial, DateTime startDate, DateTime endDate, string path, System.IO.StreamWriter newLog, bool useTrueTime = false) {
            //IR 6466
            newLog.WriteLine("On CreateChart");
            newLog.Flush();

            string alerttxt = string.Empty;
            //DailySysUnratedService sysUnreated = new DailySysUnratedService(ConnectionStringTrend);
            var sysUnrated = new DailySysUnratedService(ConnectionStringSPAM);
            int cpuNumber = sysUnrated.GetCPUNumberFor(1, startDate, endDate, systemSerial);

            string overlay = "0";
            //Build Disk & TMF table name and check if disk or tmf exist.
            string diskName = systemSerial + "_DISC_" + startDate.Year + "_" + startDate.Month + "_" + startDate.Day;
            string tmfName = systemSerial + "_TMF_" + startDate.Year + "_" + startDate.Month + "_" + startDate.Day;

            newLog.WriteLine("diskName: " + diskName);
            newLog.WriteLine("tmfName: " + tmfName);
            newLog.Flush();

            var databaseCheck = new Database(ConnectionStringSPAM, "");
            var databaseName = Helper.FindKeyName(ConnectionStringSPAM, "DATABASE");

            bool entity = databaseCheck.CheckTableExists(diskName, databaseName);
            if (entity) {
                overlay = "2";
            }
            else {
                entity = databaseCheck.CheckTableExists(tmfName, databaseName);
                if (entity)
                    overlay = "1";
            }

            //Getting Number of intervals
            if (useTrueTime) {
                string strReturn = "";
                try {
                    var reportDate = new DateTime[2];
                    reportDate[0] = Convert.ToDateTime(startDate);
                    reportDate[1] = Convert.ToDateTime(endDate);

                    strReturn = CreatePerCPUDundasChart(systemSerial, Convert.ToInt32(cpuNumber), reportDate, overlay, path, true);
                    strReturn += ",";
                    strReturn += CreateHiLoDundasChart(systemSerial, Convert.ToInt32(cpuNumber), reportDate, overlay, path, true);
                }
                catch {
                    strReturn = "";
                }
                return strReturn;
            }
            if ((Convert.ToDateTime(endDate).Subtract(startDate)).Days >= 1) {
                //DailySysUnratedService sysUnrated = new DailySysUnratedService(ConnectionStringTrend);
                DataSet dset = sysUnrated.GetDataDateFor(1, startDate, endDate, systemSerial);

                if (dset.Tables["Interval"].Rows.Count == 0) {
                    return alerttxt;
                }

                var reportDate = new DateTime[dset.Tables["Interval"].Rows.Count];
                for (int i = 0; i < dset.Tables["Interval"].Rows.Count; i++) {
                    reportDate[i] = Convert.ToDateTime(dset.Tables["Interval"].Rows[i]["DataDate"].ToString());
                }

                string strReturn = CreatePerCPUDundasChart(systemSerial, Convert.ToInt32(cpuNumber), reportDate, overlay, path);
                strReturn += ",";
                strReturn += CreateHiLoDundasChart(systemSerial, Convert.ToInt32(cpuNumber), reportDate, overlay, path);

                return strReturn;
            }
            else {
                var reportDate = new DateTime[1];
                reportDate[0] = Convert.ToDateTime(startDate);

                string strReturn = "";
                if (cpuNumber != 0) {
                    newLog.WriteLine("Before CreatePerCPUDundasChart");
                    newLog.Flush();
                    strReturn = CreatePerCPUDundasChart(systemSerial, Convert.ToInt32(cpuNumber), reportDate, startDate, endDate, overlay, path);
                    strReturn += ",";

                    newLog.WriteLine("Before CreateHiLoDundasChart");
                    newLog.Flush();
                    strReturn += CreateHiLoDundasChart(systemSerial, Convert.ToInt32(cpuNumber), reportDate, startDate, endDate, overlay, path);
                }


                return strReturn;
            }
        }

        public string CreateDiskQueuePerInterval(DataTable diskQueue, DataTable lastWeek, DataTable lastMonth, string path, System.IO.StreamWriter newLog, long interval, DateTime lastWeekStartTime, DateTime lastMonthStartTime) {
            //Force all datetime to be in US format.
            System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
            var chart = new Chart();
            chart.Width = 900;
            chart.Height = 250;
            chart.Palette = ChartColorPalette.EarthTones;
            var chartarea = new ChartArea();
            chartarea.AxisY.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisX.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisY.IsLabelAutoFit = false;
            chartarea.AxisX.IsLabelAutoFit = false;
            //chartarea.AxisY.LabelStyle.Format = "{#}";

            chartarea.AxisY.MajorGrid.Enabled = true;
            chartarea.BorderWidth = 0;
            chartarea.AxisY.Title = "Disk Queue Length";
            //Display Axis every 30 mins.
            if (interval == 1800)
                chartarea.AxisX.Interval = 1;
            else {
                if (interval > 1800) {
                    var newInterval = interval / 1800;
                    chartarea.AxisX.Interval = (int)newInterval;
                }
                else {
                    var newInterval = 1800 / interval;
                    chartarea.AxisX.Interval = (int)newInterval;
                }
            }
            chartarea.AxisX.LabelStyle.Angle = -60;
            var dataDate = diskQueue.AsEnumerable().Select(x => x.Field<DateTime>("FromTimestamp")).Distinct().ToList();
            var dayCount = dataDate.Last() - dataDate.First();

            if (dayCount.TotalDays < 1) {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.MajorTickMark.Enabled = false;
                //chartarea.AxisX.IntervalType = DateTimeIntervalType.Hours;
                //chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Hours;
                chartarea.AxisX.LabelStyle.Format = "HH:mm";
            }
            else if (dayCount.TotalDays > 1 && dayCount.TotalDays <= 7) {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.MajorTickMark.Enabled = false;
                //chartarea.AxisX.IntervalType = DateTimeIntervalType.Hours;
                //chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Auto;
                chartarea.AxisX.LabelStyle.Format = "HH:mm";
            }
            else if (dayCount.TotalDays <= 14) {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.IntervalType = DateTimeIntervalType.Days;
                chartarea.AxisX.IntervalOffset = 0;
                chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Auto;
                chartarea.AxisX.LabelStyle.Format = "MMM/dd/yy\ndddd";
            }
            else {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.IntervalType = DateTimeIntervalType.Days;
                chartarea.AxisX.IntervalOffset = 0;
                chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Auto;
                chartarea.AxisX.LabelStyle.Format = "MMM/dd/yy";
            }
            chartarea.AxisY.TitleFont = new Font("Calibri", 8);
            chartarea.AxisY.MajorGrid.LineColor = Color.Silver;
            chartarea.AxisX.MajorGrid.LineColor = Color.Silver;

            //Legend format.
            chart.Legends.Clear();
            chart.Legends.Add("Default");
            chart.Legends[0].LegendStyle = LegendStyle.Row;
            chart.Legends[0].IsDockedInsideChartArea = true;
            chart.Legends[0].Alignment = StringAlignment.Center;
            chart.Legends[0].Font = new Font("Calibri", 6);
            chart.Legends[0].BorderDashStyle = ChartDashStyle.NotSet;
            chart.Legends[0].Docking = Docking.Bottom;


            try {
                var serialBusy = new Series("Peak Disk Queue");
                serialBusy.ChartType = SeriesChartType.Spline;
                serialBusy["PointWidth"] = "0.8";
                serialBusy.LegendText = "Peak Disk Queue";
                serialBusy.ToolTip = "Peak Disk Queue";
                serialBusy.Color = Color.Red;

                serialBusy.IsXValueIndexed = true;
                serialBusy.XValueType = ChartValueType.DateTime;
                serialBusy.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                serialBusy.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");

                //populate all the data.
                for (int x = 0; x < diskQueue.Rows.Count; x++) {
                    var dpAdjust = new DataPoint();
                    dpAdjust.XValue = Convert.ToDateTime(diskQueue.Rows[x]["FromTimestamp"]).ToOADate();
                    dpAdjust.YValues[0] = Convert.ToDouble(diskQueue.Rows[x]["QueueLength"]);
                    serialBusy.Points.Add(dpAdjust);
                }

                chart.Series.Add(serialBusy);
            }
            catch {
            }

            #region Last Week.
            try {
                if (lastWeek != null && lastWeek.Rows.Count > 0) {
                    var serialBusyWeek = new Series("Last Week");
                    serialBusyWeek.ChartType = SeriesChartType.Spline;
                    serialBusyWeek["PointWidth"] = "0.8";
                    serialBusyWeek.LegendText = "Last " + lastWeekStartTime.ToString("dddd");
                    serialBusyWeek.ToolTip = "Last " + lastWeekStartTime.ToString("dddd"); ;
                    serialBusyWeek.Color = Color.Green;

                    serialBusyWeek.IsXValueIndexed = true;
                    serialBusyWeek.XValueType = ChartValueType.DateTime;
                    serialBusyWeek.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                    serialBusyWeek.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");

                    //adjust the time.
                    for (int x = 0; x < diskQueue.Rows.Count; x++) {
                        var dpAdjust = new DataPoint();
                        if (lastWeek.AsEnumerable().Any(i => i.Field<DateTime>("DateTime").AddDays(7)
                                                   .Equals(Convert.ToDateTime(diskQueue.Rows[x]["FromTimestamp"])))) {
                            dpAdjust.XValue = Convert.ToDateTime(diskQueue.Rows[x]["FromTimestamp"]).ToOADate();
                            dpAdjust.YValues[0] = Convert.ToDouble(lastWeek.Rows[x]["DiskQueueLength"]);

                        }
                        else {
                            dpAdjust.XValue = Convert.ToDateTime(diskQueue.Rows[x]["FromTimestamp"]).ToOADate();
                            dpAdjust.YValues[0] = 0;
                        }
                        serialBusyWeek.Points.Add(dpAdjust);
                    }
                    chart.Series.Add(serialBusyWeek);
                }
            }
            catch {
            }
            #endregion

            #region Last Month.
            try {
                if (lastMonth != null && lastMonth.Rows.Count > 0) {

                    var serialBusyMonth = new Series("Last Month");
                    serialBusyMonth.ChartType = SeriesChartType.Spline;
                    serialBusyMonth["PointWidth"] = "0.8";
                    serialBusyMonth.LegendText = GetWeekOfMonth(lastMonthStartTime) + lastMonthStartTime.ToString("dddd") + " last month";
                    serialBusyMonth.ToolTip = GetWeekOfMonth(lastMonthStartTime) + lastMonthStartTime.ToString("dddd") + " last month";
                    serialBusyMonth.Color = Color.DeepSkyBlue;

                    serialBusyMonth.IsXValueIndexed = true;
                    serialBusyMonth.XValueType = ChartValueType.DateTime;
                    serialBusyMonth.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                    serialBusyMonth.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");

                    for (int x = 0; x < diskQueue.Rows.Count; x++) {
                        var dpAdjust = new DataPoint();
                        if (lastMonth.AsEnumerable().Any(i => i.Field<DateTime>("DateTime")
                                                    .Equals(Helper.GetLastMonthDate(Convert.ToDateTime(diskQueue.Rows[x]["FromTimestamp"]))))) {
                            dpAdjust.XValue = Convert.ToDateTime(diskQueue.Rows[x]["FromTimestamp"]).ToOADate();
                            dpAdjust.YValues[0] = Convert.ToDouble(lastMonth.Rows[x]["DiskQueueLength"]);

                        }
                        else {
                            dpAdjust.XValue = Convert.ToDateTime(diskQueue.Rows[x]["FromTimestamp"]).ToOADate();
                            dpAdjust.YValues[0] = 0;
                        }
                        serialBusyMonth.Points.Add(dpAdjust);
                    }
                    chart.Series.Add(serialBusyMonth);
                }
            }
            catch {
            }
            #endregion

            chart.ChartAreas.Add(chartarea);

            chart.ImageType = ChartImageType.Jpeg;
            if (!Directory.Exists(path + "\\TempImg\\")) {
                Directory.CreateDirectory(path + "\\TempImg\\");
            }
            string saveLocation = path + "\\TempImg\\ChartPicDiskQueue_" + DateTime.Now.Ticks + ".jpg";
            //Save the chart image.
            chart.SaveImage(saveLocation);
            return saveLocation;
        }

        public string CreatePeakProcessBusyPerInterval(Dictionary<DateTime, double> processBusy, Dictionary<DateTime, double> lastWeek, Dictionary<DateTime, double> lastMonth, string path, System.IO.StreamWriter newLog, long interval, DateTime lastWeekStartTime, DateTime lastMonthStartTime) {

            //Force all datetime to be in US format.
            System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
            var chart = new Chart();
            chart.Width = 900;
            chart.Height = 250;
            chart.Palette = ChartColorPalette.EarthTones;
            var chartarea = new ChartArea();
            chartarea.AxisY.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisX.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisY.IsLabelAutoFit = false;
            chartarea.AxisX.IsLabelAutoFit = false;
            chartarea.AxisY.LabelStyle.Format = "{#}%";

            chartarea.AxisY.MajorGrid.Enabled = true;
            chartarea.BorderWidth = 0;
            chartarea.AxisY.Title = "Percent Process Busy";
            //Display Axis every 30 mins.
            if (interval == 1800)
                chartarea.AxisX.Interval = 1;
            else {
                if (interval > 1800) {
                    var newInterval = interval / 1800;
                    chartarea.AxisX.Interval = (int)newInterval;
                }
                else {
                    var newInterval = 1800 / interval;
                    chartarea.AxisX.Interval = (int)newInterval;
                }
            }
            chartarea.AxisX.LabelStyle.Angle = -60;
            var dayCount = processBusy.Last().Key - processBusy.First().Key;

            if (dayCount.TotalDays < 1) {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.MajorTickMark.Enabled = false;
                //chartarea.AxisX.IntervalType = DateTimeIntervalType.Hours;
                //chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Hours;
                chartarea.AxisX.LabelStyle.Format = "HH:mm";
            }
            else if (dayCount.TotalDays > 1 && dayCount.TotalDays <= 7) {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.MajorTickMark.Enabled = false;
                //chartarea.AxisX.IntervalType = DateTimeIntervalType.Hours;
                //chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Auto;
                chartarea.AxisX.LabelStyle.Format = "HH:mm";
            }
            else if (dayCount.TotalDays <= 14) {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.IntervalType = DateTimeIntervalType.Days;
                chartarea.AxisX.IntervalOffset = 0;
                chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Auto;
                chartarea.AxisX.LabelStyle.Format = "MMM/dd/yy\ndddd";
            }
            else {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.IntervalType = DateTimeIntervalType.Days;
                chartarea.AxisX.IntervalOffset = 0;
                chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Auto;
                chartarea.AxisX.LabelStyle.Format = "MMM/dd/yy";
            }
            chartarea.AxisY.TitleFont = new Font("Calibri", 8);
            chartarea.AxisY.MajorGrid.LineColor = Color.Silver;
            chartarea.AxisX.MajorGrid.LineColor = Color.Silver;

            //Legend format.
            chart.Legends.Clear();
            chart.Legends.Add("Default");
            chart.Legends[0].LegendStyle = LegendStyle.Row;
            chart.Legends[0].IsDockedInsideChartArea = true;
            chart.Legends[0].Alignment = StringAlignment.Center;
            chart.Legends[0].Font = new Font("Calibri", 6);
            chart.Legends[0].BorderDashStyle = ChartDashStyle.NotSet;
            chart.Legends[0].Docking = Docking.Bottom;

            try {
                var serialBusy = new Series("Peak Process Queue");
                serialBusy.ChartType = SeriesChartType.Spline;
                serialBusy["PointWidth"] = "0.8";
                serialBusy.LegendText = "Percent Process Busy";
                serialBusy.ToolTip = "Percent Process Busy";
                serialBusy.Color = Color.Red;

                serialBusy.IsXValueIndexed = true;
                serialBusy.XValueType = ChartValueType.DateTime;
                serialBusy.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                serialBusy.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");

                //populate all the data.
                foreach (var value in processBusy) {
                    var dpAdjust = new DataPoint();
                    dpAdjust.XValue = Convert.ToDateTime(value.Key).ToOADate();
                    dpAdjust.YValues[0] = Convert.ToDouble(value.Value);
                    serialBusy.Points.Add(dpAdjust);
                }

                chart.Series.Add(serialBusy);
            }
            catch {
            }
            chart.ChartAreas.Add(chartarea);


            #region Last Week.
            try {
                if (lastWeek != null && lastWeek.Count > 0) {
                    var serialBusyWeek = new Series("Last Week");
                    serialBusyWeek.ChartType = SeriesChartType.Spline;
                    serialBusyWeek["PointWidth"] = "0.8";
                    serialBusyWeek.LegendText = "Last " + lastWeekStartTime.ToString("dddd"); ;
                    serialBusyWeek.ToolTip = "Last " + lastWeekStartTime.ToString("dddd"); ;
                    serialBusyWeek.Color = Color.Green;

                    serialBusyWeek.IsXValueIndexed = true;
                    serialBusyWeek.XValueType = ChartValueType.DateTime;
                    serialBusyWeek.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                    serialBusyWeek.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");

                    foreach (var value in processBusy) {
                        var dpAdjust = new DataPoint();
                        if (lastWeek.Any(i => i.Key.AddDays(7).Equals(value.Key))) {
                            dpAdjust.XValue = Convert.ToDateTime(value.Key).ToOADate();
                            dpAdjust.YValues[0] = lastWeek.Where(i => i.Key.AddDays(7).Equals(value.Key)).Select(x => x.Value).First();
                        }
                        else {
                            dpAdjust.XValue = Convert.ToDateTime(value.Key).ToOADate();
                            dpAdjust.YValues[0] = 0;
                        }
                        serialBusyWeek.Points.Add(dpAdjust);
                    }
                    chart.Series.Add(serialBusyWeek);
                }
            }
            catch {
            }
            #endregion

            #region Last Month.
            try {
                if (lastMonth != null && lastMonth.Count > 0) {
                    var serialBusyMonth = new Series("Last Month");
                    serialBusyMonth.ChartType = SeriesChartType.Spline;
                    serialBusyMonth["PointWidth"] = "0.8";
                    serialBusyMonth.LegendText = GetWeekOfMonth(lastMonthStartTime) + lastMonthStartTime.ToString("dddd") + " last month";
                    serialBusyMonth.ToolTip = GetWeekOfMonth(lastMonthStartTime) + lastMonthStartTime.ToString("dddd") + " last month";
                    serialBusyMonth.Color = Color.DeepSkyBlue;

                    serialBusyMonth.IsXValueIndexed = true;
                    serialBusyMonth.XValueType = ChartValueType.DateTime;
                    serialBusyMonth.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                    serialBusyMonth.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");

                    foreach (var value in processBusy) {
                        var dpAdjust = new DataPoint();
                        if (lastMonth.Any(i => i.Key.Equals(Helper.GetLastMonthDate(value.Key)))) {
                            dpAdjust.XValue = Convert.ToDateTime(value.Key).ToOADate();
                            dpAdjust.YValues[0] = lastMonth.Where(i => i.Key.Equals(Helper.GetLastMonthDate(value.Key))).Select(x => x.Value).First();
                        }
                        else {
                            dpAdjust.XValue = Convert.ToDateTime(value.Key).ToOADate();
                            dpAdjust.YValues[0] = 0;
                        }
                        serialBusyMonth.Points.Add(dpAdjust);
                    }
                    chart.Series.Add(serialBusyMonth);
                }
            }
            catch {
            }
            #endregion

            chart.ImageType = ChartImageType.Jpeg;
            if (!Directory.Exists(path + "\\TempImg\\")) {
                Directory.CreateDirectory(path + "\\TempImg\\");
            }
            string saveLocation = path + "\\TempImg\\ChartPicProcessBusy_" + DateTime.Now.Ticks + ".jpg";
            //Save the chart image.
            chart.SaveImage(saveLocation);
            return saveLocation;
        }

        public string CreatePeakProcessQueuePerInterval(Dictionary<DateTime, double> processBusy, Dictionary<DateTime, double> lastWeek, Dictionary<DateTime, double> lastMonth, string path, System.IO.StreamWriter newLog, long interval, DateTime lastWeekStartTime, DateTime lastMonthStartTime) {
            //Force all datetime to be in US format.
            System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
            var chart = new Chart();
            chart.Width = 900;
            chart.Height = 250;
            chart.Palette = ChartColorPalette.EarthTones;
            var chartarea = new ChartArea();
            chartarea.AxisY.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisX.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisY.IsLabelAutoFit = false;
            chartarea.AxisX.IsLabelAutoFit = false;
            //chartarea.AxisY.LabelStyle.Format = "{#}";

            chartarea.AxisY.MajorGrid.Enabled = true;
            chartarea.BorderWidth = 0;
            chartarea.AxisY.Title = "Process Receive Queue Length";
            //Display Axis every 30 mins.
            if (interval == 1800)
                chartarea.AxisX.Interval = 1;
            else {
                if (interval > 1800) {
                    var newInterval = interval / 1800;
                    chartarea.AxisX.Interval = (int)newInterval;
                }
                else {
                    var newInterval = 1800 / interval;
                    chartarea.AxisX.Interval = (int)newInterval;
                }
            }
            chartarea.AxisX.LabelStyle.Angle = -60;
            var dayCount = processBusy.Last().Key - processBusy.First().Key;

            if (dayCount.TotalDays < 1) {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.MajorTickMark.Enabled = false;
                //chartarea.AxisX.IntervalType = DateTimeIntervalType.Hours;
                //chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Hours;
                chartarea.AxisX.LabelStyle.Format = "HH:mm";
            }
            else if (dayCount.TotalDays > 1 && dayCount.TotalDays <= 7) {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.MajorTickMark.Enabled = false;
                //chartarea.AxisX.IntervalType = DateTimeIntervalType.Hours;
                //chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Auto;
                chartarea.AxisX.LabelStyle.Format = "HH:mm";
            }
            else if (dayCount.TotalDays <= 14) {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.IntervalType = DateTimeIntervalType.Days;
                chartarea.AxisX.IntervalOffset = 0;
                chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Auto;
                chartarea.AxisX.LabelStyle.Format = "MMM/dd/yy\ndddd";
            }
            else {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.IntervalType = DateTimeIntervalType.Days;
                chartarea.AxisX.IntervalOffset = 0;
                chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Auto;
                chartarea.AxisX.LabelStyle.Format = "MMM/dd/yy";
            }
            chartarea.AxisY.TitleFont = new Font("Calibri", 8);
            chartarea.AxisY.MajorGrid.LineColor = Color.Silver;
            chartarea.AxisX.MajorGrid.LineColor = Color.Silver;

            //Legend format.
            chart.Legends.Clear();
            chart.Legends.Add("Default");
            chart.Legends[0].LegendStyle = LegendStyle.Row;
            chart.Legends[0].IsDockedInsideChartArea = true;
            chart.Legends[0].Alignment = StringAlignment.Center;
            chart.Legends[0].Font = new Font("Calibri", 6);
            chart.Legends[0].BorderDashStyle = ChartDashStyle.NotSet;
            chart.Legends[0].Docking = Docking.Bottom;

            try {
                var serialBusy = new Series("Peak Process Queue");
                serialBusy.ChartType = SeriesChartType.Spline;
                serialBusy["PointWidth"] = "0.8";
                serialBusy.LegendText = "Process Receive Queue Length";
                serialBusy.ToolTip = "Process Receive Queue Length";
                serialBusy.Color = Color.Red;

                serialBusy.IsXValueIndexed = true;
                serialBusy.XValueType = ChartValueType.DateTime;
                serialBusy.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                serialBusy.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");

                //populate all the data.
                foreach (var value in processBusy) {
                    var dpAdjust = new DataPoint();
                    dpAdjust.XValue = Convert.ToDateTime(value.Key).ToOADate();
                    dpAdjust.YValues[0] = Convert.ToDouble(value.Value);
                    serialBusy.Points.Add(dpAdjust);
                }

                chart.Series.Add(serialBusy);
            }
            catch {
            }


            #region Last Week.
            try {
                if (lastWeek != null && lastWeek.Count > 0) {
                    var serialBusyWeek = new Series("Last Week");
                    serialBusyWeek.ChartType = SeriesChartType.Spline;
                    serialBusyWeek["PointWidth"] = "0.8";
                    serialBusyWeek.LegendText = "Last " + lastWeekStartTime.ToString("dddd");
                    serialBusyWeek.ToolTip = "Last " + lastWeekStartTime.ToString("dddd");
                    serialBusyWeek.Color = Color.Green;

                    serialBusyWeek.IsXValueIndexed = true;
                    serialBusyWeek.XValueType = ChartValueType.DateTime;
                    serialBusyWeek.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                    serialBusyWeek.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");

                    foreach (var value in processBusy) {
                        var dpAdjust = new DataPoint();
                        if (lastWeek.Any(i => i.Key.AddDays(7).Equals(value.Key))) {
                            dpAdjust.XValue = Convert.ToDateTime(value.Key).ToOADate();
                            dpAdjust.YValues[0] = lastWeek.Where(i => i.Key.AddDays(7).Equals(value.Key)).Select(x => x.Value).First();
                        }
                        else {
                            dpAdjust.XValue = Convert.ToDateTime(value.Key).ToOADate();
                            dpAdjust.YValues[0] = 0;
                        }
                        serialBusyWeek.Points.Add(dpAdjust);
                    }
                    chart.Series.Add(serialBusyWeek);
                }
            }
            catch {
            }
            #endregion

            #region Last Month.
            try {
                if (lastMonth != null && lastMonth.Count > 0) {
                    var serialBusyMonth = new Series("Last Month");
                    serialBusyMonth.ChartType = SeriesChartType.Spline;
                    serialBusyMonth["PointWidth"] = "0.8";
                    serialBusyMonth.LegendText = GetWeekOfMonth(lastMonthStartTime) + lastMonthStartTime.ToString("dddd") + " last month";
                    serialBusyMonth.ToolTip = GetWeekOfMonth(lastMonthStartTime) + lastMonthStartTime.ToString("dddd") + " last month";
                    serialBusyMonth.Color = Color.DeepSkyBlue;

                    serialBusyMonth.IsXValueIndexed = true;
                    serialBusyMonth.XValueType = ChartValueType.DateTime;
                    serialBusyMonth.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                    serialBusyMonth.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");

                    foreach (var value in processBusy) {
                        var dpAdjust = new DataPoint();
                        if (lastMonth.Any(i => i.Key.Equals(Helper.GetLastMonthDate(value.Key)))) {
                            dpAdjust.XValue = Convert.ToDateTime(value.Key).ToOADate();
                            dpAdjust.YValues[0] = lastMonth.Where(i => i.Key.Equals(Helper.GetLastMonthDate(value.Key))).Select(x => x.Value).First();
                        }
                        else {
                            dpAdjust.XValue = Convert.ToDateTime(value.Key).ToOADate();
                            dpAdjust.YValues[0] = 0;
                        }
                        serialBusyMonth.Points.Add(dpAdjust);
                    }
                    chart.Series.Add(serialBusyMonth);
                }
            }
            catch {
            }
            #endregion

            chart.ChartAreas.Add(chartarea);

            chart.ImageType = ChartImageType.Jpeg;
            if (!Directory.Exists(path + "\\TempImg\\")) {
                Directory.CreateDirectory(path + "\\TempImg\\");
            }
            string saveLocation = path + "\\TempImg\\ChartPicProcessQueue_" + DateTime.Now.Ticks + ".jpg";
            //Save the chart image.
            chart.SaveImage(saveLocation);
            return saveLocation;
        }

        public string CreateProcessAbortPerInterval(Dictionary<DateTime, ProcessTransaction> processBusy, Dictionary<DateTime, double> lastWeek, Dictionary<DateTime, double> lastMonth, string path, System.IO.StreamWriter newLog, long interval, DateTime lastWeekStartTime, DateTime lastMonthStartTime) {
            var chart = new Chart();
            chart.Width = 900;
            chart.Height = 250;
            chart.Palette = ChartColorPalette.EarthTones;
            var chartarea = new ChartArea();
            chartarea.AxisY.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisX.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisY.IsLabelAutoFit = false;
            chartarea.AxisX.IsLabelAutoFit = false;
            chartarea.AxisY.LabelStyle.Format = "#,0";

            chartarea.AxisY.MajorGrid.Enabled = true;
            chartarea.BorderWidth = 0;
            chartarea.AxisY.Title = "Transactions";

            //AxisY2

            chartarea.AxisY2.Maximum = Double.NaN;

            chartarea.AxisY2.Enabled = AxisEnabled.True;
            chartarea.AxisY2.Minimum = 0;
            chartarea.AxisY2.RoundAxisValues();
            chartarea.AxisY2.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisY2.TitleFont = new Font("Calibri", 8);
            chartarea.AxisY2.IsLabelAutoFit = false;
            chartarea.AxisY2.Title = "Abort (%)";
            chartarea.AxisY2.MajorGrid.Enabled = false;


            //Display Axis every 30 mins.
            if (interval == 1800)
                chartarea.AxisX.Interval = 1;
            else {
                if (interval > 1800) {
                    var newInterval = interval / 1800;
                    chartarea.AxisX.Interval = (int)newInterval;
                }
                else {
                    var newInterval = 1800 / interval;
                    chartarea.AxisX.Interval = (int)newInterval;
                }
            }
            chartarea.AxisX.LabelStyle.Angle = -60;
            var dayCount = processBusy.Last().Key - processBusy.First().Key;

            if (dayCount.TotalDays < 1) {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.MajorTickMark.Enabled = false;
                //chartarea.AxisX.IntervalType = DateTimeIntervalType.Hours;
                //chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Hours;
                chartarea.AxisX.LabelStyle.Format = "HH:mm";
            }
            else if (dayCount.TotalDays > 1 && dayCount.TotalDays <= 7) {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.MajorTickMark.Enabled = false;
                //chartarea.AxisX.IntervalType = DateTimeIntervalType.Hours;
                //chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Auto;
                chartarea.AxisX.LabelStyle.Format = "HH:mm";
            }
            else if (dayCount.TotalDays <= 14) {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.IntervalType = DateTimeIntervalType.Days;
                chartarea.AxisX.IntervalOffset = 0;
                chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Auto;
                chartarea.AxisX.LabelStyle.Format = "MMM/dd/yy\ndddd";
            }
            else {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.IntervalType = DateTimeIntervalType.Days;
                chartarea.AxisX.IntervalOffset = 0;
                chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Auto;
                chartarea.AxisX.LabelStyle.Format = "MMM/dd/yy";
            }
            chartarea.AxisY.TitleFont = new Font("Calibri", 8);
            chartarea.AxisY.MajorGrid.LineColor = Color.Silver;
            chartarea.AxisX.MajorGrid.LineColor = Color.Silver;

            //Legend format.
            chart.Legends.Clear();
            chart.Legends.Add("Default");
            chart.Legends[0].LegendStyle = LegendStyle.Row;
            chart.Legends[0].IsDockedInsideChartArea = true;
            chart.Legends[0].Alignment = StringAlignment.Center;
            chart.Legends[0].Font = new Font("Calibri", 6);
            chart.Legends[0].BorderDashStyle = ChartDashStyle.NotSet;
            chart.Legends[0].Docking = Docking.Bottom;

            try {
                var serialBusy = new Series("Aborted");
                serialBusy.ChartType = SeriesChartType.StackedColumn;
                serialBusy["PointWidth"] = "0.8";
                serialBusy.LegendText = "Aborted";
                serialBusy.ToolTip = "Aborted";
                serialBusy.Color = Color.Red;

                serialBusy.IsXValueIndexed = true;
                serialBusy.XValueType = ChartValueType.DateTime;
                serialBusy.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                serialBusy.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");

                //populate all the data.
                foreach (var value in processBusy) {
                    var dpAdjust = new DataPoint();
                    dpAdjust.XValue = Convert.ToDateTime(value.Key).ToOADate();
                    dpAdjust.YValues[0] = Convert.ToDouble(value.Value.AbortTrans);
                    serialBusy.Points.Add(dpAdjust);
                }

                chart.Series.Add(serialBusy);
            }
            catch {
            }

            try {
                var serialBusy = new Series("Completed");
                serialBusy.ChartType = SeriesChartType.StackedColumn;
                serialBusy["PointWidth"] = "0.8";
                serialBusy.LegendText = "Completed";
                serialBusy.ToolTip = "Completed";
                serialBusy.Color = Color.Green;

                serialBusy.IsXValueIndexed = true;
                serialBusy.XValueType = ChartValueType.DateTime;
                serialBusy.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                serialBusy.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");

                //populate all the data.
                foreach (var value in processBusy) {
                    var dpAdjust = new DataPoint();
                    dpAdjust.XValue = Convert.ToDateTime(value.Key).ToOADate();
                    dpAdjust.YValues[0] = Convert.ToDouble(value.Value.BeginTrans - value.Value.AbortTrans);
                    serialBusy.Points.Add(dpAdjust);
                }

                chart.Series.Add(serialBusy);
            }
            catch {
            }

            try {
                var serialBusy = new Series("AbourtPercent");
                serialBusy.ChartType = SeriesChartType.Spline;
                serialBusy["PointWidth"] = "0.8";
                serialBusy.LegendText = "% Aborted";
                serialBusy.ToolTip = "% Aborted";
                serialBusy.Color = Color.DeepSkyBlue;

                serialBusy.IsXValueIndexed = true;
                serialBusy.XValueType = ChartValueType.DateTime;
                serialBusy.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                serialBusy.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Secondary");

                //populate all the data.
                foreach (var value in processBusy) {
                    var dpAdjust = new DataPoint();
                    dpAdjust.XValue = Convert.ToDateTime(value.Key).ToOADate();
                    dpAdjust.YValues[0] = Convert.ToDouble((value.Value.AbortTrans / value.Value.BeginTrans) * 100);
                    serialBusy.Points.Add(dpAdjust);
                }

                chart.Series.Add(serialBusy);
            }
            catch {
            }

            try {
                if (lastWeek != null && lastWeek.Count > 0) {
                    var serialBusyWeek = new Series("Last Week");
                    serialBusyWeek.ChartType = SeriesChartType.Spline;
                    serialBusyWeek["PointWidth"] = "0.8";
                    serialBusyWeek.LegendText = "Last " + lastWeekStartTime.ToString("dddd");
                    serialBusyWeek.ToolTip = "Last " + lastWeekStartTime.ToString("dddd");
                    serialBusyWeek.Color = Color.DarkOrange;

                    serialBusyWeek.IsXValueIndexed = true;
                    serialBusyWeek.XValueType = ChartValueType.DateTime;
                    serialBusyWeek.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                    serialBusyWeek.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Secondary");

                    foreach (var value in processBusy) {
                        var dpAdjust = new DataPoint();
                        if (lastWeek.Any(i => i.Key.AddDays(7).Equals(value.Key))) {
                            dpAdjust.XValue = Convert.ToDateTime(value.Key).ToOADate();
                            dpAdjust.YValues[0] = lastWeek.Where(i => i.Key.AddDays(7).Equals(value.Key)).Select(x => x.Value).First();
                        }
                        else {
                            dpAdjust.XValue = Convert.ToDateTime(value.Key).ToOADate();
                            dpAdjust.YValues[0] = 0;
                        }
                        serialBusyWeek.Points.Add(dpAdjust);
                    }

                    chart.Series.Add(serialBusyWeek);
                }
            }
            catch {
            }

            try {
                if (lastMonth != null && lastMonth.Count > 0) {
                    var serialBusyMonth = new Series("Last Month");
                    serialBusyMonth.ChartType = SeriesChartType.Spline;
                    serialBusyMonth["PointWidth"] = "0.8";
                    serialBusyMonth.LegendText = GetWeekOfMonth(lastMonthStartTime) + lastMonthStartTime.ToString("dddd") + " last month";
                    serialBusyMonth.ToolTip = GetWeekOfMonth(lastMonthStartTime) + lastMonthStartTime.ToString("dddd") + " last month";
                    serialBusyMonth.Color = Color.Magenta;

                    serialBusyMonth.IsXValueIndexed = true;
                    serialBusyMonth.XValueType = ChartValueType.DateTime;
                    serialBusyMonth.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                    serialBusyMonth.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Secondary");

                    foreach (var value in processBusy) {
                        var dpAdjust = new DataPoint();
                        if (lastMonth.Any(i => i.Key.Equals(Helper.GetLastMonthDate(value.Key)))) {
                            dpAdjust.XValue = Convert.ToDateTime(value.Key).ToOADate();
                            dpAdjust.YValues[0] = lastMonth.Where(i => i.Key.Equals(Helper.GetLastMonthDate(value.Key))).Select(x => x.Value).First();
                        }
                        else {
                            dpAdjust.XValue = Convert.ToDateTime(value.Key).ToOADate();
                            dpAdjust.YValues[0] = 0;
                        }
                        serialBusyMonth.Points.Add(dpAdjust);
                    }

                    chart.Series.Add(serialBusyMonth);
                }
            }
            catch {
            }

            chart.ChartAreas.Add(chartarea);

            chart.ImageType = ChartImageType.Jpeg;
            if (!Directory.Exists(path + "\\TempImg\\")) {
                Directory.CreateDirectory(path + "\\TempImg\\");
            }
            string saveLocation = path + "\\TempImg\\ChartPicProcessAbort_" + DateTime.Now.Ticks + ".jpg";
            //Save the chart image.
            chart.SaveImage(saveLocation);
            return saveLocation;
        }

        public string CreateForecastChartPerInterval(List<ForecastData> forecastData, DateTime startDate, DateTime endDate, string path, long interval) {
            var saveLocation = CreateForecastIntervalCPUBusyDundasChart(forecastData, startDate, endDate, path, interval);

            return saveLocation;
        }

        public string CreateObjectsGrid(DataSet grids, string encryptSystemSerial, DateTime startTime, DateTime stopTime, bool isLocalAnalyst, string websiteAddress) {
            StringBuilder sb = new StringBuilder();
            sb.Append("<table style='width:100%;font-size:12px;font-family:Calibri;text-align:center' cellpadding='0' cellspacing='0' border='1'>");
            //Header
            sb.Append("<tr>");
            for (int j = 1; j < grids.Tables[0].Columns.Count; j++) {
                if (j < 2) {
                    sb.Append("<th colspan='2'>");
                }
                else {
                    //string headerBorderStyle = j == 2 ? "border-top: 1px solid black; border-left: 1px solid black" : j == grids.Tables[0].Columns.Count - 1 ? "border-top: 1px solid black; border-right: 1px solid black" : "border-top: 1px solid black;";
                    string headerBorderStyle = j == 2 ? "border-right:0;" : j == grids.Tables[0].Columns.Count - 1 ? "border-left:0;" : "border-left:0;border-right:0;";
                    string headerColor = grids.Tables[1].Rows[0][j].ToString();
                    if (headerColor.Equals("")) {
                        headerColor = "green";
                    }
                    sb.Append("<th style='width:30px;" + headerBorderStyle + "background-color:" + headerColor + ";'>");
                    sb.Append(grids.Tables[0].Columns[j].ColumnName);
                }
                sb.Append("</th>" + Environment.NewLine);
            }
            sb.Append("</tr>" + Environment.NewLine);
            for (int i = 0; i < grids.Tables[0].Rows.Count; i++) {
                if (grids.Tables[0].Rows[i][0].ToString() != "Storage") {
                    sb.Append("<tr>");
                    for (int j = 0; j < grids.Tables[0].Columns.Count; j++) {
                        var value = grids.Tables[0].Rows[i][j].ToString();
                        string cellColor = grids.Tables[1].Rows[i + 1][j].ToString().Trim();
                        if (j < 2) {
                            sb.Append("<td style='width:60px;");
                            if (i % 2 == 0 || j % 2 == 1) {
								if (cellColor.Length > 0) {
									sb.Append("background-color:" + cellColor + ";");
								}
								else {
									sb.Append("background-color: green;");
								}
                            }
                            sb.Append("'>");
                            if (i % 2 == 0 || j % 2 == 1) {
                                //Add hyperlinks
                                string graphName = "";
                                if (value.Equals("Busy") && grids.Tables[0].Rows[i][0].ToString() == "CPU") {
                                    graphName = "CpuBusyGraph";
                                }
                                else if (value.Equals("Queue") && grids.Tables[0].Rows[i][0].ToString() == "CPU")
                                    graphName = "CPUQueueLengthGraph";
                                else if (value.Equals("Busy") && grids.Tables[0].Rows[i][0].ToString() == "IPU") {
                                    graphName = "IpuBusyGraph";
                                }
                                else if (value.Equals("Queue") && grids.Tables[0].Rows[i][0].ToString() == "IPU") {
                                    graphName = "IPUQueueLengthGraph";
                                }
                                else if (value.Equals("Queue") && grids.Tables[0].Rows[i][0].ToString() == "Disk") {
                                    graphName = "Top20Disks";
                                }
								if (!value.Equals("DP2 Busy")) {
									if (j == 1) sb.Append("<a style='color:blue;position:relative;display:block;' href='#" + graphName + "'>");
								}
                                sb.Append(value);
								if (!value.Equals("DP2 Busy")) {
									if (j == 1) sb.Append("</a>");
								}
                            }
                        }
                        else {
                            if (cellColor.Equals("")) {
                                cellColor = "green";
                            }
                            sb.Append("<td style='width:30px;background-color:" + cellColor + ";'>");
                            if (value.Equals("0") || value.Equals("-1"))
                            {
                                value = "";
                                sb.Append(value);
                            }
                            else {
                                //Build StartTime.
                                var columnName = grids.Tables[0].Columns[j].ColumnName;
                                var tempDateTime = Convert.ToDateTime(startTime.ToString("yyyy-MM-dd") + " " + columnName + ":00:00");

                                if (tempDateTime >= startTime && tempDateTime <= stopTime) { }
                                else {
                                    tempDateTime = Convert.ToDateTime(stopTime.ToString("yyyy-MM-dd") + " " + columnName + ":00:00");
                                }

                                var encrypt = new Decrypt();
                                var encryptStartTime = encrypt.strDESEncrypt(tempDateTime.ToString("yyyy-MM-dd HH:mm"));

                                var exceptionEntiry = "";

                                if (grids.Tables[0].Rows[i][0].ToString() == "CPU")
                                    exceptionEntiry = "CPU";
                                else if (grids.Tables[0].Rows[i][0].ToString() == "IPU")
                                    exceptionEntiry = "IPU";
                                else if (grids.Tables[0].Rows[i][0].ToString() == "Disk")
                                    exceptionEntiry = "Disk";

                                if (!isLocalAnalyst) {
                                    sb.Append("<a style='color:blue;position:relative;display:block;' href='" + websiteAddress + "/EmailLogin.aspx?User=@User&System=" +
                                              encryptSystemSerial + "&StartDate=" + encryptStartTime + "&ExceptionEntity=" + exceptionEntiry + "'>" + value + "</a>");
                                }
                                else {
                                    sb.Append("<a style='color:blue;position:relative;display:block;' href='" + websiteAddress + "/EmailLogin.aspx?User=@User&System=" +
                                              encryptSystemSerial + "&StartDate=" + encryptStartTime + "&ExceptionEntity=" + exceptionEntiry + "'>" + value + "</a>");
                                }
                            }
                        }
                        sb.Append("</td>" + Environment.NewLine);
                    }
                    sb.Append("</tr>" + Environment.NewLine);
                }
                else {
                    sb.Append("<tr>");
                    for (int j = 0; j < 3; j++) {
                        var value = grids.Tables[0].Rows[i][j].ToString();
                        string cellColor = grids.Tables[1].Rows[i + 1][j].ToString().Trim();
                        if (j < 2) {
                            sb.Append("<td style='width:60px;");
							if (cellColor.Length > 0) {
								sb.Append("background-color:" + cellColor + ";");
							}
							else {
								sb.Append("background-color: green;");
							}
                            sb.Append("'>");

							if (value == "Used %" && cellColor.Length > 0) {
								string graphName = "Top20Storage";
								//Add hyperlinks
								sb.Append("<a style='color:blue;position:relative;display:block;' href='#" + graphName + "'>");
								sb.Append(value);
								sb.Append("</a>");
							}
							else {
								sb.Append(value);
							}
                        }
                        else {
                            value = grids.Tables[0].Rows[i]["00"].ToString();
                            if (cellColor.Equals("")) {
                                cellColor = "green";
                            }
                            sb.Append("<td colspan='24' style='width:30px;background-color:" + cellColor + ";padding-left:5px;text-align:left;'>");
                            if (value.Equals("0") || value.Equals("-1")) 
                            { 
                                value = "";
                                sb.Append(value);
                            }
                            else {
                                //Build StartTime.
                                var columnName = grids.Tables[0].Columns[j].ColumnName;
                                var tempDateTime = Convert.ToDateTime(startTime.ToString("yyyy-MM-dd") + " " + columnName + ":00:00");

                                if (tempDateTime >= startTime && tempDateTime <= stopTime) { }
                                else {
                                    tempDateTime = Convert.ToDateTime(stopTime.ToString("yyyy-MM-dd") + " " + columnName + ":00:00");
                                }

                                var encrypt = new Decrypt();
                                var encryptStartTime = encrypt.strDESEncrypt(tempDateTime.ToString("yyyy-MM-dd HH:mm"));

                                if (!isLocalAnalyst) {
                                    sb.Append("<a style='color: blue;position:relative;display:block;' href='" + websiteAddress + "/EmailLogin.aspx?User=@User&System=" +
                                              encryptSystemSerial + "&StartDate=" + encryptStartTime + "&ExceptionEntity=Storage'>" + value + "</a>");
                                }
                                else {
                                    sb.Append("<a style='color: blue;position:relative;display:block;' href='" + websiteAddress + "/EmailLogin.aspx?User=@User&System=" +
                                              encryptSystemSerial + "&StartDate=" + encryptStartTime + "&ExceptionEntity=Storage'>" + value + "</a>");
                                }
                            }

                        }
                        sb.Append("</td>" + Environment.NewLine);
                    }
                    sb.Append("</tr>" + Environment.NewLine);
                }
            }
            sb.Append("</table><br>");
            return sb.ToString();
        }

        public string CreateChartPerInterval(string systemSerial, DateTime startDate, DateTime endDate, string path, System.IO.StreamWriter newLog, long interval, ref bool hourDrop, ref List<System.DateTime[]> hourDropPeriods) {
            //IR 6466
            newLog.WriteLine("On CreateChartPerInterval");
            newLog.Flush();

            string alerttxt = string.Empty;
            var sysUnrated = new DailySysUnratedService(ConnectionStringSPAM);
            if ((Convert.ToDateTime(endDate).Subtract(startDate)).Days >= 1) {
                DataSet dset = sysUnrated.GetDataDateFor(1, startDate, endDate, systemSerial);
                if (dset.Tables["Interval"].Rows.Count == 0) {
                    return alerttxt;
                }
                var reportDate = new DateTime[dset.Tables["Interval"].Rows.Count];
                for (int i = 0; i < dset.Tables["Interval"].Rows.Count; i++) {
                    reportDate[i] = Convert.ToDateTime(dset.Tables["Interval"].Rows[i]["DataDate"].ToString());
                }
                string strReturn = CreateIntervalCPUBusyDundasChart(systemSerial, reportDate, startDate, endDate, path, interval, ref hourDrop, ref hourDropPeriods);
                strReturn += ",";
                strReturn += CreateIntervalCPUQueueDundasChart(systemSerial, reportDate, startDate, endDate, path, interval);
                return strReturn;
            }
            else {
                var reportDate = new DateTime[1];
                reportDate[0] = Convert.ToDateTime(startDate);

                string strReturn = "";
                newLog.WriteLine("Before CreatePerCPUDundasChart");
                newLog.Flush();
                strReturn = CreateIntervalCPUBusyDundasChart(systemSerial, reportDate, startDate, endDate, path, interval, ref hourDrop, ref hourDropPeriods);
                strReturn += ",";
                strReturn += CreateIntervalCPUQueueDundasChart(systemSerial, reportDate, startDate, endDate, path, interval);
                return strReturn;
            }
        }

        public string CreateIPUChartPerInterval(string systemSerial, DateTime startDate, DateTime endDate, string path, System.IO.StreamWriter newLog, long interval) {
            //IR 6466
            newLog.WriteLine("On CreateChartPerInterval");
            newLog.Flush();

            string alerttxt = string.Empty;
            var sysUnrated = new DailySysUnratedService(ConnectionStringSPAM);
            if ((Convert.ToDateTime(endDate).Subtract(startDate)).Days >= 1) {
                DataSet dset = sysUnrated.GetDataDateFor(1, startDate, endDate, systemSerial);
                if (dset.Tables["Interval"].Rows.Count == 0) {
                    return alerttxt;
                }
                var reportDate = new DateTime[dset.Tables["Interval"].Rows.Count];
                for (int i = 0; i < dset.Tables["Interval"].Rows.Count; i++) {
                    reportDate[i] = Convert.ToDateTime(dset.Tables["Interval"].Rows[i]["DataDate"].ToString());
                }
                string strReturn = CreateIntervalIPUBusyDundasChart(systemSerial, reportDate, startDate, endDate, path, interval);
                strReturn += ",";
                strReturn += CreateIntervalIPUQueueDundasChart(systemSerial, reportDate, startDate, endDate, path, interval);
                return strReturn;
            }
            else {
                var reportDate = new DateTime[1];
                reportDate[0] = Convert.ToDateTime(startDate);

                string strReturn = "";
                newLog.WriteLine("Before CreatePerIPUDundasChart");
                newLog.Flush();
                strReturn = CreateIntervalIPUBusyDundasChart(systemSerial, reportDate, startDate, endDate, path, interval);
                strReturn += ",";
                strReturn += CreateIntervalIPUQueueDundasChart(systemSerial, reportDate, startDate, endDate, path, interval);
                return strReturn;
            }
        }

        public string CreateApplicationChartPerInterval(string systemSerial, DateTime startDate, DateTime endDate, string path, System.IO.StreamWriter newLog, long interval, ref bool hourDrop) {
            //IR 6466
            newLog.WriteLine("On CreateApplicationChartPerInterval");
            newLog.Flush();
            
            var reportDate = new DateTime[1];
            reportDate[0] = Convert.ToDateTime(startDate);

            string strReturn = "";
            newLog.WriteLine("Before CreateApplicationIntervalCPUBusyDundasChart");
            newLog.Flush();
            strReturn = CreateApplicationIntervalCPUBusyDundasChart(systemSerial, reportDate, startDate, endDate, path, interval);
            return strReturn;
        }

        public string CreateCPUBusyChartHourly(string systemSerial, DateTime startDate, DateTime endDate, string path, out Color cpuBusyColor, System.IO.StreamWriter newLog) {
            System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
            string dateFormat = "yyyy-MM-dd HH:mm:ss";
            var chart = new Chart();
            chart.Width = 900;
            chart.Height = 250;
            chart.Palette = ChartColorPalette.EarthTones;
            var chartarea = new ChartArea();
            chartarea.AxisY.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisX.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisY.IsLabelAutoFit = false;
            chartarea.AxisX.IsLabelAutoFit = false;
            chartarea.AxisY.LabelStyle.Format = "{#}%";
            chartarea.AxisY.MajorGrid.Enabled = true;
            chartarea.BorderWidth = 0;
            chartarea.AxisY.Maximum = 100;
            chartarea.AxisY.Interval = 10;
            chartarea.AxisY.Title = "Peak CPU Busy (%)";
            chartarea.AxisX.Interval = 2;
            chartarea.AxisX.LabelStyle.Angle = -60;
            chartarea.AxisX.MajorGrid.Enabled = false;
            chartarea.AxisX.IntervalType = DateTimeIntervalType.Days;
            chartarea.AxisX.IntervalOffset = 0;
            chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Auto;
            chartarea.AxisX.LabelStyle.Format = "MMM/dd/yy\ndddd";
            chartarea.AxisY.TitleFont = new Font("Calibri", 8);
            chartarea.AxisY.MajorGrid.LineColor = Color.Silver;
            chartarea.AxisX.MajorGrid.LineColor = Color.Silver;
            chart.Legends.Clear();
            chart.Legends.Add("Default");
            chart.Legends[0].LegendStyle = LegendStyle.Row;
            chart.Legends[0].IsDockedInsideChartArea = true;
            chart.Legends[0].Alignment = StringAlignment.Center;
            chart.Legends[0].Font = new Font("Calibri", 6);
            chart.Legends[0].BorderDashStyle = ChartDashStyle.NotSet;
            chart.Legends[0].Docking = Docking.Bottom;
            var totalMaxValue = 0D;
            //Get data from detail table.
            var databaseMapService = new DatabaseMappingService(ConnectionString);
            string newConnectionString = databaseMapService.GetConnectionStringFor(systemSerial);
            var cpuTrendTable = new CPUTrendTable(newConnectionString);
            var dataTable = cpuTrendTable.GetCPUBusyTrendHourly(startDate.ToString(dateFormat), endDate.ToString(dateFormat));
            try {
                var subData = dataTable.AsEnumerable().Select(x => x.Field<string>("CpuNumber")).Distinct();
                foreach (var y in subData) {
                    var serialBusy = new Series(y);
                    serialBusy.ChartType = SeriesChartType.Spline;
                    serialBusy["PointWidth"] = "0.8";
                    serialBusy.IsXValueIndexed = true;
                    serialBusy.XValueType = ChartValueType.DateTime;
                    serialBusy.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                    serialBusy.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");

                    var myDataTable = dataTable.AsEnumerable().Where(x => x.Field<string>("CpuNumber").Equals(y)).OrderBy(x => x.Field<DateTime>("Hour")).CopyToDataTable();
                    //populate all the data.
                    for (var start = startDate; start < endDate; start = start.AddSeconds(3600)) {
                        if (myDataTable.AsEnumerable().Any(x => x.Field<DateTime>("Hour").Equals(start))) {
                            var peakBusyValue = myDataTable.AsEnumerable().Where(x => x.Field<DateTime>("Hour").Equals(start)).Select(x => x.Field<double>("PeakCpuBusy")).First();
                            var dpAdjust = new DataPoint();
                            dpAdjust.XValue = Convert.ToDateTime(start).ToOADate();
                            dpAdjust.YValues[0] = peakBusyValue;
                            serialBusy.Points.Add(dpAdjust);
                            if (peakBusyValue > totalMaxValue)
                                totalMaxValue = peakBusyValue;
                        }
                        else {
                            var dpAdjust = new DataPoint();
                            dpAdjust.XValue = Convert.ToDateTime(start).ToOADate();
                            dpAdjust.YValues[0] = 0;
                            serialBusy.Points.Add(dpAdjust);
                        }
                    }
                    chart.Series.Add(serialBusy);
                }
            }
            catch {
            }
            var color = Color.White;
            if (totalMaxValue > 79 && totalMaxValue < 90)
                color = Color.Yellow;
            else if (totalMaxValue >= 90)
                color = Color.Red;
            cpuBusyColor = color;
            chart.ChartAreas.Add(chartarea);
            chart.ImageType = ChartImageType.Jpeg;
            if (!Directory.Exists(path + "\\TempImg\\")) {
                Directory.CreateDirectory(path + "\\TempImg\\");
            }
            string saveLocation = path + "\\TempImg\\ChartPeakBusy_" + DateTime.Now.Ticks + ".jpg";
            chart.SaveImage(saveLocation);
            return saveLocation;
        }

        public string CreateCPUQueueChartHourly(string systemSerial, DateTime startDate, DateTime endDate, string path, out Color cpuQueueColor, System.IO.StreamWriter newLog) {
            System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
            string dateFormat = "yyyy-MM-dd HH:mm:ss";
            var chart = new Chart();
            chart.Width = 900;
            chart.Height = 250;
            chart.Palette = ChartColorPalette.EarthTones;
            var chartarea = new ChartArea();
            chartarea.AxisY.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisX.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisY.IsLabelAutoFit = false;
            chartarea.AxisX.IsLabelAutoFit = false;
            chartarea.AxisY.MajorGrid.Enabled = true;
            chartarea.BorderWidth = 0;
            chartarea.AxisY.Title = "Peak CPU Queue Length";
            chartarea.AxisX.Interval = 2;
            chartarea.AxisX.LabelStyle.Angle = -60;
            chartarea.AxisX.MajorGrid.Enabled = false;
            chartarea.AxisX.IntervalType = DateTimeIntervalType.Days;
            chartarea.AxisX.IntervalOffset = 0;
            chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Auto;
            chartarea.AxisX.LabelStyle.Format = "MMM/dd/yy\ndddd";
            chartarea.AxisY.TitleFont = new Font("Calibri", 8);
            chartarea.AxisY.MajorGrid.LineColor = Color.Silver;
            chart.Legends.Clear();
            chart.Legends.Add("Default");
            chart.Legends[0].LegendStyle = LegendStyle.Row;
            chart.Legends[0].IsDockedInsideChartArea = true;
            chart.Legends[0].Alignment = StringAlignment.Center;
            chart.Legends[0].Font = new Font("Calibri", 6);
            chart.Legends[0].BorderDashStyle = ChartDashStyle.NotSet;
            chart.Legends[0].Docking = Docking.Bottom;
            var totalMaxValue = 0D;
            //Get data from detail table.
            var databaseMapService = new DatabaseMappingService(ConnectionString);
            string newConnectionString = databaseMapService.GetConnectionStringFor(systemSerial);
            var cpuTrendTable = new CPUTrendTable(newConnectionString);
            var dataTable = cpuTrendTable.GetCPUQueueTrendHourly(startDate.ToString(dateFormat), endDate.ToString(dateFormat));
            try {
                var subData = dataTable.AsEnumerable().Select(x => x.Field<string>("CpuNumber")).Distinct();
                foreach (var y in subData) {
                    var seriesQueue = new Series(y);
                    seriesQueue.ChartType = SeriesChartType.Spline;
                    seriesQueue["PointWidth"] = "0.8";
                    seriesQueue.IsXValueIndexed = true;
                    seriesQueue.XValueType = ChartValueType.DateTime;
                    seriesQueue.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                    seriesQueue.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                    var myDataTable = dataTable.AsEnumerable().Where(x => x.Field<string>("CpuNumber").Equals(y)).OrderBy(x => x.Field<DateTime>("Hour")).CopyToDataTable();
                    //populate all the data.
                    for (var start = startDate; start < endDate; start = start.AddSeconds(3600)) {
                        if (myDataTable.AsEnumerable().Any(x => x.Field<DateTime>("Hour").Equals(start))) {
                            var peakQueueValue = myDataTable.AsEnumerable().Where(x => x.Field<DateTime>("Hour").Equals(start)).Select(x => x.Field<double>("PeakQueueLength")).First();
                            var dpAdjust = new DataPoint();
                            dpAdjust.XValue = Convert.ToDateTime(start).ToOADate();
                            dpAdjust.YValues[0] = peakQueueValue;
                            seriesQueue.Points.Add(dpAdjust);
                            if (peakQueueValue > totalMaxValue)
                                totalMaxValue = peakQueueValue;
                        }
                        else {
                            var dpAdjust = new DataPoint();
                            dpAdjust.XValue = Convert.ToDateTime(start).ToOADate();
                            dpAdjust.YValues[0] = 0;
                            seriesQueue.Points.Add(dpAdjust);
                        }
                    }
                    chart.Series.Add(seriesQueue);
                }
            }
            catch {
            }
            var color = Color.White;

            if (totalMaxValue >= 5 && totalMaxValue < 10)
                color = Color.Yellow;
            else if (totalMaxValue >= 10)
                color = Color.Red;
            cpuQueueColor = color;
            chart.ChartAreas.Add(chartarea);
            chart.ImageType = ChartImageType.Jpeg;
            if (!Directory.Exists(path + "\\TempImg\\")) {
                Directory.CreateDirectory(path + "\\TempImg\\");
            }
            string saveLocation = path + "\\TempImg\\ChartPeakQueue_" + DateTime.Now.Ticks + ".jpg";
            chart.SaveImage(saveLocation);
            return saveLocation;
        }

        public string GenerateCPUBusyTable(string systemSerial, DateTime startDate, DateTime endDate, long interval)
        {
            //Force all datetime to be in US format.
            System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
            string dateFormat = "yyyy-MM-dd HH:mm:ss";
            var cpuInfoTable = new StringBuilder();

            var sysUnrated = new DailySysUnratedService(ConnectionStringSPAM);
            var reportDate = new List<DateTime>();

            if ((Convert.ToDateTime(endDate).Subtract(startDate)).Days >= 1) {
                DataSet dset = sysUnrated.GetDataDateFor(1, startDate, endDate, systemSerial);
                for (int i = 0; i < dset.Tables["Interval"].Rows.Count; i++) {
                    reportDate.Add(Convert.ToDateTime(dset.Tables["Interval"].Rows[i]["DataDate"].ToString()));
                }
            }
            else {
                reportDate.Add(Convert.ToDateTime(startDate));
            }

            //Get data from detail table.
            var databaseMapService = new DatabaseMappingService(ConnectionString);
            string newConnectionString = databaseMapService.GetConnectionStringFor(systemSerial);


            //Get TableNames.
            var databaseCheck = new Database(newConnectionString, "");
            var databaseName = Helper.FindKeyName(newConnectionString, "DATABASE");
            var cpuTrendTable = new CPUTrendTable(newConnectionString);
            var dataTable = cpuTrendTable.GetCPUBusyInterval(startDate.ToString(dateFormat), endDate.ToString(dateFormat));
            var cpuLists = dataTable.AsEnumerable().Select(x => x.Field<UInt64>("CPUNumber")).Distinct().ToList();

            //loop through each date and check if we not missing any data.
            for (var start = startDate; start < endDate; start = start.AddSeconds(interval)) {
                foreach (var cpuNum in cpuLists) {
                    if (!dataTable.AsEnumerable().Any(x => x.Field<DateTime>("Date & Time").Equals(start) && x.Field<UInt64>("CPUNumber").Equals(cpuNum))) {
                        DataRow newRow = dataTable.NewRow();
                        newRow["Date & Time"] = start;
                        newRow["Busy"] = 0;
                        newRow["CPUNumber"] = cpuNum;

                        dataTable.Rows.Add(newRow);
                    }
                }
            }

            dataTable = dataTable.AsEnumerable().OrderBy(x => x.Field<DateTime>("Date & Time")).CopyToDataTable();
            var dataIntervals = dataTable.AsEnumerable().Select(x => x.Field<DateTime>("Date & Time")).Distinct().ToList();

            if (dataIntervals.Count > 0) {
                cpuInfoTable.Append("<div><table class=main CellPadding=2 CellSpacing=0 Border=1 style='FONT-SIZE: 7pt; FONT-FAMILY: Calibri; padding-left:25px;'> ");
                cpuInfoTable.Append("<tr style=\"background-color:LightGrey;border-color:Black;border-width:1px;border-style:solid;\">\n");
                cpuInfoTable.Append("<th align=\"center\" scope=\"col\" style=\"text-decoration:underline;white-space:nowrap;\">Date & Time</th>");
                foreach (var cpuNum in cpuLists) {
                    //Get the max cpu value for each CPU and change the back-ground color if the value is over 80.
                    var maxValue = dataTable.AsEnumerable().Where(x => x.Field<UInt64>("CPUNumber").Equals(cpuNum)).Max(x => x.Field<double>("Busy"));

                    if (maxValue > 79 && maxValue < 90)
                        cpuInfoTable.Append("<th align=\"center\" scope=\"col\" style=\"text-decoration:underline;white-space:nowrap;background-color: yellow;\"><a href='#cpubusy" + cpuNum.ToString("D2") + "'>" + cpuNum.ToString("D2") + "</a></th>");
                    else if (maxValue >= 90)
                        cpuInfoTable.Append("<th align=\"center\" scope=\"col\" style=\"text-decoration:underline;white-space:nowrap;background-color: red;\"><a href='#cpubusy" + cpuNum.ToString("D2") + "'>" + cpuNum.ToString("D2") + "</a></th>");
                    else
                        cpuInfoTable.Append("<th align=\"center\" scope=\"col\" style=\"text-decoration:underline;white-space:nowrap;\">" + cpuNum.ToString("D2") + "</th>");
                }
                cpuInfoTable.Append("</tr>\n");

                int rowIndex = 0;

                foreach (var dataInterval in dataIntervals) {
                    if (rowIndex % 2 == 0)
                        cpuInfoTable.Append("<tr>\n");
                    else
                        cpuInfoTable.Append("<tr style='background-color: #E6E6E6;'>\n");
                    cpuInfoTable.Append("<td align=\"left\" >" + dataInterval.ToString("MMM dd HH:mm") + "</td>\n");
                    foreach (var cpuNum in cpuLists) {
                        var cpuValue = dataTable.AsEnumerable().Where(x => x.Field<DateTime>("Date & Time").Equals(dataInterval))
                                                            .Where(x => x.Field<UInt64>("CPUNumber").Equals(cpuNum))
                                                            .Select(x => x.Field<double>("Busy")).First();
                        if (cpuValue > 79 && cpuValue < 90)
                            cpuInfoTable.Append("<td align=\"right\" style='background-color: yellow;'><a name='cpubusy" + cpuNum.ToString("D2") + "'></a>" + string.Format("{0:#,##0.00}", Math.Round(cpuValue, 2)) + "</td>\n");
                        else if (cpuValue >= 90) {
                            cpuInfoTable.Append("<td align=\"right\" style='background-color: red;'><a name='cpubusy" + cpuNum.ToString("D2") + "'></a>" + string.Format("{0:#,##0.00}", Math.Round(cpuValue, 2)) + "</td>\n");
                        }
                        else {
                            cpuInfoTable.Append("<td align=\"right\">" + string.Format("{0:#,##0.00}", Math.Round(cpuValue, 2)) + "</td>\n");
                        }
                    }
                    cpuInfoTable.Append("</tr>\n");
                    rowIndex++;
                }
                cpuInfoTable.Append("</table></div><br>");
            }

            return cpuInfoTable.ToString();
        }
        public Color GetCPUBusyAlertColor(string systemSerial, DateTime startDate, DateTime endDate, long interval)
        {
            //Force all datetime to be in US format.
            System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
            string dateFormat = "yyyy-MM-dd HH:mm:ss";
            var sysUnrated = new DailySysUnratedService(ConnectionStringSPAM);
            var reportDate = new List<DateTime>();

            if ((Convert.ToDateTime(endDate).Subtract(startDate)).Days >= 1) {
                DataSet dset = sysUnrated.GetDataDateFor(1, startDate, endDate, systemSerial);
                for (int i = 0; i < dset.Tables["Interval"].Rows.Count; i++) {
                    reportDate.Add(Convert.ToDateTime(dset.Tables["Interval"].Rows[i]["DataDate"].ToString()));
                }
            }
            else {
                reportDate.Add(Convert.ToDateTime(startDate));
            }

            //Get data from detail table.
            var databaseMapService = new DatabaseMappingService(ConnectionString);
            string newConnectionString = databaseMapService.GetConnectionStringFor(systemSerial);


            //Get TableNames.
            var databaseCheck = new Database(newConnectionString, "");
            var databaseName = Helper.FindKeyName(newConnectionString, "DATABASE");
            var cpuTrendTable = new CPUTrendTable(newConnectionString);
            var dataTable = cpuTrendTable.GetCPUBusyInterval(startDate.ToString(dateFormat), endDate.ToString(dateFormat));
			
            var cpuLists = dataTable.AsEnumerable().Select(x => x.Field<UInt64>("CPUNumber")).Distinct().ToList();

            var totalMaxValue = 0D;
            dataTable = dataTable.AsEnumerable().OrderBy(x => x.Field<DateTime>("Date & Time")).CopyToDataTable();
            var dataIntervals = dataTable.AsEnumerable().Select(x => x.Field<DateTime>("Date & Time")).Distinct().ToList();

            if (dataIntervals.Count > 0) {
                foreach (var cpuNum in cpuLists) {
                    var maxValue = dataTable.AsEnumerable().Where(x => x.Field<UInt64>("CPUNumber").Equals(cpuNum)).Max(x => x.Field<double>("Busy"));
                    if (maxValue > totalMaxValue)
                        totalMaxValue = maxValue;
                }
            }
            var color = Color.White;
            if (totalMaxValue > 79 && totalMaxValue < 90)
                color = Color.Yellow;
            else if (totalMaxValue >= 90)
                color = Color.Red;

            return color;
        }

        public DataTable GetCPUBusyAlertColor(string systemSerial, DateTime startDate, DateTime endDate, long interval, Dictionary<int, SystemWeekInfo> systemweekInfo,
                                        double businessTolerance, double batchTolerance, double otherTolerance, List<ForecastData> forecastData, bool alertException, DataTable cpuBusyGrid, StreamWriter writer, ref List<ExceptionView> exceptionList) {
            //Force all datetime to be in US format.
            System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
            string dateFormat = "yyyy-MM-dd HH:mm:ss"; 
            var sysUnrated = new DailySysUnratedService(ConnectionStringSPAM);
            var reportDate = new List<DateTime>();

            if ((Convert.ToDateTime(endDate).Subtract(startDate)).Days >= 1) {
                DataSet dset = sysUnrated.GetDataDateFor(1, startDate, endDate, systemSerial);
                for (int i = 0; i < dset.Tables["Interval"].Rows.Count; i++) {
                    reportDate.Add(Convert.ToDateTime(dset.Tables["Interval"].Rows[i]["DataDate"].ToString()));
                }
            }
            else {
                reportDate.Add(Convert.ToDateTime(startDate));
            }

            //Get data from detail table.
            var databaseMapService = new DatabaseMappingService(ConnectionString);
            string newConnectionString = databaseMapService.GetConnectionStringFor(systemSerial);


            //Get TableNames.
            var databaseCheck = new Database(newConnectionString, "");
            var databaseName = Helper.FindKeyName(newConnectionString, "DATABASE");
            var cpuTrendTable = new CPUTrendTable(newConnectionString);
            var dataTable = cpuTrendTable.GetCPUBusyInterval(startDate.ToString(dateFormat), endDate.ToString(dateFormat));
            var cpuLists = dataTable.AsEnumerable().Select(x => x.Field<UInt64>("CPUNumber")).Distinct().ToList();

            var totalMaxValue = 0D;
            dataTable = dataTable.AsEnumerable().OrderBy(x => x.Field<DateTime>("Date & Time")).CopyToDataTable();
            var dataIntervals = dataTable.AsEnumerable().Select(x => x.Field<DateTime>("Date & Time")).Distinct().ToList();

            var alertExceptionColor = Color.White;
            int yellowForecastCount = 0;
            int redForecastCount = 0;

            if (dataIntervals.Count > 0) {
                DataRow yellowCountRow = cpuBusyGrid.NewRow();
                DataRow redCountRow = cpuBusyGrid.NewRow();
                int yellowGridCount = 0, redGridCount = 0, prevHour = -1; double cpuBusy = 0;
                yellowCountRow["Entity"] = "CPU"; yellowCountRow["Counter"] = "Busy";
                redCountRow["Entity"] = "CPU"; redCountRow["Counter"] = "Busy";
                bool applyForecastCount = false;
                var systemWeekExceptionService = new SystemWeekExceptionService(ConnectionString);

                foreach (var dataInterval in dataIntervals) {
                    foreach (var cpuNum in cpuLists) {
                        cpuBusy = dataTable.AsEnumerable().Where(x => x.Field<UInt64>("CPUNumber").Equals(cpuNum) && x.Field<DateTime>("Date & Time").Equals(dataInterval)).Select(x => x.Field<double>("Busy")).FirstOrDefault();
                        if (forecastData.Count > 0) {
                            var isForecastData = forecastData.Any(
                                x => x.ForecastDateTime.Equals(dataInterval) 
                                && (Convert.ToInt16(x.CpuNumber) == Convert.ToInt16(cpuNum)));
                            if (alertException && isForecastData) {
                                applyForecastCount = true;
                                //var toleranceValue = GetSystemWeekInfoHourData(dataInterval.Hour, systemweekInfo[(int)dataInterval.DayOfWeek], businessTolerance, batchTolerance, otherTolerance);
                                var thresholdTypeId = GetThresholdTypeId(dataInterval.Hour, systemweekInfo[(int)dataInterval.DayOfWeek]);
                                var systemWeekThresholds = new SystemWeekThresholds(ConnectionString);
                                var threadholds = systemWeekThresholds.GetCpuBusy(systemSerial, thresholdTypeId);

                                var forecastDataSub = forecastData.Where(x => x.ForecastDateTime.Equals(dataInterval) && 
                                (Convert.ToInt16(x.CpuNumber) == Convert.ToInt16(cpuNum))).Select(x => x.CpuBusy).FirstOrDefault();
                                var stdDev = forecastData.Where(x => x.ForecastDateTime.Equals(dataInterval) && 
                                (Convert.ToInt16(x.CpuNumber) == Convert.ToInt16(cpuNum))).Select(x => x.StdDevCpuBusy).FirstOrDefault();

                                /*//Check if we have IsChanged on SystemWeekException for this daysofweek and hour.
                                var hour = dataInterval.Hour.ToString("D2");
                                var daysOfWeek = (int)dataInterval.DayOfWeek;
                                var isChanged = systemWeekExceptionService.GetIsChangedValueFor(systemSerial, 1, 1, daysOfWeek, hour);

                                if (isChanged.Count > 0 && isChanged.FirstOrDefault().Key) {
                                    forecastDataSub = isChanged.FirstOrDefault().Value;
                                }*/

                                var defaultValueMajor = GetThreasholdDefaultValue(thresholdTypeId, "CPUBusyMajor");
                                var exceptionMajor = defaultValueMajor;
                                if (threadholds.Rows.Count > 0)
                                    exceptionMajor = threadholds.Rows[0].IsNull("CPUBusyMajor") ? defaultValueMajor : Convert.ToDouble(threadholds.Rows[0]["CPUBusyMajor"]);

                                var upperRange = forecastDataSub + exceptionMajor + stdDev;
                                var lowerRange = Math.Abs(forecastDataSub - (exceptionMajor + stdDev));
                                
                                if (dataInterval.Hour != prevHour) {
                                    if (prevHour != -1) {
                                        string hourHeader = prevHour < 10 ? "0" + prevHour : "" + prevHour;
                                        yellowCountRow[hourHeader] = yellowForecastCount;
                                        redCountRow[hourHeader] = redForecastCount;
                                    }
                                    yellowForecastCount = 0;
                                    redForecastCount = 0;
                                    prevHour = dataInterval.Hour;
                                }

                                if (cpuBusy > upperRange) {
                                    redForecastCount++;
                                    alertExceptionColor = Color.Red;
                                    exceptionList.Add(new ExceptionView {
                                        FromTimestamp = dataInterval,
                                        Instance = cpuNum.ToString("D2"),
                                        EntityId = "CPU",
                                        CounterId = "Busy",
                                        Actual = cpuBusy,
                                        Upper = upperRange,
                                        Lower = lowerRange,
                                        DisplayRed = true,
                                        IsException = true
                                    });
                                }
                                else {
                                    //Check half of toleranceValue.
                                    var defaultValueMinor = GetThreasholdDefaultValue(thresholdTypeId, "CPUBusyMinor");
                                    var exceptionMinor = defaultValueMinor;
                                    if (threadholds.Rows.Count > 0)
                                        exceptionMinor = threadholds.Rows[0].IsNull("CPUBusyMinor") ? defaultValueMinor : Convert.ToDouble(threadholds.Rows[0]["CPUBusyMinor"]);

                                    var upperRangeSub = forecastDataSub + exceptionMinor + stdDev;
                                    var lowerRangeSub = Math.Abs(forecastDataSub - (exceptionMinor + stdDev));
                                    
                                    if (cpuBusy > upperRangeSub) {
                                        yellowForecastCount++;
                                        if (alertExceptionColor != Color.Red) {
                                            alertExceptionColor = Color.Yellow;
                                        }
                                        exceptionList.Add(new ExceptionView {
                                            FromTimestamp = dataInterval,
                                            Instance = cpuNum.ToString("D2"),
                                            EntityId = "CPU",
                                            CounterId = "Busy",
                                            Actual = cpuBusy,
                                            Upper = upperRangeSub,
                                            Lower = lowerRangeSub,
                                            DisplayRed = false,
                                            IsException = true
                                        });
                                    }
                                    else {
                                        //Normal values.
                                        exceptionList.Add(new ExceptionView {
                                            FromTimestamp = dataInterval,
                                            Instance = cpuNum.ToString("D2"),
                                            EntityId = "CPU",
                                            CounterId = "Busy",
                                            Actual = cpuBusy,
                                            Upper = upperRangeSub,
                                            Lower = lowerRangeSub,
                                            DisplayRed = false,
                                            IsException = false
                                        });
                                    }
                                }
                            }
                            else {
                                if (cpuBusy > totalMaxValue)
                                    totalMaxValue = cpuBusy;
                                //Grid code - after loop through all CPUs for that interval - regular count
                                if (dataInterval.Hour != prevHour) {
                                    if (prevHour != -1) {
                                        string hourHeader = prevHour < 10 ? "0" + prevHour : "" + prevHour;
                                        yellowCountRow[hourHeader] = yellowGridCount;
                                        redCountRow[hourHeader] = redGridCount;
                                    }
                                    yellowGridCount = 0;
                                    redGridCount = 0;
                                    prevHour = dataInterval.Hour;
                                }
                                if (cpuBusy > 79 && cpuBusy < 90) {
                                    yellowGridCount++;
                                }
                                else if (cpuBusy >= 90) {
                                    redGridCount++;
                                }
                            }
                        }
                        else {
                            if (cpuBusy > totalMaxValue)
                                totalMaxValue = cpuBusy;
                        }
                    }
                }
                try {
                    //Set the last hour
                    if (prevHour != -1)
                    {
                        string lHourHeader = prevHour < 10 ? "0" + prevHour : "" + prevHour;
                        yellowCountRow[lHourHeader] = applyForecastCount ? yellowForecastCount : yellowGridCount;
                        redCountRow[lHourHeader] = applyForecastCount ? redForecastCount : redGridCount;
                    }
                    cpuBusyGrid.Rows.Add(yellowCountRow);
                    cpuBusyGrid.Rows.Add(redCountRow);
                }
                catch (Exception ex) {
					writer.WriteLine("************ [JobProcessorChart] GetCPUBusyAlertColor Error ************");
					writer.WriteLine(ex.Message);
					writer.Flush();
				}
            }

            return cpuBusyGrid;
        }

        public DataTable GetIPUBusyAlertColor(string systemSerial, DateTime startDate, DateTime endDate, long interval, Dictionary<int, SystemWeekInfo> systemweekInfo,
                                        double businessTolerance, double batchTolerance, double otherTolerance, List<ForecastData> forecastData, bool alertException, DataTable ipuBusyGrid, StreamWriter writer, ref List<ExceptionView> exceptionList) {
            //Force all datetime to be in US format.
            System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
            string dateFormat = "yyyy-MM-dd HH:mm:ss";
            var sysUnrated = new DailySysUnratedService(ConnectionStringSPAM);
            var reportDate = new List<DateTime>();

            if ((Convert.ToDateTime(endDate).Subtract(startDate)).Days >= 1) {
                DataSet dset = sysUnrated.GetDataDateFor(1, startDate, endDate, systemSerial);
                for (int i = 0; i < dset.Tables["Interval"].Rows.Count; i++) {
                    reportDate.Add(Convert.ToDateTime(dset.Tables["Interval"].Rows[i]["DataDate"].ToString()));
                }
            }
            else {
                reportDate.Add(Convert.ToDateTime(startDate));
            }

            //Get data from detail table.
            var databaseMapService = new DatabaseMappingService(ConnectionString);
            string newConnectionString = databaseMapService.GetConnectionStringFor(systemSerial);


            //Get TableNames.
            var databaseCheck = new Database(newConnectionString, "");
            var databaseName = Helper.FindKeyName(newConnectionString, "DATABASE");
            var cpuTrendTable = new CPUTrendTable(newConnectionString);
            var dataTable = cpuTrendTable.GetIPUBusyInterval(startDate.ToString(dateFormat), endDate.ToString(dateFormat));

            //var exceptionList = new List<ExceptionView>();
            var alertExceptionColor = Color.White;
            int yellowForecastCount = 0;
            int redForecastCount = 0;
            //var ipuBusyGridCpy = ipuBusyGridStructure.Clone();
            if (dataTable.Rows.Count > 0) {
                DataRow yellowCountRow = ipuBusyGrid.NewRow();
                DataRow redCountRow = ipuBusyGrid.NewRow();
                int yellowGridCount = 0, redGridCount = 0, prevHour = -1; 
                double ipuBusy = 0;
                yellowCountRow["Entity"] = "IPU"; yellowCountRow["Counter"] = "Busy";
                redCountRow["Entity"] = "IPU"; redCountRow["Counter"] = "Busy";
                bool applyForecastCount = false;
                var systemWeekExceptionService = new SystemWeekExceptionService(ConnectionString);
                var totalMaxValue = 0d;

                foreach (DataRow row in dataTable.Rows) {
                    ipuBusy = Convert.ToDouble(row["Busy"]);
                    if (forecastData.Count > 0) {
                        var cpuNum = Convert.ToInt32(row["CPUNumber"]);
                        var ipuNum = Convert.ToInt32(row["IPUNumber"]);
                        DateTime dateInterval = Convert.ToDateTime(row["Date & Time"]);
                        var isForecastData = forecastData.Any(x => x.ForecastDateTime.Equals(dateInterval) &&
                                                                    (Convert.ToInt16(x.CpuNumber) == Convert.ToInt16(cpuNum)) &&
                                                                    (Convert.ToInt16(x.IpuNumber) == Convert.ToInt16(ipuNum)));
                        if (dateInterval.Hour == 23) {
                            string stop = "";
                        }
                        if (alertException && isForecastData) {
                            applyForecastCount = true;
                            //var toleranceValue = GetSystemWeekInfoHourData(dataInterval.Hour, systemweekInfo[(int)dataInterval.DayOfWeek], businessTolerance, batchTolerance, otherTolerance);
                            var thresholdTypeId = GetThresholdTypeId(dateInterval.Hour, systemweekInfo[(int)dateInterval.DayOfWeek]);
                            var forecastDataSub = forecastData.Where(x => x.ForecastDateTime.Equals(dateInterval) &&
                                                                            (Convert.ToInt16(x.CpuNumber) == Convert.ToInt16(cpuNum)) &&
                                                                            (Convert.ToInt16(x.IpuNumber) == Convert.ToInt16(ipuNum))).Select(x => x.IpuBusy).FirstOrDefault();
                            var stdDev = forecastData.Where(x => x.ForecastDateTime.Equals(dateInterval) &&
                                                                        (Convert.ToInt16(x.CpuNumber) == Convert.ToInt16(cpuNum)) &&
                                                                        (Convert.ToInt16(x.IpuNumber) == Convert.ToInt16(ipuNum))).Select(x => x.StdDevIpuBusy).FirstOrDefault();
                            var systemWeekThresholds = new SystemWeekThresholds(ConnectionString);
                            var threadholds = systemWeekThresholds.GetIpuBusy(systemSerial, thresholdTypeId);

                            var defaultValueMajor = GetThreasholdDefaultValue(thresholdTypeId, "IPUBusyMajor");

                            var exceptionMajor = defaultValueMajor;
                            if (threadholds.Rows.Count > 0)
                                exceptionMajor = threadholds.Rows[0].IsNull("IPUBusyMajor") ? defaultValueMajor : Convert.ToDouble(threadholds.Rows[0]["IPUBusyMajor"]);

                            var upperRange = forecastDataSub + exceptionMajor + stdDev;
                            var lowerRange = Math.Abs(forecastDataSub - (exceptionMajor + stdDev));
                            
                            if (dateInterval.Hour != prevHour) {
                                if (prevHour != -1) {
                                    string hourHeader = prevHour < 10 ? "0" + prevHour : "" + prevHour;
                                    yellowCountRow[hourHeader] = yellowForecastCount;
                                    redCountRow[hourHeader] = redForecastCount;
                                }
                                yellowForecastCount = 0;
                                redForecastCount = 0;
                                prevHour = dateInterval.Hour;
                            }

                            if (ipuBusy > upperRange) {
                                redForecastCount++;
                                alertExceptionColor = Color.Red;

                                exceptionList.Add(new ExceptionView {
                                    FromTimestamp = dateInterval,
                                    Instance = cpuNum.ToString("D2") + ":" + ipuNum.ToString("D2"),
                                    EntityId = "IPU",
                                    CounterId = "Busy",
                                    Actual = ipuBusy,
                                    Upper = upperRange,
                                    Lower = lowerRange,
                                    DisplayRed = true,
                                    IsException = true
                                });
                            }
                            else {
                                //Check half of toleranceValue.
                                var defaultValueMinor = GetThreasholdDefaultValue(thresholdTypeId, "IPUBusyMinor");
                                var exceptionMinor = defaultValueMinor;
                                if (threadholds.Rows.Count > 0)
                                    exceptionMinor = threadholds.Rows[0].IsNull("IPUBusyMinor") ? defaultValueMinor : Convert.ToDouble(threadholds.Rows[0]["IPUBusyMinor"]);

                                var upperRangeSub = forecastDataSub + exceptionMinor + stdDev;
                                var lowerRangeSub = Math.Abs(forecastDataSub - (exceptionMinor + stdDev));

                                if (ipuBusy > upperRangeSub) {
                                    yellowForecastCount++;
                                    if (alertExceptionColor != Color.Red) {
                                        alertExceptionColor = Color.Yellow;
                                    }
                                    exceptionList.Add(new ExceptionView {
                                        FromTimestamp = dateInterval,
                                        Instance = cpuNum.ToString("D2") + ":" + ipuNum.ToString("D2"),
                                        EntityId = "IPU",
                                        CounterId = "Busy",
                                        Actual = ipuBusy,
                                        Upper = upperRangeSub,
                                        Lower = lowerRangeSub,
                                        DisplayRed = false,
                                        IsException = true
                                    });
                                }
                                else {
                                    exceptionList.Add(new ExceptionView {
                                        FromTimestamp = dateInterval,
                                        Instance = cpuNum.ToString("D2") + ":" + ipuNum.ToString("D2"),
                                        EntityId = "IPU",
                                        CounterId = "Busy",
                                        Actual = ipuBusy,
                                        Upper = upperRangeSub,
                                        Lower = lowerRangeSub,
                                        DisplayRed = false,
                                        IsException = false
                                    });
                                }
                            }

                        }
                        else {
                            if (ipuBusy > totalMaxValue)
                                totalMaxValue = ipuBusy;
                            //Grid code - after loop through all CPUs for that interval
                            if (dateInterval.Hour != prevHour) {
                                if (prevHour != -1) {
                                    string hourHeader = prevHour < 10 ? "0" + prevHour : "" + prevHour;
                                    yellowCountRow[hourHeader] = yellowGridCount;
                                    redCountRow[hourHeader] = redGridCount;
                                }
                                yellowGridCount = 0;
                                redGridCount = 0;
                                prevHour = dateInterval.Hour;
                            }
                            if (ipuBusy > 79 && ipuBusy < 90) {
                                yellowGridCount++;
                            }
                            else if (ipuBusy >= 90) {
                                redGridCount++;
                            }
                        }
                    }
                    else {
                        if (ipuBusy > totalMaxValue)
                            totalMaxValue = ipuBusy;
                    }
                }
                try {
                    //Set the last hour
                    if (prevHour != -1)
                    {
                        string lHourHeader = prevHour < 10 ? "0" + prevHour : "" + prevHour;
                        yellowCountRow[lHourHeader] = applyForecastCount ? yellowForecastCount : yellowGridCount;
                        redCountRow[lHourHeader] = applyForecastCount ? redForecastCount : redGridCount;
                    }
                    ipuBusyGrid.Rows.Add(yellowCountRow);
                    ipuBusyGrid.Rows.Add(redCountRow);
                }
                catch (Exception ex) {
					writer.WriteLine("************ [JobProcessorChart] GetIPUBusyAlertColor Error ************");
					writer.WriteLine(ex.Message);
					writer.Flush();
				}
            }
            return ipuBusyGrid;
        }


        private double GetSystemWeekInfoHourData(int hour, SystemWeekInfo systemWeekInfo, double businessTolerance, double batchTolerance, double otherTolerance) {
            var toleranceValue = 0d;
            var tolerance = 0;

            switch (hour) {
                case 0: tolerance = systemWeekInfo.Hour00; break;
                case 1: tolerance = systemWeekInfo.Hour01; break;
                case 2: tolerance = systemWeekInfo.Hour02; break;
                case 3: tolerance = systemWeekInfo.Hour03; break;
                case 4: tolerance = systemWeekInfo.Hour04; break;
                case 5: tolerance = systemWeekInfo.Hour05; break;
                case 6: tolerance = systemWeekInfo.Hour06; break;
                case 7: tolerance = systemWeekInfo.Hour07; break;
                case 8: tolerance = systemWeekInfo.Hour08; break;
                case 9: tolerance = systemWeekInfo.Hour09; break;
                case 10: tolerance = systemWeekInfo.Hour10; break;
                case 11: tolerance = systemWeekInfo.Hour11; break;
                case 12: tolerance = systemWeekInfo.Hour12; break;
                case 13: tolerance = systemWeekInfo.Hour13; break;
                case 14: tolerance = systemWeekInfo.Hour14; break;
                case 15: tolerance = systemWeekInfo.Hour15; break;
                case 16: tolerance = systemWeekInfo.Hour16; break;
                case 17: tolerance = systemWeekInfo.Hour17; break;
                case 18: tolerance = systemWeekInfo.Hour18; break;
                case 19: tolerance = systemWeekInfo.Hour19; break;
                case 20: tolerance = systemWeekInfo.Hour20; break;
                case 21: tolerance = systemWeekInfo.Hour21; break;
                case 22: tolerance = systemWeekInfo.Hour22; break;
                case 23: tolerance = systemWeekInfo.Hour23; break;
            }
            if (tolerance == 0)
                toleranceValue = otherTolerance;
            else if (tolerance == 1)
                toleranceValue = businessTolerance;
            else
                toleranceValue = batchTolerance;

            return toleranceValue;
        }

        private double GetThreasholdDefaultValue(int threasholdTypeId, string entityType) {
            var defaultValue = 0d;

            switch (entityType) {
                case "CPUBusyMinor":
                    if (threasholdTypeId == 1) defaultValue = 10;
                    else if (threasholdTypeId == 2) defaultValue = 13;
                    else if (threasholdTypeId == 3) defaultValue = 15;
                    break;
                case "CPUBusyMajor":
                    if (threasholdTypeId == 1) defaultValue = 20;
                    else if (threasholdTypeId == 2) defaultValue = 23;
                    else if (threasholdTypeId == 3) defaultValue = 25;
                    break;
                case "CPUQueueLengthMinor":
                    if (threasholdTypeId == 1) defaultValue = 5;
                    else if (threasholdTypeId == 2) defaultValue = 8;
                    else if (threasholdTypeId == 3) defaultValue = 13;
                    break;
                case "CPUQueueLengthMajor":
                    if (threasholdTypeId == 1) defaultValue = 10;
                    else if (threasholdTypeId == 2) defaultValue = 13;
                    else if (threasholdTypeId == 3) defaultValue = 15;
                    break;
                case "IPUBusyMinor":
                    if (threasholdTypeId == 1) defaultValue = 20;
                    else if (threasholdTypeId == 2) defaultValue = 23;
                    else if (threasholdTypeId == 3) defaultValue = 25;
                    break;
                case "IPUBusyMajor":
                    if (threasholdTypeId == 1) defaultValue = 40;
                    else if (threasholdTypeId == 2) defaultValue = 43;
                    else if (threasholdTypeId == 3) defaultValue = 45;
                    break;
                case "IPUQueueLengthMinor":
                    if (threasholdTypeId == 1) defaultValue = 5;
                    else if (threasholdTypeId == 2) defaultValue = 8;
                    else if (threasholdTypeId == 3) defaultValue = 13;
                    break;
                case "IPUQueueLengthMajor":
                    if (threasholdTypeId == 1) defaultValue = 10;
                    else if (threasholdTypeId == 2) defaultValue = 13;
                    else if (threasholdTypeId == 3) defaultValue = 15;
                    break;
                case "DiskQueueLengthMinor":
                    if (threasholdTypeId == 1) defaultValue = 5;
                    else if (threasholdTypeId == 2) defaultValue = 8;
                    else if (threasholdTypeId == 3) defaultValue = 13;
                    break;
                case "DiskQueueLengthMajor":
                    if (threasholdTypeId == 1) defaultValue = 10;
                    else if (threasholdTypeId == 2) defaultValue = 13;
                    else if (threasholdTypeId == 3) defaultValue = 15;
                    break;
                case "DiskDP2Minor":
                    if (threasholdTypeId == 1) defaultValue = 20;
                    else if (threasholdTypeId == 2) defaultValue = 23;
                    else if (threasholdTypeId == 3) defaultValue = 25;
                    break;
                case "DiskDP2Major":
                    if (threasholdTypeId == 1) defaultValue = 30;
                    else if (threasholdTypeId == 2) defaultValue = 33;
                    else if (threasholdTypeId == 3) defaultValue = 35;
                    break;
                case "StorageMinor":
                    if (threasholdTypeId == 1) defaultValue = 10;
                    else if (threasholdTypeId == 2) defaultValue = 10;
                    else if (threasholdTypeId == 3) defaultValue = 10;
                    break;
                case "StorageMajor":
                    if (threasholdTypeId == 1) defaultValue = 20;
                    else if (threasholdTypeId == 2) defaultValue = 20;
                    else if (threasholdTypeId == 3) defaultValue = 20;
                    break;
            }

            return defaultValue;
        }
        private int GetThresholdTypeId(int hour, SystemWeekInfo systemWeekInfo) {
            var thresholdTypeId = 0;
            var tolerance = 0;

            switch (hour) {
                case 0: tolerance = systemWeekInfo.Hour00; break;
                case 1: tolerance = systemWeekInfo.Hour01; break;
                case 2: tolerance = systemWeekInfo.Hour02; break;
                case 3: tolerance = systemWeekInfo.Hour03; break;
                case 4: tolerance = systemWeekInfo.Hour04; break;
                case 5: tolerance = systemWeekInfo.Hour05; break;
                case 6: tolerance = systemWeekInfo.Hour06; break;
                case 7: tolerance = systemWeekInfo.Hour07; break;
                case 8: tolerance = systemWeekInfo.Hour08; break;
                case 9: tolerance = systemWeekInfo.Hour09; break;
                case 10: tolerance = systemWeekInfo.Hour10; break;
                case 11: tolerance = systemWeekInfo.Hour11; break;
                case 12: tolerance = systemWeekInfo.Hour12; break;
                case 13: tolerance = systemWeekInfo.Hour13; break;
                case 14: tolerance = systemWeekInfo.Hour14; break;
                case 15: tolerance = systemWeekInfo.Hour15; break;
                case 16: tolerance = systemWeekInfo.Hour16; break;
                case 17: tolerance = systemWeekInfo.Hour17; break;
                case 18: tolerance = systemWeekInfo.Hour18; break;
                case 19: tolerance = systemWeekInfo.Hour19; break;
                case 20: tolerance = systemWeekInfo.Hour20; break;
                case 21: tolerance = systemWeekInfo.Hour21; break;
                case 22: tolerance = systemWeekInfo.Hour22; break;
                case 23: tolerance = systemWeekInfo.Hour23; break;
            }

            //1: Business, 2: Batch, 3: Other
            if (tolerance == 0) thresholdTypeId = 3;
            else if (tolerance == 1) thresholdTypeId = 1;
            else thresholdTypeId = 2;

            return thresholdTypeId;
        }

        public string GenerateCPUQueueTable(string systemSerial, DateTime startDate, DateTime endDate, long interval) {
            //Force all datetime to be in US format.
            System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
            string dateFormat = "yyyy-MM-dd HH:mm:ss"; 
            var cpuInfoTable = new StringBuilder();

            var sysUnrated = new DailySysUnratedService(ConnectionStringSPAM);
            var reportDate = new List<DateTime>();

            if ((Convert.ToDateTime(endDate).Subtract(startDate)).Days >= 1) {
                DataSet dset = sysUnrated.GetDataDateFor(1, startDate, endDate, systemSerial);
                for (int i = 0; i < dset.Tables["Interval"].Rows.Count; i++) {
                    reportDate.Add(Convert.ToDateTime(dset.Tables["Interval"].Rows[i]["DataDate"].ToString()));
                }
            }
            else {
                reportDate.Add(Convert.ToDateTime(startDate));
            }

            //Get data from detail table.
            var databaseMapService = new DatabaseMappingService(ConnectionString);
            string newConnectionString = databaseMapService.GetConnectionStringFor(systemSerial);


            //Get TableNames.
            var databaseCheck = new Database(newConnectionString, "");
            var databaseName = Helper.FindKeyName(newConnectionString, "DATABASE");
            var cpuTrendTable = new CPUTrendTable(newConnectionString);
            var dataTable = cpuTrendTable.GetCPUQueueInterval(startDate.ToString(dateFormat), endDate.ToString(dateFormat));
            var cpuLists = dataTable.AsEnumerable().Select(x => x.Field<UInt64>("CPUNumber")).Distinct().ToList();

            //loop through each date and check if we not missing any data.
            for (var start = startDate; start < endDate; start = start.AddSeconds(interval)) {
                foreach (var cpuNum in cpuLists) {
                    if (!dataTable.AsEnumerable().Any(x => x.Field<DateTime>("Date & Time").Equals(start) && x.Field<UInt64>("CPUNumber").Equals(cpuNum))) {
                        DataRow newRow = dataTable.NewRow();
                        newRow["Date & Time"] = start;
                        newRow["Queue"] = 0;
                        newRow["CPUNumber"] = cpuNum;

                        dataTable.Rows.Add(newRow);
                    }
                }
            }

            dataTable = dataTable.AsEnumerable().OrderBy(x => x.Field<DateTime>("Date & Time")).CopyToDataTable();
            var dataIntervals = dataTable.AsEnumerable().Select(x => x.Field<DateTime>("Date & Time")).Distinct().ToList();

            if (dataIntervals.Count > 0) {
                cpuInfoTable.Append("<div><table class=main CellPadding=2 CellSpacing=0 Border=1 style='FONT-SIZE: 7pt; FONT-FAMILY: Calibri;  padding-left:25px;'> ");
                cpuInfoTable.Append("<tr style=\"background-color:LightGrey;border-color:Black;border-width:1px;border-style:solid;\">\n");
                cpuInfoTable.Append("<th align=\"center\" scope=\"col\" style=\"text-decoration:underline;white-space:nowrap;\">Date & Time</th>");
                foreach (var cpuNum in cpuLists) {
                    //Get the max cpu value for each CPU and change the back-ground color if the value is over 80.
                    var maxValue = dataTable.AsEnumerable().Where(x => x.Field<UInt64>("CPUNumber").Equals(cpuNum)).Max(x => x.Field<double>("Queue"));

                    if (maxValue >= 5 && maxValue < 10)
                        cpuInfoTable.Append("<th align=\"center\" scope=\"col\" style=\"text-decoration:underline;white-space:nowrap;background-color: yellow;\"><a href='#cpuqueue" + cpuNum.ToString("D2") + "'>" + cpuNum.ToString("D2") + "</a></th>");
                    else if (maxValue >= 10)
                        cpuInfoTable.Append("<th align=\"center\" scope=\"col\" style=\"text-decoration:underline;white-space:nowrap;background-color: red;\"><a href='#cpuqueue" + cpuNum.ToString("D2") + "'>" + cpuNum.ToString("D2") + "</a></th>");
                    else
                        cpuInfoTable.Append("<th align=\"center\" scope=\"col\" style=\"text-decoration:underline;white-space:nowrap;\">" + cpuNum.ToString("D2") + "</th>");
                }
                cpuInfoTable.Append("</tr>\n");

                var rowIndex = 0;
                foreach (var dataInterval in dataIntervals) {
                    if (rowIndex % 2 == 0)
                        cpuInfoTable.Append("<tr>\n");
                    else
                        cpuInfoTable.Append("<tr style='background-color: #E6E6E6;'>\n");

                    cpuInfoTable.Append("<td align=\"left\" >" + dataInterval.ToString("MMM dd HH:mm") + "</td>\n");
                    foreach (var cpuNum in cpuLists) {
                        var cpuValue = dataTable.AsEnumerable().Where(x => x.Field<DateTime>("Date & Time").Equals(dataInterval))
                                                            .Where(x => x.Field<UInt64>("CPUNumber").Equals(cpuNum))
                                                            .Select(x => x.Field<double>("Queue")).First();
                        if (cpuValue >= 5 && cpuValue < 10)
                            cpuInfoTable.Append("<td align=\"right\" style='background-color: yellow;'><a name='cpuqueue" + cpuNum.ToString("D2") + "'></a>" + string.Format("{0:#,##0.00}", Math.Round(cpuValue, 2)) + "</td>\n");
                        else if (cpuValue >= 10)
                            cpuInfoTable.Append("<td align=\"right\" style='background-color: red;'><a name='cpuqueue" + cpuNum.ToString("D2") + "'></a>" + string.Format("{0:#,##0.00}", Math.Round(cpuValue, 2)) + "</td>\n");
                        else
                            cpuInfoTable.Append("<td align=\"right\">" + string.Format("{0:#,##0.00}", Math.Round(cpuValue, 2)) + "</td>\n");
                    }
                    cpuInfoTable.Append("</tr>\n");
                    rowIndex++;
                }
                cpuInfoTable.Append("</table></div><br>");
            }

            return cpuInfoTable.ToString();
        }

        public Color GetCPUQueueAlertColor(string systemSerial, DateTime startDate, DateTime endDate, long interval)
        {
            //Force all datetime to be in US format.
            System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
            string dateFormat = "yyyy-MM-dd HH:mm:ss";
            var sysUnrated = new DailySysUnratedService(ConnectionStringSPAM);
            var reportDate = new List<DateTime>();

            if ((Convert.ToDateTime(endDate).Subtract(startDate)).Days >= 1) {
                DataSet dset = sysUnrated.GetDataDateFor(1, startDate, endDate, systemSerial);
                for (int i = 0; i < dset.Tables["Interval"].Rows.Count; i++) {
                    reportDate.Add(Convert.ToDateTime(dset.Tables["Interval"].Rows[i]["DataDate"].ToString()));
                }
            }
            else {
                reportDate.Add(Convert.ToDateTime(startDate));
            }

            //Get data from detail table.
            var databaseMapService = new DatabaseMappingService(ConnectionString);
            string newConnectionString = databaseMapService.GetConnectionStringFor(systemSerial);


            //Get TableNames.
            var databaseCheck = new Database(newConnectionString, "");
            var databaseName = Helper.FindKeyName(newConnectionString, "DATABASE");
            var cpuTrendTable = new CPUTrendTable(newConnectionString);
            var dataTable = cpuTrendTable.GetCPUQueueInterval(startDate.ToString(dateFormat), endDate.ToString(dateFormat));
            var cpuLists = dataTable.AsEnumerable().Select(x => x.Field<UInt64>("CPUNumber")).Distinct().ToList();

            dataTable = dataTable.AsEnumerable().OrderBy(x => x.Field<DateTime>("Date & Time")).CopyToDataTable();
            var dataIntervals = dataTable.AsEnumerable().Select(x => x.Field<DateTime>("Date & Time")).Distinct().ToList();

            var totalMaxValue = 0D;
            if (dataIntervals.Count > 0) {
                foreach (var cpuNum in cpuLists) {
                    var maxValue = dataTable.AsEnumerable().Where(x => x.Field<UInt64>("CPUNumber").Equals(cpuNum)).Max(x => x.Field<double>("Queue"));
                    if (maxValue > totalMaxValue)
                        totalMaxValue = maxValue;
                }
            }

            var color = Color.White;

            if (totalMaxValue >= 5 && totalMaxValue < 10)
                color = Color.Yellow;
            else if (totalMaxValue >= 10)
                color = Color.Red;

            return color;
        }

        public DataTable GetCPUQueueAlertColor(string systemSerial, DateTime startDate, DateTime endDate, long interval, Dictionary<int, SystemWeekInfo> systemweekInfo,
                                        double businessTolerance, double batchTolerance, double otherTolerance, List<ForecastData> forecastData, bool alertException, DataTable cpuQueueGrid, StreamWriter writer, ref List<ExceptionView> exceptionList) {
            //Force all datetime to be in US format.
            System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
            string dateFormat = "yyyy-MM-dd HH:mm:ss"; var sysUnrated = new DailySysUnratedService(ConnectionStringSPAM);
            var reportDate = new List<DateTime>();

            if ((Convert.ToDateTime(endDate).Subtract(startDate)).Days >= 1) {
                DataSet dset = sysUnrated.GetDataDateFor(1, startDate, endDate, systemSerial);
                for (int i = 0; i < dset.Tables["Interval"].Rows.Count; i++) {
                    reportDate.Add(Convert.ToDateTime(dset.Tables["Interval"].Rows[i]["DataDate"].ToString()));
                }
            }
            else {
                reportDate.Add(Convert.ToDateTime(startDate));
            }

            //Get data from detail table.
            var databaseMapService = new DatabaseMappingService(ConnectionString);
            string newConnectionString = databaseMapService.GetConnectionStringFor(systemSerial);


            //Get TableNames.
            var databaseCheck = new Database(newConnectionString, "");
            var databaseName = Helper.FindKeyName(newConnectionString, "DATABASE");
            var cpuTrendTable = new CPUTrendTable(newConnectionString);
            var dataTable = cpuTrendTable.GetCPUQueueInterval(startDate.ToString(dateFormat), endDate.ToString(dateFormat));
            var cpuLists = dataTable.AsEnumerable().Select(x => x.Field<UInt64>("CPUNumber")).Distinct().ToList();

            dataTable = dataTable.AsEnumerable().OrderBy(x => x.Field<DateTime>("Date & Time")).CopyToDataTable();
            var dataIntervals = dataTable.AsEnumerable().Select(x => x.Field<DateTime>("Date & Time")).Distinct().ToList();
            //var exceptionList = new List<ExceptionView>();

            var totalMaxValue = 0D;
            var alertExceptionColor = Color.White;
            int yellowForecastCount = 0;
            int redForecastCount = 0;
            //var cpuQueueGridCpy = cpuQueueGridStructure.Clone();
            if (dataIntervals.Count > 0) {
                DataRow yellowCountRow = cpuQueueGrid.NewRow();
                DataRow redCountRow = cpuQueueGrid.NewRow();
                int yellowGridCount = 0, redGridCount = 0, prevHour = -1; double cpuQueue = 0;
                yellowCountRow["Entity"] = "CPU"; yellowCountRow["Counter"] = "Queue";
                redCountRow["Entity"] = "CPU"; redCountRow["Counter"] = "Queue";
                bool applyForecastCount = false;
                var systemWeekExceptionService = new SystemWeekExceptionService(ConnectionString);

                foreach (var dataInterval in dataIntervals) {
                    foreach (var cpuNum in cpuLists) {
                        cpuQueue = dataTable.AsEnumerable().Where(x => x.Field<UInt64>("CPUNumber").Equals(cpuNum) && x.Field<DateTime>("Date & Time").Equals(dataInterval)).Select(x => x.Field<double>("Queue")).FirstOrDefault();
                        if (forecastData.Count > 0) {
                            var isForecastData = forecastData.Any(x => x.ForecastDateTime.Equals(dataInterval) && 
                            (Convert.ToInt16(x.CpuNumber) == Convert.ToInt16(cpuNum)));
                            if (alertException && isForecastData) {
                                applyForecastCount = true;
                                //var toleranceValue = GetSystemWeekInfoHourData(dataInterval.Hour, systemweekInfo[(int)dataInterval.DayOfWeek], businessTolerance, batchTolerance, otherTolerance);
                                var thresholdTypeId = GetThresholdTypeId(dataInterval.Hour, systemweekInfo[(int)dataInterval.DayOfWeek]);
                                var systemWeekThresholds = new SystemWeekThresholds(ConnectionString);
                                var threadholds = systemWeekThresholds.GetCpuQueueLength(systemSerial, thresholdTypeId);

                                var forecastDataSub = forecastData.Where(x => x.ForecastDateTime.Equals(dataInterval) &&
                                (Convert.ToInt16(x.CpuNumber) == Convert.ToInt16(cpuNum))).Select(x => x.Queue).FirstOrDefault();
                                var stdDev = forecastData.Where(x => x.ForecastDateTime.Equals(dataInterval) &&
                                (Convert.ToInt16(x.CpuNumber) == Convert.ToInt16(cpuNum))).Select(x => x.StdDevQueue).FirstOrDefault();
                                
                                /*//Check if we have IsChanged on SystemWeekException for this daysofweek and hour.
                                var hour = dataInterval.Hour.ToString("D2");
                                var daysOfWeek = (int)dataInterval.DayOfWeek;
                                var isChanged = systemWeekExceptionService.GetIsChangedValueFor(systemSerial, 1, 2, daysOfWeek, hour);
                                if (isChanged.Count > 0 && isChanged.FirstOrDefault().Key) {
                                    forecastDataSub = isChanged.FirstOrDefault().Value;
                                }*/

                                var defaultValueMajor = GetThreasholdDefaultValue(thresholdTypeId, "CPUQueueLengthMajor");
                                var exceptionMajor = defaultValueMajor;
                                if (threadholds.Rows.Count > 0)
                                    exceptionMajor = threadholds.Rows[0].IsNull("CPUQueueLengthMajor") ? defaultValueMajor : Convert.ToDouble(threadholds.Rows[0]["CPUQueueLengthMajor"]);

                                var upperRange = forecastDataSub + exceptionMajor + stdDev;
                                var lowerRange = Math.Abs(forecastDataSub - (exceptionMajor + stdDev));
                                
                                if (dataInterval.Hour != prevHour) {
                                    if (prevHour != -1) {
                                        string hourHeader = prevHour < 10 ? "0" + prevHour : "" + prevHour;
                                        yellowCountRow[hourHeader] = yellowForecastCount;
                                        redCountRow[hourHeader] = redForecastCount;
                                    }
                                    yellowForecastCount = 0;
                                    redForecastCount = 0;
                                    prevHour = dataInterval.Hour;
                                }
                                if (cpuQueue > upperRange) {
                                    redForecastCount++;
                                    alertExceptionColor = Color.Red;
                                    exceptionList.Add(new ExceptionView {
                                        FromTimestamp = dataInterval,
                                        Instance = cpuNum.ToString("D2"),
                                        EntityId = "CPU",
                                        CounterId = "Queue",
                                        Actual = cpuQueue,
                                        Upper = upperRange,
                                        Lower = lowerRange,
                                        DisplayRed = true,
                                        IsException = true
                                    });
                                }
                                else {
                                    //Check half of toleranceValue.
                                    var defaultValueMinor = GetThreasholdDefaultValue(thresholdTypeId, "CPUQueueLengthMinor");
                                    var exceptionMinor = defaultValueMinor;
                                    if (threadholds.Rows.Count > 0)
                                        exceptionMinor = threadholds.Rows[0].IsNull("CPUQueueLengthMinor") ? defaultValueMinor : Convert.ToDouble(threadholds.Rows[0]["CPUQueueLengthMinor"]);
                                    var upperRangeSub = forecastDataSub + exceptionMinor + stdDev;
                                    var lowerRangeSub = Math.Abs(forecastDataSub - (exceptionMinor + stdDev));

                                    if (cpuQueue > upperRangeSub) {
                                        yellowForecastCount++;
                                        if (alertExceptionColor != Color.Red) {
                                            alertExceptionColor = Color.Yellow;
                                        }
                                        exceptionList.Add(new ExceptionView {
                                            FromTimestamp = dataInterval,
                                            Instance = cpuNum.ToString("D2"),
                                            EntityId = "CPU",
                                            CounterId = "Queue",
                                            Actual = cpuQueue,
                                            Upper = upperRangeSub,
                                            Lower = lowerRangeSub,
                                            DisplayRed = false,
                                            IsException = true
                                        });
                                    }
                                    else {
                                        exceptionList.Add(new ExceptionView {
                                            FromTimestamp = dataInterval,
                                            Instance = cpuNum.ToString("D2"),
                                            EntityId = "CPU",
                                            CounterId = "Queue",
                                            Actual = cpuQueue,
                                            Upper = upperRangeSub,
                                            Lower = lowerRangeSub,
                                            DisplayRed = false,
                                            IsException = false
                                        });
                                    }
                                }
                            }
                            else {
                                if (cpuQueue > totalMaxValue)
                                    totalMaxValue = cpuQueue;
                                //Grid code - after loop through all CPUs for that interval
                                if (dataInterval.Hour != prevHour) {
                                    if (prevHour != -1) {
                                        string hourHeader = prevHour < 10 ? "0" + prevHour : "" + prevHour;
                                        yellowCountRow[hourHeader] = yellowGridCount;
                                        redCountRow[hourHeader] = redGridCount;
                                    }
                                    yellowGridCount = 0;
                                    redGridCount = 0;
                                    prevHour = dataInterval.Hour;
                                }
                                if (cpuQueue >= 5 && cpuQueue < 10) {
                                    yellowGridCount++;
                                }
                                else if (cpuQueue >= 10) {
                                    redGridCount++;
                                }
                            }
                        }
                        else {
                            if (cpuQueue > totalMaxValue)
                                totalMaxValue = cpuQueue;
                        }
                    }
                }

                try {
                    //Set the last hour
                    if (prevHour != -1) { 
                        string lHourHeader = prevHour < 10 ? "0" + prevHour : "" + prevHour;
                        yellowCountRow[lHourHeader] = applyForecastCount ? yellowForecastCount : yellowGridCount;
                        redCountRow[lHourHeader] = applyForecastCount ? redForecastCount : redGridCount;
                    }
                    cpuQueueGrid.Rows.Add(yellowCountRow);
                    cpuQueueGrid.Rows.Add(redCountRow);
                }
                catch (Exception ex) {
					writer.WriteLine("************ [JobProcessorChart] GetCPUQueueAlertColor Error ************");
					writer.WriteLine(ex.Message);
					writer.Flush();
				}
            }

            /*if (alertException && forecastData.Count > 0)
            {
                cpuQueueGrid = cpuQueueGridCpy;
                return alertExceptionColor;
            }

            var color = Color.White;
            if (totalMaxValue >= 5 && totalMaxValue < 10)
                color = Color.Yellow;
            else if (totalMaxValue >= 10)
                color = Color.Red;

            cpuQueueGrid = cpuQueueGridCpy;
            return color;*/
            //if (exceptionList.Count > 0) {
            //    ExpectionBulkInsert(databaseName, exceptionList, tempSaveLocation);
            //}

            return cpuQueueGrid;
        }

        public DataTable GetIpuQueueAlertColor(string systemSerial, DateTime startDate, DateTime endDate, long interval, Dictionary<int, SystemWeekInfo> systemweekInfo,
            double businessTolerance, double batchTolerance, double otherTolerance, List<ForecastData> forecastData, bool alertException, DataTable ipuQueueGrid, StreamWriter writer, ref List<ExceptionView> exceptionList) {
            //Force all datetime to be in US format.
            System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
            string dateFormat = "yyyy-MM-dd HH:mm:ss"; 
            var sysUnrated = new DailySysUnratedService(ConnectionStringSPAM);
            var reportDate = new List<DateTime>();

            if ((Convert.ToDateTime(endDate).Subtract(startDate)).Days >= 1) {
                DataSet dset = sysUnrated.GetDataDateFor(1, startDate, endDate, systemSerial);
                for (int i = 0; i < dset.Tables["Interval"].Rows.Count; i++) {
                    reportDate.Add(Convert.ToDateTime(dset.Tables["Interval"].Rows[i]["DataDate"].ToString()));
                }
            }
            else {
                reportDate.Add(Convert.ToDateTime(startDate));
            }

            //Get data from detail table.
            var databaseMapService = new DatabaseMappingService(ConnectionString);
            string newConnectionString = databaseMapService.GetConnectionStringFor(systemSerial);

            //Get TableNames.
            var databaseCheck = new Database(newConnectionString, "");
            var databaseName = Helper.FindKeyName(newConnectionString, "DATABASE");
            var cpuTrendTable = new CPUTrendTable(newConnectionString);
            var dataTable = cpuTrendTable.GetIPUQueueInterval(startDate.ToString(dateFormat), endDate.ToString(dateFormat));

            //var exceptionList = new List<ExceptionView>();
            var totalMaxValue = 0D;
            var alertExceptionColor = Color.White;
            int yellowForecastCount = 0;
            int redForecastCount = 0;
            //var ipuQueueGridCpy = ipuQueueGridStructure.Clone();
            if (dataTable.Rows.Count > 0) {
                DataRow yellowCountRow = ipuQueueGrid.NewRow();
                DataRow redCountRow = ipuQueueGrid.NewRow();
                int yellowGridCount = 0, redGridCount = 0, prevHour = -1; 
                double ipuQueue = 0;
                yellowCountRow["Entity"] = "IPU"; yellowCountRow["Counter"] = "Queue";
                redCountRow["Entity"] = "IPU"; redCountRow["Counter"] = "Queue";
                bool applyForecastCount = false;
                var systemWeekExceptionService = new SystemWeekExceptionService(ConnectionString);

                foreach (DataRow row in dataTable.Rows) {
                    ipuQueue = Convert.ToDouble(row["Queue"]);
                    if (forecastData.Count > 0) {
                        var cpuNum = Convert.ToInt32(row["CPUNumber"]);
                        var ipuNum = Convert.ToInt32(row["IPUNumber"]);
                        DateTime dateInterval = Convert.ToDateTime(row["Date & Time"]);
                        var isForecastData = forecastData.Any(x => x.ForecastDateTime.Equals(dateInterval) && 
                        (Convert.ToInt16(x.CpuNumber) == Convert.ToInt16(cpuNum)) && (Convert.ToInt16(x.IpuNumber) == Convert.ToInt16(ipuNum)));
                        if (alertException && isForecastData) {
                            applyForecastCount = true;
                            //var toleranceValue = GetSystemWeekInfoHourData(dateInterval.Hour, systemweekInfo[(int)dateInterval.DayOfWeek], businessTolerance, batchTolerance, otherTolerance);
                            var thresholdTypeId = GetThresholdTypeId(dateInterval.Hour, systemweekInfo[(int)dateInterval.DayOfWeek]);
                            var systemWeekThresholds = new SystemWeekThresholds(ConnectionString);
                            var threadholds = systemWeekThresholds.GetIpuQueueLength(systemSerial, thresholdTypeId);

                            var forecastDataSub = forecastData.Where(x => x.ForecastDateTime.Equals(dateInterval) &&
                                                                            (Convert.ToInt16(x.CpuNumber) == Convert.ToInt16(cpuNum)) && 
                                                                            (Convert.ToInt16(x.IpuNumber) == Convert.ToInt16(ipuNum))).Select(x => x.IpuQueue).FirstOrDefault();
                            var stdDev = forecastData.Where(x => x.ForecastDateTime.Equals(dateInterval) &&
                                                                            (Convert.ToInt16(x.CpuNumber) == Convert.ToInt16(cpuNum)) && 
                                                                            (Convert.ToInt16(x.IpuNumber) == Convert.ToInt16(ipuNum))).Select(x => x.StdDevIpuQueue).FirstOrDefault();

                            var defaultValueMajor = GetThreasholdDefaultValue(thresholdTypeId, "IPUQueueLengthMajor");
                            var exceptionMajor = defaultValueMajor;
                            if (threadholds.Rows.Count > 0)
                                exceptionMajor = threadholds.Rows[0].IsNull("IPUQueueLengthMajor") ? defaultValueMajor : Convert.ToDouble(threadholds.Rows[0]["IPUQueueLengthMajor"]);
                            var upperRange = forecastDataSub + exceptionMajor + stdDev;
                            var lowerRange = Math.Abs(forecastDataSub - (exceptionMajor + stdDev));
                            
                            if (dateInterval.Hour != prevHour) {
                                if (prevHour != -1) {
                                    string hourHeader = prevHour < 10 ? "0" + prevHour : "" + prevHour;
                                    yellowCountRow[hourHeader] = yellowForecastCount;
                                    redCountRow[hourHeader] = redForecastCount;
                                }
                                yellowForecastCount = 0;
                                redForecastCount = 0;
                                prevHour = dateInterval.Hour;
                            }

                            if (ipuQueue > upperRange) {
                                redForecastCount++;
                                alertExceptionColor = Color.Red;

                                exceptionList.Add(new ExceptionView {
                                    FromTimestamp = dateInterval,
                                    Instance = cpuNum.ToString("D2") + ":" + ipuNum.ToString("D2"),
                                    EntityId = "IPU",
                                    CounterId = "Queue",
                                    Actual = ipuQueue,
                                    Upper = upperRange,
                                    Lower = lowerRange,
                                    DisplayRed = true,
                                    IsException = true
                                });
                            }
                            else {
                                //Check half of toleranceValue.
                                var defaultValueMinor = GetThreasholdDefaultValue(thresholdTypeId, "IPUQueueLengthMinor");
                                var exceptionMinor = defaultValueMinor;
                                if (threadholds.Rows.Count > 0)
                                    exceptionMinor = threadholds.Rows[0].IsNull("IPUQueueLengthMinor") ? defaultValueMinor : Convert.ToDouble(threadholds.Rows[0]["IPUQueueLengthMinor"]);
                                var upperRangeSub = forecastDataSub + exceptionMinor + stdDev;
                                var lowerRangeSub = Math.Abs(forecastDataSub - (exceptionMinor + stdDev));

                                if (ipuQueue > upperRangeSub) {
                                    yellowForecastCount++;
                                    if (alertExceptionColor != Color.Red) {
                                        alertExceptionColor = Color.Yellow;
                                    }
                                    exceptionList.Add(new ExceptionView {
                                        FromTimestamp = dateInterval,
                                        Instance = cpuNum.ToString("D2") + ":" + ipuNum.ToString("D2"),
                                        EntityId = "IPU",
                                        CounterId = "Queue",
                                        Actual = ipuQueue,
                                        Upper = upperRangeSub,
                                        Lower = lowerRangeSub,
                                        DisplayRed = false,
                                        IsException = true
                                    });
                                }
                                else {
                                    exceptionList.Add(new ExceptionView {
                                        FromTimestamp = dateInterval,
                                        Instance = cpuNum.ToString("D2") + ":" + ipuNum.ToString("D2"),
                                        EntityId = "IPU",
                                        CounterId = "Queue",
                                        Actual = ipuQueue,
                                        Upper = upperRangeSub,
                                        Lower = lowerRangeSub,
                                        DisplayRed = false,
                                        IsException = false
                                    });
                                }
                            }

                        }
                        else {
                            if (ipuQueue > totalMaxValue)
                                totalMaxValue = ipuQueue;
                            //Grid code - after loop through all CPUs for that interval
                            if (dateInterval.Hour != prevHour) {
                                if (prevHour != -1) {
                                    string hourHeader = prevHour < 10 ? "0" + prevHour : "" + prevHour;
                                    yellowCountRow[hourHeader] = yellowGridCount;
                                    redCountRow[hourHeader] = redGridCount;
                                }
                                yellowGridCount = 0;
                                redGridCount = 0;
                                prevHour = dateInterval.Hour;
                            }
                            if (ipuQueue >= 5 && ipuQueue < 10) {
                                yellowGridCount++;
                            }
                            else if (ipuQueue >= 10) {
                                redGridCount++;
                            }
                        }
                    }
                    else {
                        if (ipuQueue > totalMaxValue)
                            totalMaxValue = ipuQueue;
                    }
                }

                try {
                    //Set the last hour
                    string lHourHeader = prevHour < 10 ? "0" + prevHour : "" + prevHour;
                    yellowCountRow[lHourHeader] = applyForecastCount ? yellowForecastCount : yellowGridCount;
                    redCountRow[lHourHeader] = applyForecastCount ? redForecastCount : redGridCount;
                    ipuQueueGrid.Rows.Add(yellowCountRow);
                    ipuQueueGrid.Rows.Add(redCountRow);
                }
                catch(Exception ex) {
					writer.WriteLine("************ [JobProcessorChart] GetIpuQueueAlertColor Error ************");
					writer.WriteLine(ex.Message);
					writer.Flush();
				}
            }
            return ipuQueueGrid;
        }

        public DataTable GetDiskDP2AlertColor(string systemSerial, DateTime startDate, DateTime endDate, long interval, Dictionary<int, SystemWeekInfo> systemweekInfo,
            double businessTolerance, double batchTolerance, double otherTolerance, List<ForecastDiskData> forecastData, bool alertException, DataTable diskGrid, StreamWriter writer, string tempSaveLocation) {

            var diskBrowserables = new List<string>();
            var databaseName = Helper.FindKeyName(ConnectionStringSPAM, "DATABASE");
            var databaseCheck = new Database(ConnectionStringSPAM, "");

            for (var start = startDate.Date; start <= endDate.Date; start = start.AddDays(1)) {
                var cpuTableName = systemSerial + "_DISKBROWSER_" + start.Year + "_" + start.Month + "_" + start.Day;
                var exists = databaseCheck.CheckTableExists(cpuTableName, databaseName);

                if (exists)
                    diskBrowserables.Add(cpuTableName);
            }


            var diskBrowser = new DiskBrowser(ConnectionStringSPAM);
            var diskQueueData = diskBrowser.GetDP2Busy(diskBrowserables, startDate, endDate);

            var alertExceptionColor = Color.White;
            int yellowForecastCount = 0;
            int redForecastCount = 0;

            var exceptionList = new List<ExceptionView>();
            var totalMaxValue = 0d;
            if (diskQueueData.Rows.Count > 0) {
                DataRow yellowCountRow = diskGrid.NewRow();
                DataRow redCountRow = diskGrid.NewRow();
                int yellowGridCount = 0, redGridCount = 0, prevHour = -1;
                yellowCountRow["Entity"] = "Disk";
                yellowCountRow["Counter"] = "DP2";
                redCountRow["Entity"] = "Disk";
                redCountRow["Counter"] = "DP2";
                var systemWeekExceptionService = new SystemWeekExceptionService(ConnectionString);

                bool applyForecastCount = false;
                foreach (DataRow row in diskQueueData.Rows) {
                    var deviceName = row["DeviceName"].ToString();
                    var fromTimestamp = Convert.ToDateTime(row["FromTimestamp"]);
                    var dp2Busy = Convert.ToDouble(row.IsNull("DP2Busy") ? 0 : row["DP2Busy"]);

					if (forecastData.Count > 0) {
                        var isForecastData = forecastData.Any(x => x.ForecastDateTime.Equals(fromTimestamp) && x.DeviceName.Equals(deviceName));
                        if (alertException && isForecastData) {
                            applyForecastCount = true;
                            
                            var thresholdTypeId = GetThresholdTypeId(fromTimestamp.Hour, systemweekInfo[(int)fromTimestamp.DayOfWeek]);
                            var systemWeekThresholds = new SystemWeekThresholds(ConnectionString);
                            var threadholds = systemWeekThresholds.GetDiskDP2(systemSerial, thresholdTypeId);

                            var forecastDataSub = forecastData.Where(x => x.ForecastDateTime.Equals(fromTimestamp) &&
                                                                          x.DeviceName.Equals(deviceName)).Select(x => x.DP2Busy).FirstOrDefault();
                            
                            var stdDev = forecastData.Where(x => x.ForecastDateTime.Equals(fromTimestamp) &&
                                                                         x.DeviceName.Equals(deviceName)).Select(x => x.StdDevDP2Busy).FirstOrDefault();

                            var defaultValueMajor = GetThreasholdDefaultValue(thresholdTypeId, "DiskDP2Major");
                            var exceptionMajor = defaultValueMajor;
                            if (threadholds.Rows.Count > 0)
                                exceptionMajor = threadholds.Rows[0].IsNull("DiskDP2Major") ? defaultValueMajor : Convert.ToDouble(threadholds.Rows[0]["DiskDP2Major"]);
                            var upperRange = forecastDataSub + exceptionMajor + stdDev;
                            var lowerRange = Math.Abs(forecastDataSub - (exceptionMajor + stdDev));
                          
                            if (fromTimestamp.Hour != prevHour) {
                                if (prevHour != -1) {
                                    string hourHeader = prevHour < 10 ? "0" + prevHour : "" + prevHour;
                                    yellowCountRow[hourHeader] = yellowForecastCount;
                                    redCountRow[hourHeader] = redForecastCount;
                                }
                                yellowForecastCount = 0;
                                redForecastCount = 0;
                                prevHour = fromTimestamp.Hour;
                            }

                            if (dp2Busy > upperRange) {
                                redForecastCount++;
                                alertExceptionColor = Color.Red;

                                exceptionList.Add(new ExceptionView {
                                    FromTimestamp = fromTimestamp,
                                    Instance = deviceName,
                                    EntityId = "Disk",
                                    CounterId = "DP2",
                                    Actual = dp2Busy,
                                    Upper = upperRange,
                                    Lower = lowerRange,
                                    DisplayRed = true
                                });
                            }
                            else {
                                //Check half of toleranceValue.
                                var defaultValueMinor = GetThreasholdDefaultValue(thresholdTypeId, "DiskDP2Minor");
                                var exceptionMinor = defaultValueMinor;
                                if (threadholds.Rows.Count > 0)
                                    exceptionMinor = threadholds.Rows[0].IsNull("DiskDP2Minor") ? defaultValueMinor : Convert.ToDouble(threadholds.Rows[0]["DiskDP2Minor"]);
                                var upperRangeSub = forecastDataSub + exceptionMinor + stdDev;
                                var lowerRangeSub = Math.Abs(forecastDataSub - (exceptionMinor + stdDev));

                                if (dp2Busy > upperRangeSub) {
                                    yellowForecastCount++;
                                    if (alertExceptionColor != Color.Red) {
                                        alertExceptionColor = Color.Yellow;
                                    }

                                    exceptionList.Add(new ExceptionView {
                                        FromTimestamp = fromTimestamp,
                                        Instance = deviceName,
                                        EntityId = "Disk",
                                        CounterId = "DP2",
                                        Actual = dp2Busy,
                                        Upper = upperRangeSub,
                                        Lower = lowerRangeSub,
                                        DisplayRed = false
                                    });
                                }
                            }

                        }
                        else {
                            if (dp2Busy > totalMaxValue)
                                totalMaxValue = dp2Busy;
                            //Grid code - after loop through all CPUs for that interval
                            if (fromTimestamp.Hour != prevHour) {
                                if (prevHour != -1) {
                                    string hourHeader = prevHour < 10 ? "0" + prevHour : "" + prevHour;
                                    yellowCountRow[hourHeader] = yellowGridCount;
                                    redCountRow[hourHeader] = redGridCount;
                                }
                                yellowGridCount = 0;
                                redGridCount = 0;
                                prevHour = fromTimestamp.Hour;
                            }
                            if (dp2Busy >= 1 && dp2Busy < 30) {
                                yellowGridCount++;
                            }
                            else if (dp2Busy >= 30) {
                                redGridCount++;
                            }
                        }
                    }
                    else {
                        if (dp2Busy > totalMaxValue)
                            totalMaxValue = dp2Busy;
                    }
                }
				try {
					//Set the last hour
					string lHourHeader = prevHour < 10 ? "0" + prevHour : "" + prevHour;
					yellowCountRow[lHourHeader] = applyForecastCount ? yellowForecastCount : yellowGridCount;
					redCountRow[lHourHeader] = applyForecastCount ? redForecastCount : redGridCount;
					diskGrid.Rows.Add(yellowCountRow);
					diskGrid.Rows.Add(redCountRow);
				}
				catch (Exception ex) {
					writer.WriteLine("************ [JobProcessorChart] GetDiskDP2AlertColor Error ************");
					writer.WriteLine(ex.Message);
					writer.Flush();
				}
            }

            if (exceptionList.Count > 0) {
                ExpectionBulkInsert(databaseName, exceptionList, tempSaveLocation);
            }

            return diskGrid;
        }

        public DataTable GetDiskQueueAlertColor(string systemSerial, DateTime startDate, DateTime endDate, long interval, Dictionary<int, SystemWeekInfo> systemweekInfo,
            double businessTolerance, double batchTolerance, double otherTolerance, List<ForecastDiskData> forecastData, bool alertException, DataTable diskGrid, StreamWriter writer, string tempSaveLocation) {
            var diskBrowserables = new List<string>();
            var databaseName = Helper.FindKeyName(ConnectionStringSPAM, "DATABASE");
            var databaseCheck = new Database(ConnectionStringSPAM, "");

            for (var start = startDate.Date; start <= endDate.Date; start = start.AddDays(1)) {
                var cpuTableName = systemSerial + "_DISKBROWSER_" + start.Year + "_" + start.Month + "_" + start.Day;
                var exists = databaseCheck.CheckTableExists(cpuTableName, databaseName);

                if (exists)
                    diskBrowserables.Add(cpuTableName);
            }


            var diskBrowser = new DiskBrowser(ConnectionStringSPAM);
            var diskQueueData = diskBrowser.GetQueueLength(diskBrowserables, startDate, endDate);

            var alertExceptionColor = Color.White;
            int yellowForecastCount = 0;
            int redForecastCount = 0;

            var exceptionList = new List<ExceptionView>();
            var totalMaxValue = 0d;
            if (diskQueueData.Rows.Count > 0) {
                DataRow yellowCountRow = diskGrid.NewRow();
                DataRow redCountRow = diskGrid.NewRow();
                int yellowGridCount = 0, redGridCount = 0, prevHour = -1;
                yellowCountRow["Entity"] = "Disk";
                yellowCountRow["Counter"] = "Queue";
                redCountRow["Entity"] = "Disk";
                redCountRow["Counter"] = "Queue";
                var systemWeekExceptionService = new SystemWeekExceptionService(ConnectionString);

                bool applyForecastCount = false;
                foreach (DataRow row in diskQueueData.Rows) {
                    var deviceName = row["DeviceName"].ToString();
                    var fromTimestamp = Convert.ToDateTime(row["FromTimestamp"]);
                    var queueLength = Convert.ToDouble(row["QueueLength"]);

                    if (forecastData.Count > 0) {
                        var isForecastData = forecastData.Any(x => x.ForecastDateTime.Equals(fromTimestamp) && x.DeviceName.Equals(deviceName));
                        if (alertException && isForecastData) {
                            applyForecastCount = true;
                            //var toleranceValue = GetSystemWeekInfoHourData(fromTimestamp.Hour, systemweekInfo[(int)fromTimestamp.DayOfWeek], businessTolerance, batchTolerance, otherTolerance);
                            var thresholdTypeId = GetThresholdTypeId(fromTimestamp.Hour, systemweekInfo[(int)fromTimestamp.DayOfWeek]);
                            var systemWeekThresholds = new SystemWeekThresholds(ConnectionString);
                            var threadholds = systemWeekThresholds.GetDiskQueueLength(systemSerial, thresholdTypeId);

                            var forecastDataSub = forecastData.Where(x => x.ForecastDateTime.Equals(fromTimestamp) &&
                                                                          x.DeviceName.Equals(deviceName)).Select(x => x.QueueLength).FirstOrDefault();

                            /*//Check if we have IsChanged on SystemWeekException for this daysofweek and hour.
                            var hour = fromTimestamp.Hour.ToString("D2");
                            var daysOfWeek = (int)fromTimestamp.DayOfWeek;
                            var isChanged = systemWeekExceptionService.GetIsChangedValueFor(systemSerial, 3, 1, daysOfWeek, hour);
                            if (isChanged.Count > 0 && isChanged.FirstOrDefault().Key) {
                                //Change the forecastDataSub base on the customer's input.
                                forecastDataSub = isChanged.FirstOrDefault().Value;
                            }*/
                            

                            var stdDev = forecastData.Where(x => x.ForecastDateTime.Equals(fromTimestamp) &&
                                                                         x.DeviceName.Equals(deviceName)).Select(x => x.StdDevQueueLength).FirstOrDefault();

                            var defaultValueMajor = GetThreasholdDefaultValue(thresholdTypeId, "DiskQueueLengthMajor");
                            var exceptionMajor = defaultValueMajor;
                            if (threadholds.Rows.Count > 0)
                                exceptionMajor = threadholds.Rows[0].IsNull("DiskQueueLengthMajor") ? defaultValueMajor : Convert.ToDouble(threadholds.Rows[0]["DiskQueueLengthMajor"]);
                            var upperRange = forecastDataSub + exceptionMajor + stdDev;
                            var lowerRange = Math.Abs(forecastDataSub - (exceptionMajor + stdDev));
                            
                            if (fromTimestamp.Hour != prevHour) {
                                if (prevHour != -1) {
                                    string hourHeader = prevHour < 10 ? "0" + prevHour : "" + prevHour;
                                    yellowCountRow[hourHeader] = yellowForecastCount;
                                    redCountRow[hourHeader] = redForecastCount;
                                }
                                yellowForecastCount = 0;
                                redForecastCount = 0;
                                prevHour = fromTimestamp.Hour;
                            }

                            if (queueLength > upperRange) {
                                redForecastCount++;
                                alertExceptionColor = Color.Red;

                                exceptionList.Add(new ExceptionView {
                                    FromTimestamp = fromTimestamp,
                                    Instance = deviceName,
                                    EntityId = "Disk",
                                    CounterId = "Queue",
                                    Actual = queueLength,
                                    Upper = upperRange,
                                    Lower = lowerRange,
                                    DisplayRed = true
                                });
                            }
                            else {
                                //Check half of toleranceValue.
                                var defaultValueMinor = GetThreasholdDefaultValue(thresholdTypeId, "DiskQueueLengthMinor");
                                var exceptionMinor = defaultValueMinor;
                                if (threadholds.Rows.Count > 0)
                                    exceptionMinor = threadholds.Rows[0].IsNull("DiskQueueLengthMinor") ? defaultValueMinor : Convert.ToDouble(threadholds.Rows[0]["DiskQueueLengthMinor"]);
                                var upperRangeSub = forecastDataSub + exceptionMinor + stdDev;
                                var lowerRangeSub = Math.Abs(forecastDataSub - (exceptionMinor + stdDev));

                                if (queueLength > upperRangeSub) {
                                    yellowForecastCount++;
                                    if (alertExceptionColor != Color.Red) {
                                        alertExceptionColor = Color.Yellow;
                                    }

                                    exceptionList.Add(new ExceptionView {
                                        FromTimestamp = fromTimestamp,
                                        Instance = deviceName,
                                        EntityId = "Disk",
                                        CounterId = "Queue",
                                        Actual = queueLength,
                                        Upper = upperRangeSub,
                                        Lower = lowerRangeSub,
                                        DisplayRed = false
                                    });
                                }
                            }

                        }
                        else {
                            if (queueLength > totalMaxValue)
                                totalMaxValue = queueLength;
                            //Grid code - after loop through all CPUs for that interval
                            if (fromTimestamp.Hour != prevHour) {
                                if (prevHour != -1) {
                                    string hourHeader = prevHour < 10 ? "0" + prevHour : "" + prevHour;
                                    yellowCountRow[hourHeader] = yellowGridCount;
                                    redCountRow[hourHeader] = redGridCount;
                                }
                                yellowGridCount = 0;
                                redGridCount = 0;
                                prevHour = fromTimestamp.Hour;
                            }
                            if (queueLength >= 1 && queueLength < 2) {
                                yellowGridCount++;
                            }
                            else if (queueLength >= 2) {
                                redGridCount++;
                            }
                        }
                    }
                    else {
                        if (queueLength > totalMaxValue)
                            totalMaxValue = queueLength;
                    }
                }

				try {
					//Set the last hour
					string lHourHeader = prevHour < 10 ? "0" + prevHour : "" + prevHour;
					yellowCountRow[lHourHeader] = applyForecastCount ? yellowForecastCount : yellowGridCount;
					redCountRow[lHourHeader] = applyForecastCount ? redForecastCount : redGridCount;
					diskGrid.Rows.Add(yellowCountRow);
					diskGrid.Rows.Add(redCountRow);
				}
				catch (Exception ex) {
					writer.WriteLine("************ [JobProcessorChart] GetDiskQueueAlertColor Error ************");
					writer.WriteLine(ex.Message);
					writer.Flush();
				}
            }

            if (exceptionList.Count > 0) {
                ExpectionBulkInsert(databaseName, exceptionList, tempSaveLocation);
            }

            return diskGrid;
        }

        public DataTable GetStorageAlertColor(string systemSerial, DateTime startDate, DateTime endDate, long interval, Dictionary<int, SystemWeekInfo> systemweekInfo,
            double businessTolerance, double batchTolerance, double otherTolerance, List<ForecastStorageData> forecastData, bool alertException, DataTable diskGrid, StreamWriter writer, string tempSaveLocation) {
            

            var dailyDisk = new DailyDisk(ConnectionStringSPAM);
            var storageData = dailyDisk.GetDailyDiskInfo(startDate.Date, endDate.Date);

            var alertExceptionColor = Color.White;
            int yellowForecastCount = 0;
            int redForecastCount = 0;

            var exceptionList = new List<ExceptionView>();
            var totalMaxValue = 0d;
            if (storageData.Rows.Count > 0) {
                DataRow yellowCountRow = diskGrid.NewRow();
                DataRow redCountRow = diskGrid.NewRow();
                int yellowGridCount = 0, redGridCount = 0;
                yellowCountRow["Entity"] = "Storage";
                yellowCountRow["Counter"] = "Used %";
                redCountRow["Entity"] = "Storage";
                redCountRow["Counter"] = "Used %";

                bool applyForecastCount = false;
                foreach (DataRow row in storageData.Rows) {
                    var deviceName = row["DeviceName"].ToString();
                    var fromTimestamp = Convert.ToDateTime(row["FromTimestamp"]);
                    var usedPercent = Convert.ToDouble(row["UsedPercent"]);

                    if (forecastData.Count > 0) {
                        var isForecastData = forecastData.Any(x => x.ForecastDateTime.Equals(fromTimestamp) && x.DeviceName.Equals(deviceName));
                        if (alertException && isForecastData) {
                            applyForecastCount = true;
                            var forecastDataSub = forecastData.Where(x => x.ForecastDateTime.Equals(fromTimestamp) &&
                                                                          x.DeviceName.Equals(deviceName)).Select(x => x.UsedPercent).FirstOrDefault();
                            var stdDev = forecastData.Where(x => x.ForecastDateTime.Equals(fromTimestamp) &&
                                                                         x.DeviceName.Equals(deviceName)).Select(x => x.StdDevUsedPercent).FirstOrDefault();

                            var systemWeekThresholds = new SystemWeekThresholds(ConnectionString);
                            var threadholds = systemWeekThresholds.GetStorage(systemSerial, 1);

                            var defaultValueMajor = GetThreasholdDefaultValue(1, "StorageMajor");
                            var exceptionMajor = defaultValueMajor;
                            if (threadholds.Rows.Count > 0)
                                exceptionMajor = threadholds.Rows[0].IsNull("StorageMajor") ? defaultValueMajor : Convert.ToDouble(threadholds.Rows[0]["StorageMajor"]);
                            var upperRange = forecastDataSub + exceptionMajor + stdDev;
                            var lowerRange = Math.Abs(forecastDataSub - (exceptionMajor + stdDev));
                            
                            if (usedPercent > upperRange) {
                                redForecastCount++;
                                alertExceptionColor = Color.Red;

                                exceptionList.Add(new ExceptionView {
                                    FromTimestamp = fromTimestamp,
                                    Instance = deviceName,
                                    EntityId = "Storage",
                                    CounterId = "Used%",
                                    Actual = usedPercent,
                                    Upper = upperRange,
                                    Lower = lowerRange,
                                    DisplayRed = true
                                });
                            }
                            else {
                                var defaultValueMinor = GetThreasholdDefaultValue(1, "StorageMinor");
                                var exceptionMinor = defaultValueMinor;
                                if (threadholds.Rows.Count > 0)
                                    exceptionMinor = threadholds.Rows[0].IsNull("StorageMinor") ? defaultValueMinor : Convert.ToDouble(threadholds.Rows[0]["StorageMinor"]);
                                var upperRangeSub = forecastDataSub + exceptionMinor + stdDev;
                                var lowerRangeSub = Math.Abs(forecastDataSub - (exceptionMinor + stdDev));

                                if (usedPercent > upperRangeSub) {
                                    yellowForecastCount++;
                                    if (alertExceptionColor != Color.Red) {
                                        alertExceptionColor = Color.Yellow;
                                    }
                                    exceptionList.Add(new ExceptionView {
                                        FromTimestamp = fromTimestamp,
                                        Instance = deviceName,
                                        EntityId = "Storage",
                                        CounterId = "Used%",
                                        Actual = usedPercent,
                                        Upper = upperRangeSub,
                                        Lower = lowerRangeSub,
                                        DisplayRed = false
                                    });
                                }
                            }
                        }
                        else {
                            if (usedPercent > totalMaxValue)
                                totalMaxValue = usedPercent;
                            if (usedPercent >= 80 && usedPercent < 90) {
                                yellowGridCount++;
                            }
                            else if (usedPercent >= 90) {
                                redGridCount++;
                            }
                        }
                    }
                    else {
                        if (usedPercent > totalMaxValue)
                            totalMaxValue = usedPercent;
                    }
                }

				try {
					yellowCountRow[2] = applyForecastCount ? yellowForecastCount : yellowGridCount;
					redCountRow[2] = applyForecastCount ? redForecastCount : redGridCount;
					diskGrid.Rows.Add(yellowCountRow);
					diskGrid.Rows.Add(redCountRow);
				}
				catch (Exception ex) {
					writer.WriteLine("************ [JobProcessorChart] GetStorageAlertColor Error ************");
					writer.WriteLine(ex.Message);
					writer.Flush();
				}
            }

            if (exceptionList.Count > 0) {
                var databaseName = Helper.FindKeyName(ConnectionStringSPAM, "DATABASE");
                ExpectionBulkInsert(databaseName, exceptionList, tempSaveLocation);
            }

            return diskGrid;
        }
        public string CreateScheduledChart(DateTime startDate, DateTime endDate, string path, string systemSerial) {
            //Force all datetime to be in US format.
            System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
            string alerttxt = string.Empty;

            //DailySysUnratedService sysUnrated = new DailySysUnratedService(ConnectionStringTrend);
            var sysUnrated = new DailySysUnratedService(ConnectionStringSPAM);
            int cpuNumber = sysUnrated.GetCPUNumberFor(1, startDate, endDate, systemSerial);

            //Getting Number of intervals
            if ((Convert.ToDateTime(endDate).Subtract(Convert.ToDateTime(startDate))).Days >= 1) {
                DataSet dset = sysUnrated.GetDataDateFor(1, startDate, endDate, systemSerial);

                if (dset.Tables["Interval"].Rows.Count == 0) {
                    return alerttxt;
                }

                var reportDate = new DateTime[dset.Tables["Interval"].Rows.Count];
                for (int i = 0; i < dset.Tables["Interval"].Rows.Count; i++) {
                    reportDate[i] = Convert.ToDateTime(dset.Tables["Interval"].Rows[i]["DataDate"].ToString());
                }
                string overlay = "0";
                overlay = sysUnrated.CheckOverlayDataFor(systemSerial, reportDate);
                string strReturn = "";

                if (cpuNumber != 0) {
                    strReturn = CreatePerCPUDundasChart(systemSerial, Convert.ToInt32(cpuNumber), reportDate, overlay,
                        path);
                    strReturn += ",";
                    strReturn += CreateHiLoDundasChart(systemSerial, Convert.ToInt32(cpuNumber), reportDate, overlay,
                        path);
                }
                dset = null;
                return strReturn;
            }
            else {
                var reportDate = new DateTime[1];
                reportDate[0] = Convert.ToDateTime(startDate);

                string overlay = "0";
                overlay = sysUnrated.CheckOverlayDataFor(systemSerial, reportDate);
                string strReturn = "";

                if (cpuNumber != 0) {
                    strReturn = CreatePerCPUDundasChart(systemSerial, Convert.ToInt32(cpuNumber), reportDate, overlay,
                        path);
                    strReturn += ",";
                    strReturn += CreateHiLoDundasChart(systemSerial, Convert.ToInt32(cpuNumber), reportDate, overlay,
                        path);
                }

                return strReturn;
            }
        }

        public string CreatePerCPUDundasChart(string systemSerial, int cpuNumber, DateTime[] dataDate, string overlay, string path, bool useTrueTime = false) {
            //Force all datetime to be in US format.
            System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
            var chart = new Chart();
            chart.Width = 650;
            chart.Height = 350;
            chart.Palette = ChartColorPalette.EarthTones;
            var chartarea = new ChartArea();
            chartarea.AxisY.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisX.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisY.IsLabelAutoFit = false;
            chartarea.AxisX.IsLabelAutoFit = false;
            chartarea.AxisY.LabelStyle.Format = "{#}%";

            chartarea.BorderWidth = 0;
            chartarea.AxisY.Maximum = 100;
            chartarea.AxisY.MajorGrid.Enabled = true;
            chartarea.AxisY.Interval = 10;
            chartarea.AxisY.Title = "CPU Busy (%)";
            chartarea.AxisX.Interval = 1;
            chartarea.AxisX.LabelStyle.Angle = -60;
            if (dataDate.Length == 1 || useTrueTime) {
                chartarea.AxisX.MajorGrid.Enabled = true;
                chartarea.AxisX.MajorTickMark.Enabled = true;
                chartarea.AxisX.IntervalType = DateTimeIntervalType.Hours;
                chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Hours;
                chartarea.AxisX.LabelStyle.Format = "HH:mm";
            }
            else if (dataDate.Length <= 14) {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.IntervalType = DateTimeIntervalType.Days;
                chartarea.AxisX.IntervalOffset = 0;
                chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Auto;
                chartarea.AxisX.LabelStyle.Format = "MMM/dd/yy\ndddd";
            }
            else {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.IntervalType = DateTimeIntervalType.Days;
                chartarea.AxisX.IntervalOffset = 0;
                chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Auto;
                chartarea.AxisX.LabelStyle.Format = "MMM/dd/yy";
            }
            chartarea.AxisY.TitleFont = new Font("Calibri", 8);
            chartarea.AxisY.MajorGrid.LineColor = Color.Silver;
            chartarea.AxisX.MajorGrid.LineColor = Color.Silver;

            if (overlay != "0") {
                chartarea.AxisY2.Enabled = AxisEnabled.True;
                chartarea.AxisY2.LabelStyle.Format = "N0";
                chartarea.AxisY2.Minimum = 0;
                chartarea.AxisY2.RoundAxisValues();
                chartarea.AxisY2.LabelStyle.Font = new Font("Calibri", 8);
                chartarea.AxisY2.TitleFont = new Font("Calibri", 8);
                chartarea.AxisY2.IsLabelAutoFit = false;
                if (overlay == "1") {
                    chartarea.AxisY2.Title = "TMF/sec.";
                }
                else {
                    chartarea.AxisY2.Title = "Disk I-O/sec.";
                }
                chartarea.AxisY2.MajorGrid.Enabled = false;
            }

            //Legend format.
            // Set legend style
            chart.Legends.Clear();
            chart.Legends.Add("Default");

            //chart.Legends[0].LegendStyle = LegendStyle.Column;
            chart.Legends[0].LegendStyle = LegendStyle.Column;
            // Set legend docking
            chart.Legends[0].IsDockedInsideChartArea = true;
            // Set legend alignment
            chart.Legends[0].Alignment = StringAlignment.Center;
            chart.Legends[0].Font = new Font("Calibri", 7);
            chart.Legends[0].BorderDashStyle = ChartDashStyle.Solid;
            chart.Legends[0].BorderColor = Color.Black;
            chart.Legends[0].BorderWidth = 1;

            //Add title.
            var title = new Title();
            if (useTrueTime) {
                title.Text = "Period from " + dataDate[0].ToString("MMMM dd, yyy HH:mm") + " through " +
                             dataDate[dataDate.Length - 1].ToString("MMMM dd, yyy HH:mm");
            }
            else {
                if (dataDate.Length == 1)
                    title.Text = "Period for " + dataDate[0].ToLongDateString();
                else
                    title.Text = "Period from " + dataDate[0].ToLongDateString() + " through " +
                                 dataDate[dataDate.Length - 1].ToLongDateString();
            }
            title.Font = new Font("Calibri", 10);
            chart.Titles.Add(title);
            DataSet dataSet, myDataSet;

            try {
                if (overlay != "0") {
                    dataSet = WalkThroughOverlayLineChart(systemSerial, dataDate, overlay);

                    myDataSet = FormatWalkthroughOverlayDataSet(dataSet, overlay);

                    var serialOver = new Series("Overlay");
                    if (overlay == "1") {
                        serialOver.ChartType = SeriesChartType.SplineArea;
                        serialOver.LegendText = "TMF/sec.";
                        serialOver.Color = Color.LightSteelBlue;
                        serialOver.MarkerSize = 5;
                        serialOver.IsXValueIndexed = true;
                        serialOver.YValueType = ChartValueType.Double;
                        serialOver.XValueType = ChartValueType.DateTime;
                        serialOver.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                        serialOver.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Secondary");
                    }
                    else if (overlay == "2") {
                        serialOver.ChartType = SeriesChartType.SplineArea;
                        serialOver.LegendText = "Disk I-O/sec.";
                        serialOver.Color = Color.LightSteelBlue;
                        serialOver.MarkerSize = 5;
                        serialOver.IsXValueIndexed = true;
                        serialOver.YValueType = ChartValueType.Double;
                        serialOver.XValueType = ChartValueType.DateTime;
                        serialOver.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                        serialOver.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Secondary");
                    }

                    for (int x = 0; x < myDataSet.Tables["SystemUnratedHourly"].Rows.Count; x++) {
                        if (useTrueTime) {
                            if (Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"]) >=
                                dataDate[0] &&
                                Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"]) <=
                                dataDate[1]) {
                                var dpOver = new DataPoint();
                                dpOver.XValue =
                                    Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"])
                                        .ToOADate();
                                if (overlay == "1")
                                    dpOver.YValues[0] =
                                        Convert.ToDouble(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["TMF/sec."]);
                                else if (overlay == "2")
                                    dpOver.YValues[0] =
                                        Convert.ToDouble(
                                            myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Disk I-O/sec."]);
                                serialOver.Points.Add(dpOver);
                            }
                        }
                        else {
                            var dpOver = new DataPoint();
                            dpOver.XValue =
                                Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"])
                                    .ToOADate();
                            if (overlay == "1")
                                dpOver.YValues[0] =
                                    Convert.ToDouble(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["TMF/sec."]);
                            else if (overlay == "2")
                                dpOver.YValues[0] =
                                    Convert.ToDouble(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Disk I-O/sec."]);
                            serialOver.Points.Add(dpOver);
                        }
                    }

                    chart.Series.Add(serialOver);
                }
            }
            catch {
            }
            try {
                for (int y = 0; y < Convert.ToInt16(cpuNumber); y++) {
                    //int y = 0;

                    dataSet = WalkThroughLineChart(systemSerial, dataDate, y);

                    //if (dataSet.Tables["SystemUnratedHourly"] == null)
                    //    return "";

                    myDataSet = FormatWalkthroughDataSet(dataSet);
                    var serialBusy = new Series("CPU" + y);
                    serialBusy.ChartType = SeriesChartType.Line;
                    serialBusy["PointWidth"] = "0.8";
                    // Set series tooltips
                    if (y < 10) {
                        serialBusy.LegendText = "CPU 0" + y;
                        serialBusy.ToolTip = "CPU 0" + y;
                    }
                    else {
                        serialBusy.LegendText = "CPU " + y;
                        serialBusy.ToolTip = "CPU " + y;
                    }

                    serialBusy.IsXValueIndexed = true;
                    serialBusy.XValueType = ChartValueType.DateTime;
                    serialBusy.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                    serialBusy.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");

                    //populate all the data.
                    for (int x = 0; x < myDataSet.Tables["SystemUnratedHourly"].Rows.Count; x++) {
                        if (useTrueTime) {
                            if (Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"]) >=
                                dataDate[0] &&
                                Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"]) <=
                                dataDate[1]) {
                                var dpAdjust = new DataPoint();
                                //dpAdjust.LegendText = myDataSet.Tables["SystemUnratedHourly"].Rows[x]["CPU"].ToString();
                                dpAdjust.XValue =
                                    Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"])
                                        .ToOADate();
                                dpAdjust.YValues[0] =
                                    Convert.ToDouble(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Busy"]);
                                serialBusy.Points.Add(dpAdjust);
                            }
                        }
                        else {
                            var dpAdjust = new DataPoint();
                            //dpAdjust.LegendText = myDataSet.Tables["SystemUnratedHourly"].Rows[x]["CPU"].ToString();
                            dpAdjust.XValue =
                                Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"])
                                    .ToOADate();
                            dpAdjust.YValues[0] =
                                Convert.ToDouble(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Busy"]);
                            serialBusy.Points.Add(dpAdjust);
                        }
                    }

                    chart.Series.Add(serialBusy);
                }
            }
            catch {
            }
            chart.ChartAreas.Add(chartarea);
            chart.ImageType = ChartImageType.Jpeg;
            //chart.ImageUrl = "\\TempImg\\ChartPic_#SEQ(100,5)";
            if (!Directory.Exists(path + "\\TempImg\\")) {
                Directory.CreateDirectory(path + "\\TempImg\\");
            }
            string saveLocation = path + "\\TempImg\\ChadatabaseCheckrtPicBusy_" + DateTime.Now.Ticks + ".jpg";
            //Save the chart image.
            chart.SaveImage(saveLocation);
            return saveLocation;
        }

        private string CreateForecastIntervalCPUBusyDundasChart(List<ForecastData> forecastDataTable, DateTime startTime, DateTime endTime, string path, long interval) {
            //Force all datetime to be in US format.
            System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
            var chart = new Chart();
            chart.Width = 900;
            chart.Height = 250;
            chart.Palette = ChartColorPalette.EarthTones;
            var chartarea = new ChartArea();
            chartarea.AxisY.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisX.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisY.IsLabelAutoFit = false;
            chartarea.AxisX.IsLabelAutoFit = false;
            chartarea.AxisY.LabelStyle.Format = "{#}%";

            chartarea.AxisY.MajorGrid.Enabled = true;
            chartarea.BorderWidth = 0;
            chartarea.AxisY.Maximum = 100;
            chartarea.AxisY.Interval = 10;
            chartarea.AxisY.Title = "CPU Busy (%)";
            //Display Axis every 30 mins.
            if (interval == 1800)
                chartarea.AxisX.Interval = 1;
            else {
                if (interval > 1800) {
                    var newInterval = interval / 1800;
                    chartarea.AxisX.Interval = (int)newInterval;
                }
                else {
                    var newInterval = 1800 / interval;
                    chartarea.AxisX.Interval = (int)newInterval;
                }
            }
            chartarea.AxisX.LabelStyle.Angle = -60;
            chartarea.AxisX.MajorGrid.Enabled = false;
            chartarea.AxisX.MajorTickMark.Enabled = false;
            chartarea.AxisX.LabelStyle.Format = "HH:mm";

            chartarea.AxisY.TitleFont = new Font("Calibri", 8);
            chartarea.AxisY.MajorGrid.LineColor = Color.Silver;
            chartarea.AxisX.MajorGrid.LineColor = Color.Silver;

            //Legend format.
            chart.Legends.Clear();
            chart.Legends.Add("Default");
            chart.Legends[0].LegendStyle = LegendStyle.Row;
            chart.Legends[0].IsDockedInsideChartArea = true;
            chart.Legends[0].Alignment = StringAlignment.Center;
            chart.Legends[0].Font = new Font("Calibri", 6);
            chart.Legends[0].BorderDashStyle = ChartDashStyle.NotSet;
            chart.Legends[0].Docking = Docking.Bottom;

            //Add Average CPU Busy.
            try {
                var serialBusyAverage = new Series("Average");
                serialBusyAverage.ChartType = SeriesChartType.SplineArea;
                serialBusyAverage["PointWidth"] = "0.8";
                serialBusyAverage.LegendText = "Average";
                serialBusyAverage.ToolTip = "Average";
                serialBusyAverage.Color = Color.LightSteelBlue;

                serialBusyAverage.IsXValueIndexed = true;
                serialBusyAverage.XValueType = ChartValueType.DateTime;
                serialBusyAverage.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                serialBusyAverage.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");

                //loop through each date and check if we not missing any data.
                for (var start = startTime; start < endTime; start = start.AddSeconds(interval)) {
                    var dpAdjust = new DataPoint();
                    if (forecastDataTable.Any(x => x.Hour.Equals(start.ToString("HH:mm")))) {
                        var averageValue = forecastDataTable.Where(x => x.Hour.Equals(start.ToString("HH:mm"))).Average(x => x.CpuBusy);
                        dpAdjust.XValue = start.ToOADate();
                        dpAdjust.YValues[0] = averageValue;
                        serialBusyAverage.Points.Add(dpAdjust);
                    }
                    else {
                        dpAdjust.XValue = start.ToOADate();
                        dpAdjust.YValues[0] = 0;
                        serialBusyAverage.Points.Add(dpAdjust);
                    }
                }
                chart.Series.Add(serialBusyAverage);
            }
            catch {
            }



            try {
                var subData = forecastDataTable.Select(x => x.CpuNumber).Distinct();
                foreach (var y in subData) {
                    var serialBusy = new Series("CPU" + y);
                    serialBusy.ChartType = SeriesChartType.Spline;
                    serialBusy["PointWidth"] = "0.8";
                    // Set series tooltips
                    if (y < 10) {
                        serialBusy.LegendText = "0" + y;
                        serialBusy.ToolTip = "CPU 0" + y;
                    }
                    else {
                        serialBusy.LegendText = " " + y;
                        serialBusy.ToolTip = "CPU " + y;
                    }

                    serialBusy.IsXValueIndexed = true;
                    serialBusy.XValueType = ChartValueType.DateTime;
                    serialBusy.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                    serialBusy.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");

                    //populate all the data.
                    for (var start = startTime; start < endTime; start = start.AddSeconds(interval)) {
                        if (forecastDataTable.Any(x => x.Hour.Equals(start.ToString("HH:mm")))) {
                            var averageValue = forecastDataTable.Where(x => x.Hour.Equals(start.ToString("HH:mm")) && x.CpuNumber.Equals(y)).Average(x => x.CpuBusy);
                            var dpAdjust = new DataPoint();
                            dpAdjust.XValue = Convert.ToDateTime(start).ToOADate();
                            dpAdjust.YValues[0] = averageValue;
                            serialBusy.Points.Add(dpAdjust);
                        }
                        else {
                            var dpAdjust = new DataPoint();
                            dpAdjust.XValue = Convert.ToDateTime(start).ToOADate();
                            dpAdjust.YValues[0] = 0;
                            serialBusy.Points.Add(dpAdjust);
                        }
                    }

                    chart.Series.Add(serialBusy);
                }
            }
            catch {
            }

            chart.ChartAreas.Add(chartarea);

            chart.ImageType = ChartImageType.Jpeg;
            if (!Directory.Exists(path + "\\TempImg\\")) {
                Directory.CreateDirectory(path + "\\TempImg\\");
            }
            string saveLocation = path + "\\TempImg\\ChartPicForecastBusy_" + DateTime.Now.Ticks + ".jpg";
            //Save the chart image.
            chart.SaveImage(saveLocation);
            return saveLocation;
        }

        private string CreateIntervalCPUBusyDundasChart(string systemSerial, DateTime[] dataDate, DateTime startTime, DateTime endTime, string path, long interval, ref bool hourDrop, ref List<System.DateTime[]> hourDropPeriods) {
            //Force all datetime to be in US format.
            System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
            string dateFormat = "yyyy-MM-dd HH:mm:ss";
            var chart = new Chart();
            chart.Width = 900;
            chart.Height = 250;
            chart.Palette = ChartColorPalette.EarthTones;
            var chartarea = new ChartArea();
            chartarea.AxisY.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisX.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisY.IsLabelAutoFit = false;
            chartarea.AxisX.IsLabelAutoFit = false;
            chartarea.AxisY.LabelStyle.Format = "{#}%";

            chartarea.AxisY.MajorGrid.Enabled = true;
            chartarea.BorderWidth = 0;
            chartarea.AxisY.Maximum = 100;
            chartarea.AxisY.Interval = 10;
            chartarea.AxisY.Title = "CPU Busy (%)";
            //Display Axis every 30 mins.
            if (interval == 1800)
                chartarea.AxisX.Interval = 1;
            else {
                if (interval > 1800) {
                    var newInterval = interval / 1800;
                    chartarea.AxisX.Interval = (int)newInterval;
                }
                else {
                    var newInterval = 1800 / interval;
                    chartarea.AxisX.Interval = (int)newInterval;
                }
            }
            chartarea.AxisX.LabelStyle.Angle = -60;
            if (dataDate.Length == 1) {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.MajorTickMark.Enabled = false;
                //chartarea.AxisX.IntervalType = DateTimeIntervalType.Hours;
                //chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Hours;
                chartarea.AxisX.LabelStyle.Format = "HH:mm";
            }
            else if (dataDate.Length > 1 && dataDate.Length <= 7) {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.MajorTickMark.Enabled = false;
                //chartarea.AxisX.IntervalType = DateTimeIntervalType.Hours;
                //chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Auto;
                chartarea.AxisX.LabelStyle.Format = "HH:mm";
            }
            else if (dataDate.Length <= 14) {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.IntervalType = DateTimeIntervalType.Days;
                chartarea.AxisX.IntervalOffset = 0;
                chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Auto;
                chartarea.AxisX.LabelStyle.Format = "MMM/dd/yy\ndddd";
            }
            else {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.IntervalType = DateTimeIntervalType.Days;
                chartarea.AxisX.IntervalOffset = 0;
                chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Auto;
                chartarea.AxisX.LabelStyle.Format = "MMM/dd/yy";
            }
            chartarea.AxisY.TitleFont = new Font("Calibri", 8);
            chartarea.AxisY.MajorGrid.LineColor = Color.Silver;
            chartarea.AxisX.MajorGrid.LineColor = Color.Silver;

            //Legend format.
            chart.Legends.Clear();
            chart.Legends.Add("Default");
            chart.Legends[0].LegendStyle = LegendStyle.Row;
            chart.Legends[0].IsDockedInsideChartArea = true;
            chart.Legends[0].Alignment = StringAlignment.Center;
            chart.Legends[0].Font = new Font("Calibri", 6);
            chart.Legends[0].BorderDashStyle = ChartDashStyle.NotSet;
            chart.Legends[0].Docking = Docking.Bottom;

            //Get data from detail table.
            var databaseMapService = new DatabaseMappingService(ConnectionString);
            string newConnectionString = databaseMapService.GetConnectionStringFor(systemSerial);


            //Get TableNames.
            var databaseCheck = new Database(newConnectionString, "");
            var databaseName = Helper.FindKeyName(newConnectionString, "DATABASE");
            var cpuTrendTable = new CPUTrendTable(newConnectionString);
            var dataTable = cpuTrendTable.GetCPUBusyInterval(startTime.ToString(dateFormat), endTime.ToString(dateFormat));

            //Add Average CPU Busy.
            try {
                var serialBusyAverage = new Series("Average");
                serialBusyAverage.ChartType = SeriesChartType.SplineArea;
                serialBusyAverage["PointWidth"] = "0.8";
                serialBusyAverage.LegendText = "Average";
                serialBusyAverage.ToolTip = "Average";
                serialBusyAverage.Color = Color.LightSteelBlue;

                serialBusyAverage.IsXValueIndexed = true;
                serialBusyAverage.XValueType = ChartValueType.DateTime;
                serialBusyAverage.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                serialBusyAverage.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");

                var hourDropStart = new System.DateTime();
                var hourDropEnd = new System.DateTime();
                //loop through each date and check if we not missing any data.
                for (var start = startTime; start < endTime; start = start.AddSeconds(interval)) {
                    var dpAdjust = new DataPoint();
                    if (dataTable.AsEnumerable().Any(x => x.Field<DateTime>("Date & Time").Equals(start))) {
                        var averageValue = dataTable.AsEnumerable().Where(x => x.Field<DateTime>("Date & Time").Equals(start)).Average(x => x.Field<double>("Busy"));
                        dpAdjust.XValue = start.ToOADate();
                        dpAdjust.YValues[0] = averageValue;
                        serialBusyAverage.Points.Add(dpAdjust);
                        if (!hourDropStart.Equals(new System.DateTime()))
                        {
                            hourDropPeriods.Add(new System.DateTime[] { hourDropStart, hourDropEnd });
                            hourDropStart = new System.DateTime();
                            hourDropEnd = new System.DateTime();
                        }
                    }
                    else {
                        dpAdjust.XValue = start.ToOADate();
                        dpAdjust.YValues[0] = 0;
                        serialBusyAverage.Points.Add(dpAdjust);
                        hourDrop = true;
                        if (hourDropStart.Equals(new System.DateTime()))
                        {
                            hourDropStart = start;
                        }
                        hourDropEnd = start.AddSeconds(interval);
                    }
                }
                chart.Series.Add(serialBusyAverage);
            }
            catch {
            }



            try {
                var subData = dataTable.AsEnumerable().Select(x => x.Field<UInt64>("CPUNumber")).Distinct();
                foreach (var y in subData) {


                    //myDataTable = myDataTable.AsEnumerable().OrderBy(x => x.Field<DateTime>("Date & Time")).CopyToDataTable();
                    var serialBusy = new Series("CPU" + y);
                    serialBusy.ChartType = SeriesChartType.Spline;
                    serialBusy["PointWidth"] = "0.8";
                    // Set series tooltips
                    if (y < 10) {
                        serialBusy.LegendText = "0" + y;
                        serialBusy.ToolTip = "CPU 0" + y;
                    }
                    else {
                        serialBusy.LegendText = " " + y;
                        serialBusy.ToolTip = "CPU " + y;
                    }

                    serialBusy.IsXValueIndexed = true;
                    serialBusy.XValueType = ChartValueType.DateTime;
                    serialBusy.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                    serialBusy.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");

                    var myDataTable = dataTable.AsEnumerable().Where(x => x.Field<UInt64>("CPUNumber").Equals(y)).OrderBy(x => x.Field<DateTime>("Date & Time")).CopyToDataTable();
                    //populate all the data.
                    for (var start = startTime; start < endTime; start = start.AddSeconds(interval)) {
                        if (myDataTable.AsEnumerable().Any(x => x.Field<DateTime>("Date & Time").Equals(start))) {
                            //DataRow newRow = myDataTable.NewRow();
                            //newRow["Date & Time"] = start;
                            //newRow["Busy"] = 0;
                            //newRow["CPUNumber"] = y;
                            //myDataTable.Rows.Add(newRow);
                            var averageValue = myDataTable.AsEnumerable().Where(x => x.Field<DateTime>("Date & Time").Equals(start)).Average(x => x.Field<double>("Busy"));
                            var dpAdjust = new DataPoint();
                            dpAdjust.XValue = Convert.ToDateTime(start).ToOADate();
                            dpAdjust.YValues[0] = averageValue; //Convert.ToDouble(myDataTable.Rows[x]["Busy"]);
                            serialBusy.Points.Add(dpAdjust);
                        }
                        else {
                            var dpAdjust = new DataPoint();
                            dpAdjust.XValue = Convert.ToDateTime(start).ToOADate();
                            dpAdjust.YValues[0] = 0; //Convert.ToDouble(myDataTable.Rows[x]["Busy"]);
                            serialBusy.Points.Add(dpAdjust);
                            hourDrop = true;
                        }
                    }

                    //for (int x = 0; x < myDataTable.Rows.Count; x++) {
                    //    if (Convert.ToDateTime(myDataTable.Rows[x]["Date & Time"]) >= startTime &&
                    //        Convert.ToDateTime(myDataTable.Rows[x]["Date & Time"]) <= endTime) {
                    //        var dpAdjust = new DataPoint();
                    //        dpAdjust.XValue = Convert.ToDateTime(myDataTable.Rows[x]["Date & Time"]).ToOADate();
                    //        dpAdjust.YValues[0] = Convert.ToDouble(myDataTable.Rows[x]["Busy"]);
                    //        serialBusy.Points.Add(dpAdjust);
                    //    }
                    //    else {
                    //        var dpAdjust = new DataPoint();
                    //        dpAdjust.XValue = Convert.ToDateTime(myDataTable.Rows[x]["Date & Time"]).ToOADate();
                    //        dpAdjust.YValues[0] = 0;
                    //        serialBusy.Points.Add(dpAdjust);
                    //    }
                    //}

                    chart.Series.Add(serialBusy);
                }
            }
            catch (Exception e) {

            }

            chart.ChartAreas.Add(chartarea);

            chart.ImageType = ChartImageType.Jpeg;
            //chart.ImageUrl = "\\TempImg\\ChartPic_#SEQ(100,5)";
            if (!Directory.Exists(path + "\\TempImg\\")) {
                Directory.CreateDirectory(path + "\\TempImg\\");
            }
            string saveLocation = path + "\\TempImg\\ChartPicBusy_" + DateTime.Now.Ticks + ".jpg";
            //Save the chart image.
            chart.SaveImage(saveLocation);
            return saveLocation;
        }

        private string CreateIntervalCPUQueueDundasChart(string systemSerial, DateTime[] dataDate, DateTime startTime, DateTime endTime, string path, long interval) {
            //Force all datetime to be in US format.
            System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
            string dateFormat = "yyyy-MM-dd HH:mm:ss";
            var chart = new Chart();
            chart.Width = 900;
            chart.Height = 250;
            chart.Palette = ChartColorPalette.EarthTones;
            var chartarea = new ChartArea();
            chartarea.AxisY.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisX.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisY.IsLabelAutoFit = false;
            chartarea.AxisX.IsLabelAutoFit = false;
            //chartarea.AxisY.LabelStyle.Format = "N0";

            chartarea.AxisY.MajorGrid.Enabled = true;
            chartarea.BorderWidth = 0;
            chartarea.AxisY.Title = "CPU Queue Length";
            //Display Axis every 30 mins.
            if (interval == 1800)
                chartarea.AxisX.Interval = 1;
            else {
                if (interval > 1800) {
                    var newInterval = interval / 1800;
                    chartarea.AxisX.Interval = (int)newInterval;
                }
                else {
                    var newInterval = 1800 / interval;
                    chartarea.AxisX.Interval = (int)newInterval;
                }
            }
            chartarea.AxisX.LabelStyle.Angle = -60;
            if (dataDate.Length == 1) {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.MajorTickMark.Enabled = false;
                //chartarea.AxisX.IntervalType = DateTimeIntervalType.Hours;
                //chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Hours;
                chartarea.AxisX.LabelStyle.Format = "HH:mm";
            }
            else if (dataDate.Length > 1 && dataDate.Length <= 7) {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.MajorTickMark.Enabled = false;
                //chartarea.AxisX.IntervalType = DateTimeIntervalType.Hours;
                //chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Auto;
                chartarea.AxisX.LabelStyle.Format = "HH:mm";
            }
            else if (dataDate.Length <= 14) {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.IntervalType = DateTimeIntervalType.Days;
                chartarea.AxisX.IntervalOffset = 0;
                chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Auto;
                chartarea.AxisX.LabelStyle.Format = "MMM/dd/yy\ndddd";
            }
            else {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.IntervalType = DateTimeIntervalType.Days;
                chartarea.AxisX.IntervalOffset = 0;
                chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Auto;
                chartarea.AxisX.LabelStyle.Format = "MMM/dd/yy";
            }
            chartarea.AxisY.TitleFont = new Font("Calibri", 8);
            chartarea.AxisY.MajorGrid.LineColor = Color.Silver;
            chartarea.AxisX.MajorGrid.LineColor = Color.Silver;

            //Legend format.
            chart.Legends.Clear();
            chart.Legends.Add("Default");
            chart.Legends[0].LegendStyle = LegendStyle.Row;
            chart.Legends[0].IsDockedInsideChartArea = true;
            chart.Legends[0].Alignment = StringAlignment.Center;
            chart.Legends[0].Font = new Font("Calibri", 6);
            chart.Legends[0].BorderDashStyle = ChartDashStyle.NotSet;
            chart.Legends[0].Docking = Docking.Bottom;

            /*//Add title.
            var title = new Title();
            if (dataDate.Length == 1)
                title.Text = "Period for " + dataDate[0].ToLongDateString();
            else
                title.Text = "Period from " + dataDate[0].ToLongDateString() + " through " + dataDate[dataDate.Length - 1].ToLongDateString();

            title.Font = new Font("Calibri", 10);
            chart.Titles.Add(title);*/
            //Get data from detail table.
            var databaseMapService = new DatabaseMappingService(ConnectionString);
            string newConnectionString = databaseMapService.GetConnectionStringFor(systemSerial);


            //Get TableNames.
            var databaseCheck = new Database(newConnectionString, "");
            var databaseName = Helper.FindKeyName(newConnectionString, "DATABASE");
            var cpuTrendTable = new CPUTrendTable(newConnectionString);
            var dataTable = cpuTrendTable.GetCPUQueueInterval(startTime.ToString(dateFormat), endTime.ToString(dateFormat));

            //Add Average CPU Busy.
            try {
                var serialBusyAverage = new Series("Average");
                serialBusyAverage.ChartType = SeriesChartType.SplineArea;
                serialBusyAverage["PointWidth"] = "0.8";
                serialBusyAverage.LegendText = "Average";
                serialBusyAverage.ToolTip = "Average";
                serialBusyAverage.Color = Color.LightSteelBlue;

                serialBusyAverage.IsXValueIndexed = true;
                serialBusyAverage.XValueType = ChartValueType.DateTime;
                serialBusyAverage.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                serialBusyAverage.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");

                //loop through each date and check if we not missing any data.
                for (var start = startTime; start < endTime; start = start.AddSeconds(interval)) {
                    var dpAdjust = new DataPoint();
                    if (dataTable.AsEnumerable().Any(x => x.Field<DateTime>("Date & Time").Equals(start))) {
                        var averageValue = dataTable.AsEnumerable().Where(x => x.Field<DateTime>("Date & Time").Equals(start)).Average(x => x.Field<double>("Queue"));
                        dpAdjust.XValue = start.ToOADate();
                        dpAdjust.YValues[0] = averageValue;
                        serialBusyAverage.Points.Add(dpAdjust);
                    }
                    else {
                        dpAdjust.XValue = start.ToOADate();
                        dpAdjust.YValues[0] = 0;
                        serialBusyAverage.Points.Add(dpAdjust);
                    }
                }
                chart.Series.Add(serialBusyAverage);
            }
            catch {
            }

            try {
                var subData = dataTable.AsEnumerable().Select(x => x.Field<UInt64>("CPUNumber")).Distinct();
                foreach (var y in subData) {


                    //myDataTable = myDataTable.AsEnumerable().OrderBy(x => x.Field<DateTime>("Date & Time")).CopyToDataTable();

                    var serialBusy = new Series("CPU" + y);
                    serialBusy.ChartType = SeriesChartType.Spline;
                    serialBusy["PointWidth"] = "0.8";
                    // Set series tooltips
                    if (y < 10) {
                        serialBusy.LegendText = "0" + y;
                        serialBusy.ToolTip = "CPU 0" + y;
                    }
                    else {
                        serialBusy.LegendText = " " + y;
                        serialBusy.ToolTip = "CPU " + y;
                    }

                    serialBusy.IsXValueIndexed = true;
                    serialBusy.XValueType = ChartValueType.DateTime;
                    serialBusy.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                    serialBusy.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");

                    var myDataTable = dataTable.AsEnumerable().Where(x => x.Field<UInt64>("CPUNumber").Equals(y)).OrderBy(x => x.Field<DateTime>("Date & Time")).CopyToDataTable();
                    //loop through each date and check if we not missing any data.
                    for (var start = startTime; start < endTime; start = start.AddSeconds(interval)) {
                        if (myDataTable.AsEnumerable().Any(x => x.Field<DateTime>("Date & Time").Equals(start))) {
                            var averageValue = myDataTable.AsEnumerable().Where(x => x.Field<DateTime>("Date & Time").Equals(start)).Average(x => x.Field<double>("Queue"));
                            var dpAdjust = new DataPoint();
                            dpAdjust.XValue = start.ToOADate();
                            dpAdjust.YValues[0] = averageValue;
                            serialBusy.Points.Add(dpAdjust);
                        }
                        else {
                            var dpAdjust = new DataPoint();
                            dpAdjust.XValue = start.ToOADate();
                            dpAdjust.YValues[0] = 0;
                            serialBusy.Points.Add(dpAdjust);
                        }
                    }

                    chart.Series.Add(serialBusy);
                }
            }
            catch {
            }
            chart.ChartAreas.Add(chartarea);

            chart.ImageType = ChartImageType.Jpeg;
            //chart.ImageUrl = "\\TempImg\\ChartPic_#SEQ(100,5)";
            if (!Directory.Exists(path + "\\TempImg\\")) {
                Directory.CreateDirectory(path + "\\TempImg\\");
            }
            string saveLocation = path + "\\TempImg\\ChartPicBusy_" + DateTime.Now.Ticks + ".jpg";
            //Save the chart image.
            chart.SaveImage(saveLocation);
            return saveLocation;
        }

        private string CreateApplicationIntervalCPUBusyDundasChart(string systemSerial, DateTime[] dataDate, DateTime startTime, DateTime endTime, string path, long interval) {
            //Force all datetime to be in US format.
            System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
            var chart = new Chart();
            chart.Width = 900;
            chart.Height = 250;
            chart.Palette = ChartColorPalette.EarthTones;
            var chartarea = new ChartArea();
            chartarea.AxisY.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisX.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisY.IsLabelAutoFit = false;
            chartarea.AxisX.IsLabelAutoFit = false;
            chartarea.AxisY.LabelStyle.Format = "{#}%";

            chartarea.AxisY.MajorGrid.Enabled = true;
            chartarea.BorderWidth = 0;
            //chartarea.AxisY.Interval = 10;
            chartarea.AxisY.Title = "CPU Busy (%)";

            //AxisY2
            chartarea.AxisY2.Maximum = Double.NaN;
            chartarea.AxisY2.Enabled = AxisEnabled.True;
            chartarea.AxisY2.Minimum = 0;
            chartarea.AxisY2.RoundAxisValues();
            chartarea.AxisY2.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisY2.TitleFont = new Font("Calibri", 8);
            chartarea.AxisY2.IsLabelAutoFit = false;
            chartarea.AxisY2.LabelStyle.Format = "#,0";
            chartarea.AxisY2.Title = "Disk IOs/sec";
            chartarea.AxisY2.MajorGrid.Enabled = false;

            //Display Axis every 30 mins.
            if (interval == 1800)
                chartarea.AxisX.Interval = 1;
            else {
                if (interval > 1800) {
                    var newInterval = interval / 1800;
                    chartarea.AxisX.Interval = (int)newInterval;
                }
                else {
                    var newInterval = 1800 / interval;
                    chartarea.AxisX.Interval = (int)newInterval;
                }
            }
            chartarea.AxisX.LabelStyle.Angle = -60;
            if (dataDate.Length == 1) {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.MajorTickMark.Enabled = false;
                chartarea.AxisX.LabelStyle.Format = "HH:mm";
            }
            else if (dataDate.Length > 1 && dataDate.Length <= 7) {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.MajorTickMark.Enabled = false;
                chartarea.AxisX.LabelStyle.Format = "HH:mm";
            }
            else if (dataDate.Length <= 14) {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.IntervalType = DateTimeIntervalType.Days;
                chartarea.AxisX.IntervalOffset = 0;
                chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Auto;
                chartarea.AxisX.LabelStyle.Format = "MMM/dd/yy\ndddd";
            }
            else {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.IntervalType = DateTimeIntervalType.Days;
                chartarea.AxisX.IntervalOffset = 0;
                chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Auto;
                chartarea.AxisX.LabelStyle.Format = "MMM/dd/yy";
            }
            chartarea.AxisY.TitleFont = new Font("Calibri", 8);
            chartarea.AxisY.MajorGrid.LineColor = Color.Silver;
            chartarea.AxisX.MajorGrid.LineColor = Color.Silver;

            //Legend format.
            chart.Legends.Clear();
            chart.Legends.Add("Default");
            chart.Legends[0].LegendStyle = LegendStyle.Row;
            chart.Legends[0].IsDockedInsideChartArea = true;
            chart.Legends[0].Alignment = StringAlignment.Center;
            chart.Legends[0].Font = new Font("Calibri", 6);
            chart.Legends[0].BorderDashStyle = ChartDashStyle.NotSet;
            chart.Legends[0].Docking = Docking.Bottom;

            //Get data from detail table.
            var databaseMapService = new DatabaseMappingService(ConnectionString);
            string newConnectionString = databaseMapService.GetConnectionStringFor(systemSerial);
            
            var cpuEntityTable = new CPUEntityTable(newConnectionString);
            var dataTable = cpuEntityTable.GetApplicationBusy(startTime, endTime);


            try {
                var subData = dataTable.AsEnumerable().Select(x => x.Field<string>("ApplicationName")).Distinct();
                foreach (var y in subData) {
                    var serialBusy = new Series("DiskIO" + y);
                    serialBusy.ChartType = SeriesChartType.StackedColumn;
                    serialBusy["PointWidth"] = "0.8";
                    // Set series tooltips
                    serialBusy.LegendText = y;

                    serialBusy.IsXValueIndexed = true;
                    serialBusy.XValueType = ChartValueType.DateTime;
                    serialBusy.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                    serialBusy.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Secondary");

                    var myDataTable = dataTable.AsEnumerable().Where(x => x.Field<string>("ApplicationName").Equals(y)).OrderBy(x => x.Field<DateTime>("Date & Time")).CopyToDataTable();
                    //populate all the data.
                    for (var start = startTime; start < endTime; start = start.AddSeconds(interval)) {
                        if (myDataTable.AsEnumerable().Any(x => x.Field<DateTime>("Date & Time").Equals(start))) {
                            var averageValue = myDataTable.AsEnumerable().Where(x => x.Field<DateTime>("Date & Time").Equals(start)).Average(x => x.Field<double>("DiskIO"));
                            var dpAdjust = new DataPoint();
                            dpAdjust.XValue = Convert.ToDateTime(start).ToOADate();
                            dpAdjust.YValues[0] = averageValue;
                            serialBusy.Points.Add(dpAdjust);
                        }
                        else {
                            var dpAdjust = new DataPoint();
                            dpAdjust.XValue = Convert.ToDateTime(start).ToOADate();
                            dpAdjust.YValues[0] = 0;
                            serialBusy.Points.Add(dpAdjust);
                        }
                    }
                    chart.Series.Add(serialBusy);
                }
            }
            catch (Exception ex) {
                Console.WriteLine(ex.Message);
            }

            try {
                var subData = dataTable.AsEnumerable().Select(x => x.Field<string>("ApplicationName")).Distinct();
                foreach (var y in subData) {
                    var serialBusy = new Series("Busy" + y);
                    serialBusy.ChartType = SeriesChartType.Spline;
                    serialBusy["PointWidth"] = "0.8";
                    // Set series tooltips
                    serialBusy.LegendText = y;

                    serialBusy.IsXValueIndexed = true;
                    serialBusy.XValueType = ChartValueType.DateTime;
                    serialBusy.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                    serialBusy.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");

                    var myDataTable = dataTable.AsEnumerable().Where(x => x.Field<string>("ApplicationName").Equals(y)).OrderBy(x => x.Field<DateTime>("Date & Time")).CopyToDataTable();
                    //populate all the data.
                    for (var start = startTime; start < endTime; start = start.AddSeconds(interval)) {
                        if (myDataTable.AsEnumerable().Any(x => x.Field<DateTime>("Date & Time").Equals(start))) {
                            var averageValue = myDataTable.AsEnumerable().Where(x => x.Field<DateTime>("Date & Time").Equals(start)).Average(x => x.Field<double>("CpuBusy"));
                            var dpAdjust = new DataPoint();
                            dpAdjust.XValue = Convert.ToDateTime(start).ToOADate();
                            dpAdjust.YValues[0] = averageValue;
                            serialBusy.Points.Add(dpAdjust);
                        }
                        else {
                            var dpAdjust = new DataPoint();
                            dpAdjust.XValue = Convert.ToDateTime(start).ToOADate();
                            dpAdjust.YValues[0] = 0;
                            serialBusy.Points.Add(dpAdjust);
                        }
                    }
                    chart.Series.Add(serialBusy);
                }
            }
            catch (Exception ex) {
                Console.WriteLine(ex.Message);
            }

            chart.ChartAreas.Add(chartarea);

            chart.ImageType = ChartImageType.Jpeg;
            //chart.ImageUrl = "\\TempImg\\ChartPic_#SEQ(100,5)";
            if (!Directory.Exists(path + "\\TempImg\\")) {
                Directory.CreateDirectory(path + "\\TempImg\\");
            }
            string saveLocation = path + "\\TempImg\\ChartPicApplicationBusy_" + DateTime.Now.Ticks + ".jpg";
            //Save the chart image.
            chart.SaveImage(saveLocation);
            return saveLocation;
        }

        private string CreateIntervalIPUBusyDundasChart(string systemSerial, DateTime[] dataDate, DateTime startTime, DateTime endTime, string path, long interval) {
            //Force all datetime to be in US format.
            System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
            string dateFormat = "yyyy-MM-dd HH:mm:ss";
            var chart = new Chart();
            chart.Width = 900;
            chart.Height = 250;
            chart.Palette = ChartColorPalette.EarthTones;
            var chartarea = new ChartArea();
            chartarea.AxisY.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisX.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisY.IsLabelAutoFit = false;
            chartarea.AxisX.IsLabelAutoFit = false;
            chartarea.AxisY.LabelStyle.Format = "{#}%";

            chartarea.AxisY.MajorGrid.Enabled = true;
            chartarea.BorderWidth = 0;
            chartarea.AxisY.Maximum = 100;
            chartarea.AxisY.Interval = 10;
            chartarea.AxisY.Title = "IPU Busy (%)";
            //Display Axis every 30 mins.
            if (interval == 1800)
                chartarea.AxisX.Interval = 1;
            else {
                if (interval > 1800) {
                    var newInterval = interval / 1800;
                    chartarea.AxisX.Interval = (int)newInterval;
                }
                else {
                    var newInterval = 1800 / interval;
                    chartarea.AxisX.Interval = (int)newInterval;
                }
            }
            chartarea.AxisX.LabelStyle.Angle = -60;
            if (dataDate.Length == 1) {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.MajorTickMark.Enabled = false;
                chartarea.AxisX.LabelStyle.Format = "HH:mm";
            }
            else if (dataDate.Length > 1 && dataDate.Length <= 7) {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.MajorTickMark.Enabled = false;
                chartarea.AxisX.LabelStyle.Format = "HH:mm";
            }
            else if (dataDate.Length <= 14) {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.IntervalType = DateTimeIntervalType.Days;
                chartarea.AxisX.IntervalOffset = 0;
                chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Auto;
                chartarea.AxisX.LabelStyle.Format = "MMM/dd/yy\ndddd";
            }
            else {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.IntervalType = DateTimeIntervalType.Days;
                chartarea.AxisX.IntervalOffset = 0;
                chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Auto;
                chartarea.AxisX.LabelStyle.Format = "MMM/dd/yy";
            }
            chartarea.AxisY.TitleFont = new Font("Calibri", 8);
            chartarea.AxisY.MajorGrid.LineColor = Color.Silver;
            chartarea.AxisX.MajorGrid.LineColor = Color.Silver;

            //Legend format.
            chart.Legends.Clear();
            chart.Legends.Add("Default");
            chart.Legends[0].LegendStyle = LegendStyle.Row;
            chart.Legends[0].IsDockedInsideChartArea = true;
            chart.Legends[0].Alignment = StringAlignment.Center;
            chart.Legends[0].Font = new Font("Calibri", 6);
            chart.Legends[0].BorderDashStyle = ChartDashStyle.NotSet;
            chart.Legends[0].Docking = Docking.Bottom;

            //Get data from detail table.
            var databaseMapService = new DatabaseMappingService(ConnectionString);
            string newConnectionString = databaseMapService.GetConnectionStringFor(systemSerial);


            //Get TableNames.
            var databaseCheck = new Database(newConnectionString, "");
            var databaseName = Helper.FindKeyName(newConnectionString, "DATABASE");

            var cpuTrendTable = new CPUTrendTable(newConnectionString);
            var dataTable = cpuTrendTable.GetIPUBusyInterval(startTime.ToString(dateFormat), endTime.ToString(dateFormat));
            
            DataTable converted = new DataTable();
            converted.Columns.Add("Date & Time");
            converted.Columns.Add("Busy");
            converted.Columns.Add("CPUIPU");
            converted.Columns[0].DataType = typeof(DateTime);
            converted.Columns[1].DataType = typeof(double);
            converted.Columns[2].DataType = typeof(string);
            for (int i = 0; i < dataTable.Rows.Count; i++) {
                object[] o = { dataTable.Rows[i][0],
                    dataTable.Rows[i][1],
                    dataTable.Rows[i][2] + "-" + dataTable.Rows[i][3] };
                converted.Rows.Add(o);
            }
            
            try {
                var subData = converted.AsEnumerable().Select(x => x.Field<string>("CPUIPU")).Distinct();
                foreach (var y in subData) {
                    var serialBusy = new Series("CPUIPU" + y);
                    serialBusy.ChartType = SeriesChartType.Spline;
                    serialBusy["PointWidth"] = "0.8";
                    // Set series tooltips
                    var split = y.ToString().Split('-');
                    var cpu = int.Parse(split[0]);
                    var ipu = int.Parse(split[1]);

                    if (cpu < 10) {
                        if (ipu < 10) {
                            serialBusy.LegendText = "0" + cpu + "-" + "0" + (ipu - 1);
                        }
                        else {
                            serialBusy.LegendText = "0" + cpu + "-" + (ipu - 1);
                        }
                    }
                    else {
                        if (ipu < 10) {
                            serialBusy.LegendText = cpu + "-" + "0" + (ipu - 1);
                        }
                        else {
                            serialBusy.LegendText = cpu + "-" + (ipu - 1);
                        }
                    }
                    serialBusy.IsXValueIndexed = true;
                    serialBusy.XValueType = ChartValueType.DateTime;
                    serialBusy.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                    serialBusy.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");

                    var myDataTable = converted.AsEnumerable().Where(x => x.Field<string>("CPUIPU").Equals(y)).OrderBy(x => x.Field<DateTime>("Date & Time")).CopyToDataTable();
                    //populate all the data.
                    for (var start = startTime; start < endTime; start = start.AddSeconds(interval)) {
                        if (myDataTable.AsEnumerable().Any(x => x.Field<DateTime>("Date & Time").Equals(start))) {
                            var averageValue = myDataTable.AsEnumerable().Where(x => x.Field<DateTime>("Date & Time").Equals(start)).Average(x => x.Field<double>("Busy"));
                            var dpAdjust = new DataPoint();
                            dpAdjust.XValue = Convert.ToDateTime(start).ToOADate();
                            dpAdjust.YValues[0] = averageValue;
                            serialBusy.Points.Add(dpAdjust);
                        }
                        else {
                            var dpAdjust = new DataPoint();
                            dpAdjust.XValue = Convert.ToDateTime(start).ToOADate();
                            dpAdjust.YValues[0] = 0;
                            serialBusy.Points.Add(dpAdjust);
                        }
                    }
                    chart.Series.Add(serialBusy);
                }
            }
            catch (Exception ex) {
                Console.WriteLine(ex.Message);
            }

            chart.ChartAreas.Add(chartarea);

            chart.ImageType = ChartImageType.Jpeg;
            //chart.ImageUrl = "\\TempImg\\ChartPic_#SEQ(100,5)";
            if (!Directory.Exists(path + "\\TempImg\\")) {
                Directory.CreateDirectory(path + "\\TempImg\\");
            }
            string saveLocation = path + "\\TempImg\\ChartPicBusy_" + DateTime.Now.Ticks + ".jpg";
            //Save the chart image.
            chart.SaveImage(saveLocation);
            return saveLocation;
        }

        private string CreateIntervalIPUQueueDundasChart(string systemSerial, DateTime[] dataDate, DateTime startTime, DateTime endTime, string path, long interval) {
            //Force all datetime to be in US format.
            System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
            string dateFormat = "yyyy-MM-dd HH:mm:ss"; var chart = new Chart();
            chart.Width = 900;
            chart.Height = 250;
            chart.Palette = ChartColorPalette.EarthTones;
            var chartarea = new ChartArea();
            chartarea.AxisY.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisX.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisY.IsLabelAutoFit = false;
            chartarea.AxisX.IsLabelAutoFit = false;
            //chartarea.AxisY.LabelStyle.Format = "N0";

            chartarea.AxisY.MajorGrid.Enabled = true;
            chartarea.BorderWidth = 0;
            chartarea.AxisY.Title = "IPU Queue Length";
            //Display Axis every 30 mins.
            if (interval == 1800)
                chartarea.AxisX.Interval = 1;
            else {
                if (interval > 1800) {
                    var newInterval = interval / 1800;
                    chartarea.AxisX.Interval = (int)newInterval;
                }
                else {
                    var newInterval = 1800 / interval;
                    chartarea.AxisX.Interval = (int)newInterval;
                }
            }
            chartarea.AxisX.LabelStyle.Angle = -60;
            if (dataDate.Length == 1) {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.MajorTickMark.Enabled = false;
                chartarea.AxisX.LabelStyle.Format = "HH:mm";
            }
            else if (dataDate.Length > 1 && dataDate.Length <= 7) {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.MajorTickMark.Enabled = false;
                chartarea.AxisX.LabelStyle.Format = "HH:mm";
            }
            else if (dataDate.Length <= 14) {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.IntervalType = DateTimeIntervalType.Days;
                chartarea.AxisX.IntervalOffset = 0;
                chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Auto;
                chartarea.AxisX.LabelStyle.Format = "MMM/dd/yy\ndddd";
            }
            else {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.IntervalType = DateTimeIntervalType.Days;
                chartarea.AxisX.IntervalOffset = 0;
                chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Auto;
                chartarea.AxisX.LabelStyle.Format = "MMM/dd/yy";
            }
            chartarea.AxisY.TitleFont = new Font("Calibri", 8);
            chartarea.AxisY.MajorGrid.LineColor = Color.Silver;
            chartarea.AxisX.MajorGrid.LineColor = Color.Silver;

            //Legend format.
            chart.Legends.Clear();
            chart.Legends.Add("Default");
            chart.Legends[0].LegendStyle = LegendStyle.Row;
            chart.Legends[0].IsDockedInsideChartArea = true;
            chart.Legends[0].Alignment = StringAlignment.Center;
            chart.Legends[0].Font = new Font("Calibri", 6);
            chart.Legends[0].BorderDashStyle = ChartDashStyle.NotSet;
            chart.Legends[0].Docking = Docking.Bottom;
            chart.Legends[0].MaximumAutoSize = 100;

            //Get data from detail table.
            var databaseMapService = new DatabaseMappingService(ConnectionString);
            string newConnectionString = databaseMapService.GetConnectionStringFor(systemSerial);


            //Get TableNames.
            var databaseCheck = new Database(newConnectionString, "");
            var databaseName = Helper.FindKeyName(newConnectionString, "DATABASE");
            var cpuTrendTable = new CPUTrendTable(newConnectionString);
            var dataTable = cpuTrendTable.GetIPUQueueInterval(startTime.ToString(dateFormat), endTime.ToString(dateFormat));

            DataTable converted = new DataTable();
            converted.Columns.Add("Date & Time");
            converted.Columns.Add("Busy");
            converted.Columns.Add("CPUIPU");
            converted.Columns[0].DataType = typeof(DateTime);
            converted.Columns[1].DataType = typeof(double);
            converted.Columns[2].DataType = typeof(string);
            for (int i = 0; i < dataTable.Rows.Count; i++)
            {
                object[] o = { dataTable.Rows[i][0],
                    dataTable.Rows[i][1],
                    dataTable.Rows[i][2] + "-" + dataTable.Rows[i][3] };
                converted.Rows.Add(o);
            }


            try
            {
                var subData = converted.AsEnumerable().Select(x => x.Field<string>("CPUIPU")).Distinct();
                foreach (var y in subData) {
                    var serialBusy = new Series("CPU" + y);
                    serialBusy.ChartType = SeriesChartType.Spline;
                    serialBusy["PointWidth"] = "0.8";
                    // Set series tooltips
                    var split = y.ToString().Split('-');
                    var cpu = int.Parse(split[0]);
                    var ipu = int.Parse(split[1]);

                    if (cpu < 10) {
                        if (ipu < 10) {
                            serialBusy.LegendText = "0" + cpu + "-" + "0" + (ipu - 1);
                        }
                        else {
                            serialBusy.LegendText = "0" + cpu + "-" + (ipu - 1);
                        }
                    }
                    else {
                        if (ipu < 10) {
                            serialBusy.LegendText = cpu + "-" + "0" + (ipu - 1);
                        }
                        else {
                            serialBusy.LegendText = cpu + "-" + (ipu - 1);
                        }
                    }

                    serialBusy.IsXValueIndexed = true;
                    serialBusy.XValueType = ChartValueType.DateTime;
                    serialBusy.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                    serialBusy.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");

                    var myDataTable = converted.AsEnumerable().Where(x => x.Field<string>("CPUIPU").Equals(y)).OrderBy(x => x.Field<DateTime>("Date & Time")).CopyToDataTable();
                    //loop through each date and check if we not missing any data.
                    for (var start = startTime; start < endTime; start = start.AddSeconds(interval)) {
                        if (myDataTable.AsEnumerable().Any(x => x.Field<DateTime>("Date & Time").Equals(start))) {
                            var averageValue = myDataTable.AsEnumerable().Where(x => x.Field<DateTime>("Date & Time").Equals(start)).Average(x => x.Field<double>("Busy"));
                            var dpAdjust = new DataPoint();
                            dpAdjust.XValue = start.ToOADate();
                            dpAdjust.YValues[0] = averageValue;
                            serialBusy.Points.Add(dpAdjust);
                        }
                        else {
                            var dpAdjust = new DataPoint();
                            dpAdjust.XValue = start.ToOADate();
                            dpAdjust.YValues[0] = 0;
                            serialBusy.Points.Add(dpAdjust);
                        }
                    }

                    chart.Series.Add(serialBusy);
                }
            }
            catch (Exception e) {
                Console.WriteLine(e.Message);
            }
            chart.ChartAreas.Add(chartarea);
            chart.ImageType = ChartImageType.Jpeg;
            if (!Directory.Exists(path + "\\TempImg\\")) {
                Directory.CreateDirectory(path + "\\TempImg\\");
            }
            string saveLocation = path + "\\TempImg\\ChartPicBusy_" + DateTime.Now.Ticks + ".jpg";
            //Save the chart image.
            chart.SaveImage(saveLocation);
            return saveLocation;
        }

        private string CreatePerCPUDundasChart(string systemSerial, int cpuNumber, DateTime[] dataDate, DateTime startTime, DateTime EndTime, string overlay, string path) {
            //Force all datetime to be in US format.
            System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
            var chart = new Chart();
            chart.Width = 650;
            chart.Height = 350;
            chart.Palette = ChartColorPalette.EarthTones;
            var chartarea = new ChartArea();
            chartarea.AxisY.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisX.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisY.IsLabelAutoFit = false;
            chartarea.AxisX.IsLabelAutoFit = false;
            chartarea.AxisY.LabelStyle.Format = "{#}%";

            chartarea.BorderWidth = 0;
            chartarea.AxisY.Maximum = 100;
            chartarea.AxisY.MajorGrid.Enabled = true;
            chartarea.AxisY.Interval = 10;
            chartarea.AxisY.Title = "CPU Busy (%)";
            chartarea.AxisX.Interval = 1;
            chartarea.AxisX.LabelStyle.Angle = -60;
            if (dataDate.Length == 1) {
                chartarea.AxisX.MajorGrid.Enabled = true;
                chartarea.AxisX.MajorTickMark.Enabled = true;
                chartarea.AxisX.IntervalType = DateTimeIntervalType.Hours;
                chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Hours;
                chartarea.AxisX.LabelStyle.Format = "HH:mm";
            }
            else if (dataDate.Length <= 14) {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.IntervalType = DateTimeIntervalType.Days;
                chartarea.AxisX.IntervalOffset = 0;
                chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Auto;
                chartarea.AxisX.LabelStyle.Format = "MMM/dd/yy\ndddd";
            }
            else {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.IntervalType = DateTimeIntervalType.Days;
                chartarea.AxisX.IntervalOffset = 0;
                chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Auto;
                chartarea.AxisX.LabelStyle.Format = "MMM/dd/yy";
            }
            chartarea.AxisY.TitleFont = new Font("Calibri", 8);
            chartarea.AxisY.MajorGrid.LineColor = Color.Silver;
            chartarea.AxisX.MajorGrid.LineColor = Color.Silver;

            if (overlay != "0") {
                chartarea.AxisY2.Enabled = AxisEnabled.True;
                chartarea.AxisY2.LabelStyle.Format = "N0";
                chartarea.AxisY2.Minimum = 0;
                chartarea.AxisY2.RoundAxisValues();
                chartarea.AxisY2.LabelStyle.Font = new Font("Calibri", 8);
                chartarea.AxisY2.TitleFont = new Font("Calibri", 8);
                chartarea.AxisY2.IsLabelAutoFit = false;
                if (overlay == "1") {
                    chartarea.AxisY2.Title = "TMF/sec.";
                }
                else {
                    chartarea.AxisY2.Title = "Disk I-O/sec.";
                }
                chartarea.AxisY2.MajorGrid.Enabled = false;
            }

            //Legend format.
            // Set legend style
            chart.Legends.Clear();
            chart.Legends.Add("Default");

            chart.Legends[0].LegendStyle = LegendStyle.Column;
            // Set legend docking
            chart.Legends[0].IsDockedInsideChartArea = true;
            // Set legend alignment
            chart.Legends[0].Alignment = StringAlignment.Center;
            chart.Legends[0].Font = new Font("Calibri", 7);
            chart.Legends[0].BorderDashStyle = ChartDashStyle.Solid;
            chart.Legends[0].BorderColor = Color.Black;
            chart.Legends[0].BorderWidth = 1;

            //Add title.
            var title = new Title();
            if (dataDate.Length == 1)
                title.Text = "Period for " + dataDate[0].ToLongDateString();
            else
                title.Text = "Period from " + dataDate[0].ToLongDateString() + " through " +
                             dataDate[dataDate.Length - 1].ToLongDateString();

            title.Font = new Font("Calibri", 10);
            chart.Titles.Add(title);
            DataSet dataSet, myDataSet;

            try {
                if (overlay != "0") {
                    dataSet = WalkThroughOverlayLineChart(systemSerial, dataDate, overlay);

                    myDataSet = FormatWalkthroughOverlayDataSet(dataSet, overlay);

                    var serialOver = new Series("Overlay");
                    if (overlay == "1") {
                        serialOver.ChartType = SeriesChartType.SplineArea;
                        serialOver.LegendText = "TMF/sec.";
                        serialOver.Color = Color.LightSteelBlue;
                        serialOver.MarkerSize = 5;
                        serialOver.IsXValueIndexed = true;
                        serialOver.YValueType = ChartValueType.Double;
                        serialOver.XValueType = ChartValueType.DateTime;
                        serialOver.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                        serialOver.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Secondary");
                    }
                    else if (overlay == "2") {
                        serialOver.ChartType = SeriesChartType.SplineArea;
                        serialOver.LegendText = "Disk I-O/sec.";
                        serialOver.Color = Color.LightSteelBlue;
                        serialOver.MarkerSize = 5;
                        serialOver.IsXValueIndexed = true;
                        serialOver.YValueType = ChartValueType.Double;
                        serialOver.XValueType = ChartValueType.DateTime;
                        serialOver.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                        serialOver.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Secondary");
                    }

                    for (int x = 0; x < myDataSet.Tables["SystemUnratedHourly"].Rows.Count; x++) {
                        //TODO: Display collection time only.

                        var dpOver = new DataPoint();

                        if (Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"]) >=
                            startTime &&
                            Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"]) <=
                            EndTime) {
                            dpOver.XValue =
                                Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"])
                                    .ToOADate();
                            if (overlay == "1")
                                dpOver.YValues[0] =
                                    Convert.ToDouble(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["TMF/sec."]);
                            else if (overlay == "2")
                                dpOver.YValues[0] =
                                    Convert.ToDouble(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Disk I-O/sec."]);

                            serialOver.Points.Add(dpOver);
                        }
                        else {
                            dpOver.XValue =
                                Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"])
                                    .ToOADate();
                            dpOver.YValues[0] = 0;

                            serialOver.Points.Add(dpOver);
                        }
                    }

                    chart.Series.Add(serialOver);
                }
            }
            catch {
            }
            try {
                for (int y = 0; y < Convert.ToInt16(cpuNumber); y++) {
                    //int y = 0;

                    dataSet = WalkThroughLineChart(systemSerial, dataDate, y);

                    //if (dataSet.Tables["SystemUnratedHourly"] == null)
                    //    return "";

                    myDataSet = FormatWalkthroughDataSet(dataSet);
                    var serialBusy = new Series("CPU" + y);
                    serialBusy.ChartType = SeriesChartType.Line;
                    serialBusy["PointWidth"] = "0.8";
                    // Set series tooltips
                    if (y < 10) {
                        serialBusy.LegendText = "CPU 0" + y;
                        serialBusy.ToolTip = "CPU 0" + y;
                    }
                    else {
                        serialBusy.LegendText = "CPU " + y;
                        serialBusy.ToolTip = "CPU " + y;
                    }

                    serialBusy.IsXValueIndexed = true;
                    serialBusy.XValueType = ChartValueType.DateTime;
                    serialBusy.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                    serialBusy.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");

                    //populate all the data.
                    for (int x = 0; x < myDataSet.Tables["SystemUnratedHourly"].Rows.Count; x++) {
                        if (Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"]) >=
                            startTime &&
                            Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"]) <=
                            EndTime) {
                            var dpAdjust = new DataPoint();
                            //dpAdjust.LegendText = myDataSet.Tables["SystemUnratedHourly"].Rows[x]["CPU"].ToString();
                            dpAdjust.XValue =
                                Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"])
                                    .ToOADate();
                            dpAdjust.YValues[0] =
                                Convert.ToDouble(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Busy"]);
                            serialBusy.Points.Add(dpAdjust);
                        }
                        else {
                            var dpAdjust = new DataPoint();
                            //dpAdjust.LegendText = myDataSet.Tables["SystemUnratedHourly"].Rows[x]["CPU"].ToString();
                            dpAdjust.XValue =
                                Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"])
                                    .ToOADate();
                            dpAdjust.YValues[0] = 0;
                            serialBusy.Points.Add(dpAdjust);
                        }
                    }

                    chart.Series.Add(serialBusy);
                }
            }
            catch {
            }
            chart.ChartAreas.Add(chartarea);

            chart.ImageType = ChartImageType.Jpeg;
            //chart.ImageUrl = "\\TempImg\\ChartPic_#SEQ(100,5)";
            if (!Directory.Exists(path + "\\TempImg\\")) {
                Directory.CreateDirectory(path + "\\TempImg\\");
            }
            string saveLocation = path + "\\TempImg\\ChartPicBusy_" + DateTime.Now.Ticks + ".jpg";
            //Save the chart image.
            chart.SaveImage(saveLocation);
            return saveLocation;
        }

        private string CreateHiLoDundasChart(string systemSerial, int cpuNumber, DateTime[] dataDate, string overlay,
            string path, bool useTrueTime = false) {
            //Force all datetime to be in US format.
            System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
            var chart = new Chart();
            chart.Width = 650;
            chart.Height = 350;
            chart.Palette = ChartColorPalette.EarthTones;

            var chartarea = new ChartArea();
            chartarea.AxisY.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisX.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisY.LabelStyle.Format = "{#}%";
            chartarea.AxisY.MajorGrid.LineColor = Color.Silver;
            chartarea.AxisX.MajorGrid.LineColor = Color.Silver;
            chartarea.AxisX.IsStartedFromZero = false;
            chartarea.BorderWidth = 0;
            chartarea.AxisY.Maximum = 100;
            chartarea.AxisY.MajorGrid.Enabled = true;
            chartarea.AxisY.Interval = 10;
            chartarea.AxisY.Title = "CPU Busy (%)";
            chartarea.AxisY.TitleFont = new Font("Calibri", 8);

            chartarea.AxisX.Interval = 1;
            chartarea.AxisX.LabelStyle.Angle = -60;
            chartarea.AxisX.IsLabelAutoFit = false;
            chartarea.AxisY.IsLabelAutoFit = false;
            if (dataDate.Length == 1 || useTrueTime) {
                chartarea.AxisX.Interval = 1;
                chartarea.AxisX.MajorGrid.Enabled = true;
                chartarea.AxisX.MajorTickMark.Enabled = true;
                chartarea.AxisX.IntervalType = DateTimeIntervalType.Hours;
                chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Hours;
                chartarea.AxisX.LabelStyle.Format = "HH:mm";
            }
            else if (dataDate.Length <= 14) {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.IntervalType = DateTimeIntervalType.Days;
                chartarea.AxisX.IntervalOffset = 0;
                chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Auto;
                chartarea.AxisX.LabelStyle.Format = "MMM/dd/yy\ndddd";
            }
            else {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.IntervalType = DateTimeIntervalType.Days;
                chartarea.AxisX.IntervalOffset = 0;
                chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Auto;
                chartarea.AxisX.LabelStyle.Format = "MMM/dd/yy";
            }
            //chartarea.Area3DStyle.Enable3D = true;
            if (overlay != "0") {
                chartarea.AxisY2.Enabled = AxisEnabled.True;
                chartarea.AxisY2.LabelStyle.Format = "N0";
                chartarea.AxisY2.Minimum = 0;
                chartarea.AxisY2.RoundAxisValues();
                chartarea.AxisY2.LabelStyle.Font = new Font("Calibri", 8);
                chartarea.AxisY2.TitleFont = new Font("Calibri", 8);
                chartarea.AxisY2.IsLabelAutoFit = false;
                if (overlay == "1")
                    chartarea.AxisY2.Title = "TMF/sec.";
                else
                    chartarea.AxisY2.Title = "Disk I-O/sec.";
                chartarea.AxisY2.MajorGrid.Enabled = false;
            }
            //Legend format.
            // Set legend style
            chart.Legends.Clear();
            chart.Legends.Add("Default");

            chart.Legends[0].LegendStyle = LegendStyle.Row;
            // Set legend docking
            chart.Legends[0].IsDockedInsideChartArea = true;
            // Set legend alignment
            chart.Legends[0].Alignment = StringAlignment.Center;
            chart.Legends[0].Docking = Docking.Top;
            chart.Legends[0].Font = new Font("Calibri", 8);
            chart.Legends[0].BorderDashStyle = ChartDashStyle.Solid;
            chart.Legends[0].BorderColor = Color.Black;
            chart.Legends[0].BorderWidth = 1;

            //Add title.
            var title = new Title();
            if (useTrueTime) {
                title.Text = "Period from " + dataDate[0].ToString("MMMM dd, yyy HH:mm") + " through " +
                             dataDate[dataDate.Length - 1].ToString("MMMM dd, yyy HH:mm");
            }
            else {
                if (dataDate.Length == 1)
                    title.Text = "Period for " + dataDate[0].ToLongDateString();
                else
                    title.Text = "Period from " + dataDate[0].ToLongDateString() + " through " +
                                 dataDate[dataDate.Length - 1].ToLongDateString();
            }

            title.Font = new Font("Calibri", 10);
            chart.Titles.Add(title);

            try {
                DataSet dataSet = WalkThroughHiLoChart(systemSerial, dataDate, overlay);

                DataSet myDataSet = FormatWalkthroughHiLoDataSet(dataSet, overlay);
                if (myDataSet.Tables["SystemUnratedHourly"].Rows.Count == 0)
                    return "";

                var serialBusy = new Series("Range");

                serialBusy.ChartType = SeriesChartType.Candlestick;
                //serialBusy["PointWidth"] = "0.8";
                serialBusy.YValuesPerPoint = 4;
                //serialBusy.LegendText = "High";
                serialBusy.Color = Color.Black;

                //serialBusy.MarkerStyle = MarkerStyle.Cross;
                serialBusy.IsXValueIndexed = true;
                serialBusy.XValueType = ChartValueType.DateTime;
                serialBusy.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                serialBusy.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");

                var serialHi = new Series("High");

                serialHi.ChartType = SeriesChartType.Point;
                //serialHi["PointWidth"] = "0.8";
                serialHi.MarkerStyle = MarkerStyle.Circle;
                serialHi.LegendText = "High";
                serialHi.Color = Color.IndianRed;
                serialHi.MarkerSize = 8;
                // Set series tooltips
                //serialHi.ToolTip = "#VALY";
                serialHi.IsXValueIndexed = true;
                serialHi.YValueType = ChartValueType.Double;
                serialHi.XValueType = ChartValueType.DateTime;
                serialHi.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                serialHi.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");

                var serialAvg = new Series("Average");

                serialAvg.ChartType = SeriesChartType.Point;
                //serialAvg["PointWidth"] = "0.8";
                serialAvg.MarkerStyle = MarkerStyle.Triangle;
                serialAvg.LegendText = "Average";
                serialAvg.Color = Color.Goldenrod;
                serialAvg.MarkerSize = 8;
                // Set series tooltips
                //serialAvg.ToolTip = "#VALY";
                serialAvg.IsXValueIndexed = true;
                serialAvg.YValueType = ChartValueType.Double;
                serialAvg.XValueType = ChartValueType.DateTime;
                serialAvg.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                serialAvg.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");

                var serialLo = new Series("Low");

                serialLo.ChartType = SeriesChartType.Point;
                //serialLo["PointWidth"] = "0.8";
                serialLo.LegendText = "Low";
                serialLo.Color = Color.SeaGreen;
                serialLo.MarkerStyle = MarkerStyle.Circle;
                serialLo.MarkerSize = 8;
                // Set series tooltips
                //serialLo.ToolTip = "#VALY";
                serialLo.IsXValueIndexed = true;
                serialLo.YValueType = ChartValueType.Double;
                serialLo.XValueType = ChartValueType.DateTime;
                serialLo.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                serialLo.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");

                var serialOver = new Series("Overlay");
                if (overlay == "1") {
                    serialOver.ChartType = SeriesChartType.SplineArea;
                    serialOver.LegendText = "TMF/sec.";
                    serialOver.Color = Color.LightSteelBlue;
                    serialOver.IsXValueIndexed = true;
                    serialOver.YValueType = ChartValueType.Double;
                    serialOver.XValueType = ChartValueType.DateTime;
                    serialOver.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                    serialOver.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Secondary");
                }
                else if (overlay == "2") {
                    serialOver.ChartType = SeriesChartType.SplineArea;
                    serialOver.LegendText = "Disk I-O/sec.";
                    serialOver.Color = Color.LightSteelBlue;
                    serialOver.IsXValueIndexed = true;
                    serialOver.YValueType = ChartValueType.Double;
                    serialOver.XValueType = ChartValueType.DateTime;
                    serialOver.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                    serialOver.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Secondary");
                }

                if (myDataSet.Tables["SystemUnratedHourly"].Rows.Count == 0)
                    return "";

                //populate all the data.
                for (int x = 0; x < myDataSet.Tables["SystemUnratedHourly"].Rows.Count; x++) {
                    if (useTrueTime) {
                        if (Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"]) >=
                            dataDate[0] &&
                            Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"]) <=
                            dataDate[1]) {
                            #region Populate DataPoints

                            var dpAdjust = new DataPoint();
                            var dpAvg = new DataPoint();
                            var dpLo = new DataPoint();
                            var dpOver = new DataPoint();

                            dpAdjust.XValue =
                                Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"])
                                    .ToOADate();
                            if (myDataSet.Tables["SystemUnratedHourly"].Rows[x]["CPUHi"].ToString() != "") {
                                dpAdjust.YValues[0] =
                                    Convert.ToDouble(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["BusyHi"]);
                                dpAdjust.ToolTip =
                                    Math.Round(
                                        Convert.ToDouble(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["BusyHi"]), 1) +
                                    "% CPU " + myDataSet.Tables["SystemUnratedHourly"].Rows[x]["CPUHi"];
                            }
                            else {
                                dpAdjust.YValues = null;
                                dpAdjust.IsEmpty = true;
                            }
                            dpAvg.XValue =
                                Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"])
                                    .ToOADate();
                            if (myDataSet.Tables["SystemUnratedHourly"].Rows[x]["CPUHi"].ToString() != "") {
                                dpAvg.YValues[0] =
                                    Convert.ToDouble(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["BusyAvg"]);
                                dpAvg.ToolTip =
                                    Math.Round(
                                        Convert.ToDouble(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["BusyAvg"]), 1) +
                                    "%";
                            }
                            else {
                                dpAvg.YValues = null;
                                dpAvg.IsEmpty = true;
                            }
                            dpLo.XValue =
                                Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"])
                                    .ToOADate();
                            if (myDataSet.Tables["SystemUnratedHourly"].Rows[x]["CPUHi"].ToString() != "") {
                                dpLo.YValues[0] =
                                    Convert.ToDouble(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["BusyLo"]);
                                dpLo.ToolTip =
                                    Math.Round(
                                        Convert.ToDouble(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["BusyLo"]), 1) +
                                    "% CPU " + myDataSet.Tables["SystemUnratedHourly"].Rows[x]["CPULo"];
                            }
                            else {
                                dpLo.YValues = null;
                                dpLo.IsEmpty = true;
                            }
                            if (overlay != "0") {
                                dpOver.XValue =
                                    Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"])
                                        .ToOADate();
                                dpOver.YValues[0] =
                                    Convert.ToDouble(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Overlay"]);
                                serialOver.Points.Add(dpOver);
                            }

                            if (myDataSet.Tables["SystemUnratedHourly"].Rows[x]["CPUHi"].ToString() != "") {
                                serialBusy.Points.AddXY(
                                    Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"])
                                        .ToOADate(),
                                    Convert.ToDouble(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["BusyHi"]),
                                    Convert.ToDouble(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["BusyLo"]),
                                    0.0,
                                    0.0
                                    );
                            }
                            else {
                                serialBusy.Points.AddXY(
                                    Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"])
                                        .ToOADate(),
                                    0.0,
                                    0.0,
                                    0.0,
                                    0.0
                                    );
                            }
                            serialHi.Points.Add(dpAdjust);
                            serialAvg.Points.Add(dpAvg);
                            serialLo.Points.Add(dpLo);

                            #endregion
                        }
                    }
                    else {
                        #region Populate DataPoints

                        var dpAdjust = new DataPoint();
                        var dpAvg = new DataPoint();
                        var dpLo = new DataPoint();
                        var dpOver = new DataPoint();

                        dpAdjust.XValue =
                            Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"])
                                .ToOADate();
                        if (myDataSet.Tables["SystemUnratedHourly"].Rows[x]["CPUHi"].ToString() != "") {
                            dpAdjust.YValues[0] =
                                Convert.ToDouble(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["BusyHi"]);
                            dpAdjust.ToolTip =
                                Math.Round(Convert.ToDouble(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["BusyHi"]),
                                    1) + "% CPU " + myDataSet.Tables["SystemUnratedHourly"].Rows[x]["CPUHi"];
                        }
                        else {
                            dpAdjust.YValues = null;
                            dpAdjust.IsEmpty = true;
                        }
                        dpAvg.XValue =
                            Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"])
                                .ToOADate();
                        if (myDataSet.Tables["SystemUnratedHourly"].Rows[x]["CPUHi"].ToString() != "") {
                            dpAvg.YValues[0] =
                                Convert.ToDouble(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["BusyAvg"]);
                            dpAvg.ToolTip =
                                Math.Round(
                                    Convert.ToDouble(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["BusyAvg"]), 1) +
                                "%";
                        }
                        else {
                            dpAvg.YValues = null;
                            dpAvg.IsEmpty = true;
                        }
                        dpLo.XValue =
                            Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"])
                                .ToOADate();
                        if (myDataSet.Tables["SystemUnratedHourly"].Rows[x]["CPUHi"].ToString() != "") {
                            dpLo.YValues[0] = Convert.ToDouble(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["BusyLo"]);
                            dpLo.ToolTip =
                                Math.Round(Convert.ToDouble(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["BusyLo"]),
                                    1) + "% CPU " + myDataSet.Tables["SystemUnratedHourly"].Rows[x]["CPULo"];
                        }
                        else {
                            dpLo.YValues = null;
                            dpLo.IsEmpty = true;
                        }
                        if (overlay != "0") {
                            dpOver.XValue =
                                Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"])
                                    .ToOADate();
                            dpOver.YValues[0] =
                                Convert.ToDouble(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Overlay"]);
                            serialOver.Points.Add(dpOver);
                        }

                        if (myDataSet.Tables["SystemUnratedHourly"].Rows[x]["CPUHi"].ToString() != "") {
                            serialBusy.Points.AddXY(
                                Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"])
                                    .ToOADate(),
                                Convert.ToDouble(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["BusyHi"]),
                                Convert.ToDouble(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["BusyLo"]),
                                0.0,
                                0.0
                                );
                        }
                        else {
                            serialBusy.Points.AddXY(
                                Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"])
                                    .ToOADate(),
                                0.0,
                                0.0,
                                0.0,
                                0.0
                                );
                        }
                        serialHi.Points.Add(dpAdjust);
                        serialAvg.Points.Add(dpAvg);
                        serialLo.Points.Add(dpLo);

                        #endregion
                    }
                }

                if (overlay != "0")
                    chart.Series.Add(serialOver);
                chart.Series.Add(serialBusy);
                chart.Series.Add(serialHi);
                chart.Series.Add(serialAvg);
                chart.Series.Add(serialLo);

                chart.Series["Range"].IsVisibleInLegend = false;
                chart.ChartAreas.Add(chartarea);
                chart.ImageType = ChartImageType.Jpeg;
                //chart.ImageUrl = "\\TempImg\\ChartPic_#SEQ(100,5)";
            }
            catch {
                return "";
            }

            string saveLocation = path + "\\TempImg\\ChartPicHiLo_" + DateTime.Now.Ticks + ".jpg";
            //Save the chart image.
            chart.SaveImage(saveLocation);
            return saveLocation;
        }

        private string CreateHiLoDundasChart(string systemSerial, int cpuNumber, DateTime[] dataDate, DateTime startTime,
            DateTime EndTime, string overlay, string path) {
            //Force all datetime to be in US format.
            System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
            var chart = new Chart();
            chart.Width = 650;
            chart.Height = 350;
            chart.Palette = ChartColorPalette.EarthTones;

            var chartarea = new ChartArea();
            chartarea.AxisY.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisX.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisY.LabelStyle.Format = "{#}%";
            chartarea.AxisY.MajorGrid.LineColor = Color.Silver;
            chartarea.AxisX.MajorGrid.LineColor = Color.Silver;
            chartarea.AxisX.IsStartedFromZero = false;
            chartarea.BorderWidth = 0;
            chartarea.AxisY.Maximum = 100;
            chartarea.AxisY.MajorGrid.Enabled = true;
            chartarea.AxisY.Interval = 10;
            chartarea.AxisY.Title = "CPU Busy (%)";
            chartarea.AxisY.TitleFont = new Font("Calibri", 8);

            chartarea.AxisX.Interval = 1;
            chartarea.AxisX.LabelStyle.Angle = -60;
            chartarea.AxisX.IsLabelAutoFit = false;
            chartarea.AxisY.IsLabelAutoFit = false;
            if (dataDate.Length == 1) {
                chartarea.AxisX.Interval = 1;
                chartarea.AxisX.MajorGrid.Enabled = true;
                chartarea.AxisX.MajorTickMark.Enabled = true;
                chartarea.AxisX.IntervalType = DateTimeIntervalType.Hours;
                chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Hours;
                chartarea.AxisX.LabelStyle.Format = "HH:mm";
            }
            else if (dataDate.Length <= 14) {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.IntervalType = DateTimeIntervalType.Days;
                chartarea.AxisX.IntervalOffset = 0;
                chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Auto;
                chartarea.AxisX.LabelStyle.Format = "MMM/dd/yy\ndddd";
            }
            else {
                chartarea.AxisX.MajorGrid.Enabled = false;
                chartarea.AxisX.IntervalType = DateTimeIntervalType.Days;
                chartarea.AxisX.IntervalOffset = 0;
                chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Auto;
                chartarea.AxisX.LabelStyle.Format = "MMM/dd/yy";
            }

            if (overlay != "0") {
                chartarea.AxisY2.Enabled = AxisEnabled.True;
                chartarea.AxisY2.LabelStyle.Format = "N0";
                chartarea.AxisY2.Minimum = 0;
                chartarea.AxisY2.RoundAxisValues();
                chartarea.AxisY2.LabelStyle.Font = new Font("Calibri", 8);
                chartarea.AxisY2.TitleFont = new Font("Calibri", 8);
                chartarea.AxisY2.IsLabelAutoFit = false;
                if (overlay == "1")
                    chartarea.AxisY2.Title = "TMF/sec.";
                else
                    chartarea.AxisY2.Title = "Disk I-O/sec.";
                chartarea.AxisY2.MajorGrid.Enabled = false;
            }
            //Legend format.
            // Set legend style
            chart.Legends.Clear();
            chart.Legends.Add("Default");

            chart.Legends[0].LegendStyle = LegendStyle.Row;
            // Set legend docking
            chart.Legends[0].IsDockedInsideChartArea = true;
            // Set legend alignment
            chart.Legends[0].Alignment = StringAlignment.Center;
            chart.Legends[0].Docking = Docking.Top;
            chart.Legends[0].Font = new Font("Calibri", 8);
            chart.Legends[0].BorderDashStyle = ChartDashStyle.Solid;
            chart.Legends[0].BorderColor = Color.Black;
            chart.Legends[0].BorderWidth = 1;

            //Add title.
            var title = new Title();
            if (dataDate.Length == 1)
                title.Text = "Period for " + dataDate[0].ToLongDateString();
            else
                title.Text = "Period from " + dataDate[0].ToLongDateString() + " through " +
                             dataDate[dataDate.Length - 1].ToLongDateString();

            title.Font = new Font("Calibri", 10);
            chart.Titles.Add(title);

            try {
                DataSet dataSet = WalkThroughHiLoChart(systemSerial, dataDate, overlay);

                DataSet myDataSet = FormatWalkthroughHiLoDataSet(dataSet, overlay);
                if (myDataSet.Tables["SystemUnratedHourly"].Rows.Count == 0)
                    return "";

                //GridView1.DataSource = myDataSet;
                //GridView1.DataBind();

                var serialBusy = new Series("Range");

                serialBusy.ChartType = SeriesChartType.Candlestick;
                serialBusy.YValuesPerPoint = 4;
                serialBusy.Color = Color.Black;

                //serialBusy.MarkerStyle = MarkerStyle.Cross;
                serialBusy.IsXValueIndexed = true;
                serialBusy.XValueType = ChartValueType.DateTime;
                serialBusy.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                serialBusy.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");

                var serialHi = new Series("High");

                serialHi.ChartType = SeriesChartType.Point;
                //serialHi["PointWidth"] = "0.8";
                serialHi.MarkerStyle = MarkerStyle.Circle;
                serialHi.LegendText = "High";
                serialHi.Color = Color.IndianRed;
                serialHi.MarkerSize = 8;
                // Set series tooltips
                serialHi.IsXValueIndexed = true;
                serialHi.YValueType = ChartValueType.Double;
                serialHi.XValueType = ChartValueType.DateTime;
                serialHi.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                serialHi.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");

                var serialAvg = new Series("Average");

                serialAvg.ChartType = SeriesChartType.Point;
                //serialAvg["PointWidth"] = "0.8";
                serialAvg.MarkerStyle = MarkerStyle.Triangle;
                serialAvg.LegendText = "Average";
                serialAvg.Color = Color.Goldenrod;
                serialAvg.MarkerSize = 8;
                // Set series tooltips
                //serialAvg.ToolTip = "#VALY";
                serialAvg.IsXValueIndexed = true;
                serialAvg.YValueType = ChartValueType.Double;
                serialAvg.XValueType = ChartValueType.DateTime;
                serialAvg.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                serialAvg.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");

                var serialLo = new Series("Low");

                serialLo.ChartType = SeriesChartType.Point;
                //serialLo["PointWidth"] = "0.8";
                serialLo.LegendText = "Low";
                serialLo.Color = Color.SeaGreen;
                serialLo.MarkerStyle = MarkerStyle.Circle;
                serialLo.MarkerSize = 8;
                // Set series tooltips
                //serialLo.ToolTip = "#VALY";
                serialLo.IsXValueIndexed = true;
                serialLo.YValueType = ChartValueType.Double;
                serialLo.XValueType = ChartValueType.DateTime;
                serialLo.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                serialLo.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");

                var serialOver = new Series("Overlay");
                if (overlay == "1") {
                    serialOver.ChartType = SeriesChartType.SplineArea;
                    serialOver.LegendText = "TMF/sec.";
                    serialOver.Color = Color.LightSteelBlue;
                    serialOver.IsXValueIndexed = true;
                    serialOver.YValueType = ChartValueType.Double;
                    serialOver.XValueType = ChartValueType.DateTime;
                    serialOver.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                    serialOver.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Secondary");
                }
                else if (overlay == "2") {
                    serialOver.ChartType = SeriesChartType.SplineArea;
                    serialOver.LegendText = "Disk I-O/sec.";
                    serialOver.Color = Color.LightSteelBlue;
                    serialOver.IsXValueIndexed = true;
                    serialOver.YValueType = ChartValueType.Double;
                    serialOver.XValueType = ChartValueType.DateTime;
                    serialOver.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                    serialOver.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Secondary");
                }
                if (myDataSet.Tables["SystemUnratedHourly"].Rows.Count == 0)
                    return "";
                //populate all the data.
                for (int x = 0; x < myDataSet.Tables["SystemUnratedHourly"].Rows.Count; x++) {
                    if (Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"]) >= startTime &&
                        Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"]) <= EndTime) {
                        var dpAdjust = new DataPoint();
                        var dpAvg = new DataPoint();
                        var dpLo = new DataPoint();
                        var dpOver = new DataPoint();


                        dpAdjust.XValue =
                            Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"])
                                .ToOADate();
                        if (myDataSet.Tables["SystemUnratedHourly"].Rows[x]["CPUHi"].ToString() != "") {
                            dpAdjust.YValues[0] =
                                Convert.ToDouble(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["BusyHi"]);
                            dpAdjust.ToolTip =
                                Math.Round(Convert.ToDouble(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["BusyHi"]),
                                    1) + "% CPU " + myDataSet.Tables["SystemUnratedHourly"].Rows[x]["CPUHi"];
                        }
                        else {
                            dpAdjust.YValues = null;
                            dpAdjust.IsEmpty = true;
                        }
                        dpAvg.XValue =
                            Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"])
                                .ToOADate();
                        if (myDataSet.Tables["SystemUnratedHourly"].Rows[x]["CPUHi"].ToString() != "") {
                            dpAvg.YValues[0] =
                                Convert.ToDouble(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["BusyAvg"]);
                            dpAvg.ToolTip =
                                Math.Round(
                                    Convert.ToDouble(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["BusyAvg"]), 1) +
                                "%";
                        }
                        else {
                            dpAvg.YValues = null;
                            dpAvg.IsEmpty = true;
                        }
                        dpLo.XValue =
                            Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"])
                                .ToOADate();
                        if (myDataSet.Tables["SystemUnratedHourly"].Rows[x]["CPUHi"].ToString() != "") {
                            dpLo.YValues[0] = Convert.ToDouble(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["BusyLo"]);
                            dpLo.ToolTip =
                                Math.Round(Convert.ToDouble(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["BusyLo"]),
                                    1) + "% CPU " + myDataSet.Tables["SystemUnratedHourly"].Rows[x]["CPULo"];
                        }
                        else {
                            dpLo.YValues = null;
                            dpLo.IsEmpty = true;
                        }
                        if (overlay != "0") {
                            dpOver.XValue =
                                Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"])
                                    .ToOADate();
                            dpOver.YValues[0] =
                                Convert.ToDouble(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Overlay"]);
                            serialOver.Points.Add(dpOver);
                        }

                        if (myDataSet.Tables["SystemUnratedHourly"].Rows[x]["CPUHi"].ToString() != "") {
                            serialBusy.Points.AddXY(
                                Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"])
                                    .ToOADate(),
                                Convert.ToDouble(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["BusyHi"]),
                                Convert.ToDouble(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["BusyLo"]),
                                0.0,
                                0.0
                                );
                        }
                        else {
                            serialBusy.Points.AddXY(
                                Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"])
                                    .ToOADate(),
                                0.0,
                                0.0,
                                0.0,
                                0.0
                                );
                        }
                        serialHi.Points.Add(dpAdjust);
                        serialAvg.Points.Add(dpAvg);
                        serialLo.Points.Add(dpLo);
                    }
                    else {
                        var dpAdjust = new DataPoint();
                        var dpAvg = new DataPoint();
                        var dpLo = new DataPoint();
                        var dpOver = new DataPoint();

                        dpAdjust.XValue =
                            Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"])
                                .ToOADate();
                        dpAdjust.YValues = null;
                        dpAdjust.IsEmpty = true;

                        dpAvg.XValue =
                            Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"])
                                .ToOADate();
                        dpAvg.YValues = null;
                        dpAvg.IsEmpty = true;

                        dpLo.XValue =
                            Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"])
                                .ToOADate();
                        dpLo.YValues = null;
                        dpLo.IsEmpty = true;

                        if (overlay != "0") {
                            dpOver.XValue =
                                Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"])
                                    .ToOADate();
                            dpOver.YValues[0] = 0;
                            serialOver.Points.Add(dpOver);
                        }

                        serialBusy.Points.AddXY(
                            Convert.ToDateTime(myDataSet.Tables["SystemUnratedHourly"].Rows[x]["Date & Time"])
                                .ToOADate(),
                            0.0,
                            0.0,
                            0.0,
                            0.0
                            );

                        serialHi.Points.Add(dpAdjust);
                        serialAvg.Points.Add(dpAvg);
                        serialLo.Points.Add(dpLo);
                    }
                }

                if (overlay != "0")
                    chart.Series.Add(serialOver);
                chart.Series.Add(serialBusy);
                chart.Series.Add(serialHi);
                chart.Series.Add(serialAvg);
                chart.Series.Add(serialLo);

                chart.Series["Range"].IsVisibleInLegend = false;
                chart.ChartAreas.Add(chartarea);
                chart.ImageType = ChartImageType.Jpeg;
                //chart.ImageUrl = "\\TempImg\\ChartPic_#SEQ(100,5)";
            }
            catch {
                return "";
            }
            if (!Directory.Exists(path + "\\TempImg\\")) {
                Directory.CreateDirectory(path + "\\TempImg\\");
            }
            string saveLocation = path + "\\TempImg\\ChartPicHiLo_" + DateTime.Now.Ticks + ".jpg";
            //Save the chart image.
            chart.SaveImage(saveLocation);
            return saveLocation;
        }

        private DataSet WalkThroughLineChart(string isystemSerial, DateTime[] reportDate, int cpu) {
            //Force all datetime to be in US format.
            System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");

            #region DataSet Column

            //Insert into Hour dataset.
            var myDataSet = new DataSet();
            var myDataTable = new DataTable("SystemUnratedHourly");
            DataRow myDataRow;
            DataColumn myDataColumn;

            // Create DateTime column.
            myDataColumn = new DataColumn();
            myDataColumn.DataType = Type.GetType("System.DateTime");
            myDataColumn.ColumnName = "DataDate";
            // Add the column to the table.
            myDataTable.Columns.Add(myDataColumn);

            // Create String column.
            myDataColumn = new DataColumn();
            myDataColumn.DataType = Type.GetType("System.String");
            myDataColumn.ColumnName = "Time";
            // Add the column to the table.
            myDataTable.Columns.Add(myDataColumn);


            // Create String column.
            myDataColumn = new DataColumn();
            myDataColumn.DataType = Type.GetType("System.String");
            myDataColumn.ColumnName = "CPU";
            // Add the column to the table.
            myDataTable.Columns.Add(myDataColumn);

            // Create Double column.
            myDataColumn = new DataColumn();
            myDataColumn.DataType = Type.GetType("System.Double");
            myDataColumn.ColumnName = "Busy";
            // Add the column to the table.
            myDataTable.Columns.Add(myDataColumn);

            #endregion

            var dataset1 = new DataSet();
            //IR 6466
            //DailySysUnratedService dailySys = new DailySysUnratedService(ConnectionStringTrend);
            var dailySys = new DailySysUnratedService(ConnectionStringSPAM);
            dataset1 = dailySys.GetHourlyBusyFor(isystemSerial, reportDate, cpu);

            //Insert data into DataSet
            if (cpu == -1)
                return dataset1;

            if (dataset1.Tables["HourlyBusy"] != null) {
                for (int i = 0; i < dataset1.Tables["HourlyBusy"].Rows.Count; i++) {
                    for (int x = 0; x < 24; x++) {
                        try {
                            myDataRow = myDataTable.NewRow();
                            if (x < 10) {
                                myDataRow["Time"] = "0" + x;
                            }
                            else {
                                myDataRow["Time"] = x.ToString();
                            }

                            if (!dataset1.Tables["HourlyBusy"].Rows[i].IsNull("Hour" + x)) {
                                myDataRow["Busy"] =
                                    Convert.ToDouble(dataset1.Tables["HourlyBusy"].Rows[i]["Hour" + x].ToString());
                            }
                            else {
                                myDataRow["Busy"] = 0.00;
                            }

                            myDataRow["CPU"] = dataset1.Tables["HourlyBusy"].Rows[i]["object"].ToString();
                            myDataRow["DataDate"] =
                                Convert.ToDateTime(dataset1.Tables["HourlyBusy"].Rows[i]["DataDate"].ToString());
                            myDataTable.Rows.Add(myDataRow);
                        }
                        catch {
                            myDataSet.Tables.Add(myDataTable);
                            return myDataSet;
                        }
                    }
                }

                // Add the new DataTable to the DataSet.
                myDataSet.Tables.Add(myDataTable);
            }
            return myDataSet;
        }

        private DataSet WalkThroughOverlayLineChart(string systemSerial, DateTime[] reportDate, string overlay) {
            //Force all datetime to be in US format.
            System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
            var myDataSet = new DataSet();

            #region DataSet ColumnOverlay

            //Insert into Hour dataset.
            var myDataTable3 = new DataTable("SystemUnratedHourlyOverlay");
            DataRow myDataRow3;
            DataColumn myDataColumn3;

            // Create DateTime column.
            myDataColumn3 = new DataColumn();
            myDataColumn3.DataType = Type.GetType("System.DateTime");
            myDataColumn3.ColumnName = "DataDate";
            // Add the column to the table.
            myDataTable3.Columns.Add(myDataColumn3);

            // Create String column.
            myDataColumn3 = new DataColumn();
            myDataColumn3.DataType = Type.GetType("System.String");
            myDataColumn3.ColumnName = "Time";
            // Add the column to the table.
            myDataTable3.Columns.Add(myDataColumn3);

            // Create Double column.
            myDataColumn3 = new DataColumn();
            myDataColumn3.DataType = Type.GetType("System.Double");
            myDataColumn3.ColumnName = "Overlay";
            // Add the column to the table.
            myDataTable3.Columns.Add(myDataColumn3);

            #endregion

            var dataset3 = new DataSet();
            //DispatchTrendReports attribute = new DispatchTrendReports();
            //IR 6466
            var counters = new CounterService(ConnectionStringSPAM);

            //DailySysUnratedService sysUnrated = new DailySysUnratedService(ConnectionStringTrend);
            var sysUnrated = new DailySysUnratedService(ConnectionStringSPAM);

            if (overlay == "1") {
                int tmfAttributeID = counters.GetTMFAttributeIDFor();
                dataset3 = sysUnrated.GetHourlyTMFFor(tmfAttributeID, systemSerial, reportDate);
            }
            else if (overlay == "2")
                dataset3 = sysUnrated.GetHourlyDiskIOFor(14, systemSerial, reportDate);


            if (dataset3.Tables["HourlyBusy"] != null) {
                for (int i = 0; i < dataset3.Tables["HourlyBusy"].Rows.Count; i++) {
                    for (int x = 0; x < 24; x++) {
                        try {
                            myDataRow3 = myDataTable3.NewRow();
                            if (x < 10) {
                                myDataRow3["Time"] = "0" + x;
                            }
                            else {
                                myDataRow3["Time"] = x.ToString();
                            }

                            //Check to see if date for cpu and tmf is same.
                            if (!dataset3.Tables["HourlyBusy"].Rows[i].IsNull("Hour" + x)) {
                                myDataRow3["Overlay"] =
                                    Math.Round(
                                        Convert.ToDouble(dataset3.Tables["HourlyBusy"].Rows[i]["Hour" + x].ToString()),
                                        2);
                            }
                            else
                                myDataRow3["Overlay"] = 0.00;


                            myDataRow3["DataDate"] =
                                Convert.ToDateTime(dataset3.Tables["HourlyBusy"].Rows[i]["DataDate"].ToString());
                            myDataTable3.Rows.Add(myDataRow3);
                        }
                        catch {
                            myDataSet.Tables.Add(myDataTable3);
                            return myDataSet;
                        }
                    }
                }

                myDataSet.Tables.Add(myDataTable3);
            }

            return myDataSet;
        }

        public DataSet WalkThroughHiLoChart(string systemSerial, DateTime[] reportDate, string overlay) {
            //Force all datetime to be in US format.
            System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
            var myDataSet = new DataSet();

            #region DataSet Column

            //Insert into Hour dataset.
            var myDataTable0 = new DataTable("SystemUnratedHourly");
            DataRow myDataRow0;
            DataColumn myDataColumn0;

            // Create DateTime column.
            myDataColumn0 = new DataColumn();
            myDataColumn0.DataType = Type.GetType("System.DateTime");
            myDataColumn0.ColumnName = "DataDate";
            // Add the column to the table.
            myDataTable0.Columns.Add(myDataColumn0);

            // Create String column.
            myDataColumn0 = new DataColumn();
            myDataColumn0.DataType = Type.GetType("System.String");
            myDataColumn0.ColumnName = "Time";
            // Add the column to the table.
            myDataTable0.Columns.Add(myDataColumn0);

            // Create String column.
            myDataColumn0 = new DataColumn();
            myDataColumn0.DataType = Type.GetType("System.String");
            myDataColumn0.ColumnName = "CPUHi";
            // Add the column to the table.
            myDataTable0.Columns.Add(myDataColumn0);

            // Create Double column.
            myDataColumn0 = new DataColumn();
            myDataColumn0.DataType = Type.GetType("System.Double");
            myDataColumn0.ColumnName = "BusyHi";
            // Add the column to the table.
            myDataTable0.Columns.Add(myDataColumn0);

            // Create String column.
            myDataColumn0 = new DataColumn();
            myDataColumn0.DataType = Type.GetType("System.String");
            myDataColumn0.ColumnName = "BusyHiIntv";
            // Add the column to the table.
            myDataTable0.Columns.Add(myDataColumn0);

            // Create String column.
            myDataColumn0 = new DataColumn();
            myDataColumn0.DataType = Type.GetType("System.String");
            myDataColumn0.ColumnName = "CPULo";
            // Add the column to the table.
            myDataTable0.Columns.Add(myDataColumn0);

            // Create Double column.
            myDataColumn0 = new DataColumn();
            myDataColumn0.DataType = Type.GetType("System.Double");
            myDataColumn0.ColumnName = "BusyLo";
            // Add the column to the table.
            myDataTable0.Columns.Add(myDataColumn0);

            // Create String column.
            myDataColumn0 = new DataColumn();
            myDataColumn0.DataType = Type.GetType("System.String");
            myDataColumn0.ColumnName = "BusyLoIntv";
            // Add the column to the table.
            myDataTable0.Columns.Add(myDataColumn0);

            // Create Double column.
            myDataColumn0 = new DataColumn();
            myDataColumn0.DataType = Type.GetType("System.Double");
            myDataColumn0.ColumnName = "BusyAvg";
            // Add the column to the table.
            myDataTable0.Columns.Add(myDataColumn0);

            #endregion

            #region DataSet ColumnOverlay

            //Insert into Hour dataset.
            var myDataTable3 = new DataTable("SystemUnratedHourlyOverlay");
            DataRow myDataRow3;
            DataColumn myDataColumn3;

            // Create DateTime column.
            myDataColumn3 = new DataColumn();
            myDataColumn3.DataType = Type.GetType("System.DateTime");
            myDataColumn3.ColumnName = "DataDate";
            // Add the column to the table.
            myDataTable3.Columns.Add(myDataColumn3);

            // Create String column.
            myDataColumn3 = new DataColumn();
            myDataColumn3.DataType = Type.GetType("System.String");
            myDataColumn3.ColumnName = "Time";
            // Add the column to the table.
            myDataTable3.Columns.Add(myDataColumn3);

            // Create Double column.
            myDataColumn3 = new DataColumn();
            myDataColumn3.DataType = Type.GetType("System.Double");
            myDataColumn3.ColumnName = "Overlay";
            // Add the column to the table.
            myDataTable3.Columns.Add(myDataColumn3);

            #endregion

            var hiLo = new HiLoService(ConnectionStringSPAM);

            var dataset0 = new DataSet();
            dataset0 = hiLo.GetHourlyHiLoFor(systemSerial, reportDate, 3);

            var dataset3 = new DataSet();
            //DispatchTrendReports attribute = new DispatchTrendReports();

            //IR6466
            var counters = new CounterService(ConnectionStringTrend);
            //DailySysUnratedService sysUnrated = new DailySysUnratedService(ConnectionStringTrend);
            var sysUnrated = new DailySysUnratedService(ConnectionStringSPAM);
            if (overlay == "1") {
                int tmfAttributeID = counters.GetTMFAttributeIDFor();
                dataset3 = sysUnrated.GetHourlyTMFFor(tmfAttributeID, systemSerial, reportDate);
            }
            else if (overlay == "2")
                dataset3 = sysUnrated.GetHourlyDiskIOFor(14, systemSerial, reportDate);

            //double tempHiVal = 0;
            //double tempLoVal = 0;

            if (dataset0.Tables["HourlyBusy"] != null) {
                int i = 0;
                foreach (DateTime d in reportDate) {
                    for (int x = 0; x < 24; x++) {
                        try {
                            if (
                                Convert.ToDateTime(dataset0.Tables["HourlyBusy"].Rows[i]["DataDate"])
                                    .ToShortDateString() == d.ToShortDateString() &&
                                Convert.ToInt32(dataset0.Tables["HourlyBusy"].Rows[i]["DataHour"].ToString()) == x) {
                                myDataRow0 = myDataTable0.NewRow();
                                if (Convert.ToInt32(dataset0.Tables["HourlyBusy"].Rows[i]["DataHour"].ToString()) < 10)
                                    myDataRow0["Time"] = "0" + dataset0.Tables["HourlyBusy"].Rows[i]["DataHour"];
                                else
                                    myDataRow0["Time"] = dataset0.Tables["HourlyBusy"].Rows[i]["DataHour"].ToString();
                                //prevTime = Convert.ToInt16(dataset0.Tables["HourlyBusy"].Rows[i]["DataHour"].ToString());
                                myDataRow0["CPUHi"] = dataset0.Tables["HourlyBusy"].Rows[i]["HiCpu"].ToString();
                                myDataRow0["CPULo"] = dataset0.Tables["HourlyBusy"].Rows[i]["LoCpu"].ToString();
                                if (!dataset0.Tables["HourlyBusy"].Rows[i].IsNull("Hi")) {
                                    myDataRow0["BusyHi"] =
                                        Convert.ToDouble(dataset0.Tables["HourlyBusy"].Rows[i]["Hi"].ToString());
                                    //tempHiVal = Convert.ToDouble(dataset0.Tables["HourlyBusy"].Rows[i]["Hi"].ToString());
                                }
                                else {
                                    myDataRow0["BusyHi"] = 0.00;
                                }
                                if (!dataset0.Tables["HourlyBusy"].Rows[i].IsNull("HiIntv") ||
                                    dataset0.Tables["HourlyBusy"].Rows[i]["HiIntv"] != DBNull.Value) {
                                    DateTime start = Convert.ToDateTime(dataset0.Tables["HourlyBusy"].Rows[i]["HiIntv"]);
                                    myDataRow0["BusyHiIntv"] = start.ToShortTimeString();
                                }
                                else {
                                    myDataRow0["BusyHiIntv"] = "";
                                }

                                if (!dataset0.Tables["HourlyBusy"].Rows[i].IsNull("Lo")) {
                                    myDataRow0["BusyLo"] =
                                        Convert.ToDouble(dataset0.Tables["HourlyBusy"].Rows[i]["Lo"].ToString());
                                    //tempLoVal = Convert.ToDouble(dataset0.Tables["HourlyBusy"].Rows[i]["Lo"].ToString());
                                }
                                else {
                                    myDataRow0["BusyLo"] = 0.00;
                                }

                                if (!dataset0.Tables["HourlyBusy"].Rows[i].IsNull("LoIntv") ||
                                    dataset0.Tables["HourlyBusy"].Rows[i]["LoIntv"] != DBNull.Value) {
                                    DateTime start = Convert.ToDateTime(dataset0.Tables["HourlyBusy"].Rows[i]["LoIntv"]);
                                    myDataRow0["BusyLoIntv"] = start.ToShortTimeString();
                                }
                                else {
                                    myDataRow0["BusyLoIntv"] = "";
                                }

                                if (!dataset0.Tables["HourlyBusy"].Rows[i].IsNull("AvgVal")) {
                                    myDataRow0["BusyAvg"] =
                                        Convert.ToDouble(dataset0.Tables["HourlyBusy"].Rows[i]["AvgVal"].ToString());
                                }
                                else {
                                    myDataRow0["BusyAvg"] = 0.00;
                                }

                                myDataRow0["DataDate"] =
                                    Convert.ToDateTime(dataset0.Tables["HourlyBusy"].Rows[i]["DataDate"].ToString());
                                myDataTable0.Rows.Add(myDataRow0);
                                if (i < dataset0.Tables["HourlyBusy"].Rows.Count - 1)
                                    i++;
                            }
                            else {
                                myDataRow0 = myDataTable0.NewRow();
                                if (x < 10)
                                    myDataRow0["Time"] = "0" + x;
                                else
                                    myDataRow0["Time"] = x.ToString();
                                //prevTime = Convert.ToInt16(dataset0.Tables["HourlyBusy"].Rows[i]["DataHour"].ToString());
                                myDataRow0["CPUHi"] = 0.0;
                                myDataRow0["CPULo"] = 0.0;
                                myDataRow0["BusyHi"] = 0.00;
                                myDataRow0["BusyHiIntv"] = "";
                                myDataRow0["BusyLoIntv"] = "";
                                myDataRow0["BusyLo"] = 0.00;
                                myDataRow0["BusyAvg"] = 0.00;
                                myDataRow0["DataDate"] = d;
                                myDataTable0.Rows.Add(myDataRow0);
                            }
                            //}
                        }
                        catch {
                            break;
                        }
                    }
                }

                myDataSet.Tables.Add(myDataTable0);
            }

            if (overlay != "0") {
                if (dataset3.Tables["HourlyBusy"] != null) {
                    for (int i = 0; i < dataset3.Tables["HourlyBusy"].Rows.Count; i++) {
                        for (int x = 0; x < 24; x++) {
                            try {
                                myDataRow3 = myDataTable3.NewRow();
                                if (x < 10) {
                                    myDataRow3["Time"] = "0" + x;
                                }
                                else {
                                    myDataRow3["Time"] = x.ToString();
                                }

                                //Check to see if date for cpu and tmf is same.
                                if (!dataset3.Tables["HourlyBusy"].Rows[i].IsNull("Hour" + x)) {
                                    myDataRow3["Overlay"] =
                                        Math.Round(
                                            Convert.ToDouble(
                                                dataset3.Tables["HourlyBusy"].Rows[i]["Hour" + x].ToString()), 2);
                                }
                                else
                                    myDataRow3["Overlay"] = 0.00;


                                myDataRow3["DataDate"] =
                                    Convert.ToDateTime(dataset3.Tables["HourlyBusy"].Rows[i]["DataDate"].ToString());
                                myDataTable3.Rows.Add(myDataRow3);
                            }
                            catch {
                                myDataSet.Tables.Add(myDataTable3);
                                return myDataSet;
                            }
                        }
                    }

                    myDataSet.Tables.Add(myDataTable3);
                }
            }

            return myDataSet;
        }

        private DataSet FormatWalkthroughOverlayDataSet(DataSet dataSet, string overlay) {
            //Force all datetime to be in US format.
            System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
            var myDataSet = new DataSet();

            #region DataSet Column

            //Insert into Hour dataset.
            var myDataTable0 = new DataTable("SystemUnratedHourly");
            DataRow myDataRow0;
            DataColumn myDataColumn0;

            // Create DateTime column.
            myDataColumn0 = new DataColumn();
            myDataColumn0.DataType = Type.GetType("System.DateTime");
            myDataColumn0.ColumnName = "Date & Time";
            // Add the column to the table.
            myDataTable0.Columns.Add(myDataColumn0);

            // Create Double column.
            myDataColumn0 = new DataColumn();
            myDataColumn0.DataType = Type.GetType("System.Double");
            if (overlay == "1")
                myDataColumn0.ColumnName = "TMF/sec.";
            else if (overlay == "2")
                myDataColumn0.ColumnName = "Disk I-O/sec.";
            // Add the column to the table.
            myDataTable0.Columns.Add(myDataColumn0);

            #endregion

            string formatedTime = "";
            string[] formatDateTime;
            string formatedDateTime = "";

            var chart = new DundasChart(ServerPath);

            if (dataSet.Tables["SystemUnratedHourlyOverlay"] != null) {
                for (int x = 0; x < dataSet.Tables["SystemUnratedHourlyOverlay"].Rows.Count; x++) {
                    //Format Time.
                    formatedTime =
                        chart.WhatIfDateTimeFormat(
                            dataSet.Tables["SystemUnratedHourlyOverlay"].Rows[x]["Time"].ToString());
                    formatDateTime =
                        dataSet.Tables["SystemUnratedHourlyOverlay"].Rows[x]["DataDate"].ToString().Split(' ');
                    formatedDateTime = formatDateTime[0] + " " + formatedTime;

                    myDataRow0 = myDataTable0.NewRow();
                    myDataRow0["Date & Time"] = Convert.ToDateTime(formatedDateTime);

                    if (overlay == "1")
                        myDataRow0["TMF/sec."] =
                            Convert.ToDouble(dataSet.Tables["SystemUnratedHourlyOverlay"].Rows[x]["Overlay"].ToString());
                    else if (overlay == "2")
                        myDataRow0["Disk I-O/sec."] =
                            Convert.ToDouble(dataSet.Tables["SystemUnratedHourlyOverlay"].Rows[x]["Overlay"].ToString());


                    myDataTable0.Rows.Add(myDataRow0);
                }
                myDataSet.Tables.Add(myDataTable0);
            }
            return myDataSet;
        }

        private DataSet FormatWalkthroughDataSet(DataSet dataSet) {
            #region DataSet Column

            //Insert into Hour dataset.
            var myDataSet = new DataSet();
            var myDataTable = new DataTable("SystemUnratedHourly");
            DataRow myDataRow;
            DataColumn myDataColumn;

            // Create DateTime column.
            myDataColumn = new DataColumn();
            myDataColumn.DataType = Type.GetType("System.DateTime");
            myDataColumn.ColumnName = "Date & Time";
            // Add the column to the table.
            myDataTable.Columns.Add(myDataColumn);


            // Create String column.
            myDataColumn = new DataColumn();
            myDataColumn.DataType = Type.GetType("System.String");
            myDataColumn.ColumnName = "CPU";
            // Add the column to the table.
            myDataTable.Columns.Add(myDataColumn);

            // Create Double column.
            myDataColumn = new DataColumn();
            myDataColumn.DataType = Type.GetType("System.Double");
            myDataColumn.ColumnName = "Busy";
            // Add the column to the table.
            myDataTable.Columns.Add(myDataColumn);

            #endregion

            string formatedTime = "";
            string[] formatDateTime;
            string formatedDateTime = "";

            var chart = new DundasChart(ServerPath);

            if (dataSet.Tables["SystemUnratedHourly"] != null) {
                for (int x = 0; x < dataSet.Tables["SystemUnratedHourly"].Rows.Count; x++) {
                    //Format Time.
                    formatedTime =
                        chart.WhatIfDateTimeFormat(dataSet.Tables["SystemUnratedHourly"].Rows[x]["Time"].ToString());
                    formatDateTime = dataSet.Tables["SystemUnratedHourly"].Rows[x]["DataDate"].ToString().Split(' ');
                    formatedDateTime = formatDateTime[0] + " " + formatedTime;

                    myDataRow = myDataTable.NewRow();
                    myDataRow["Busy"] = Convert.ToDouble(dataSet.Tables["SystemUnratedHourly"].Rows[x]["Busy"]);
                    myDataRow["CPU"] = dataSet.Tables["SystemUnratedHourly"].Rows[x]["CPU"];
                    myDataRow["Date & Time"] = Convert.ToDateTime(formatedDateTime);
                    myDataTable.Rows.Add(myDataRow);
                }

                myDataSet.Tables.Add(myDataTable);
            }
            return myDataSet;
        }

        public DataSet FormatWalkthroughHiLoDataSet(DataSet dataSet, string overlay) {
            var myDataSet = new DataSet();

            #region DataSet Column

            //Insert into Hour dataset.
            var myDataTable0 = new DataTable("SystemUnratedHourly");
            DataRow myDataRow0;
            DataColumn myDataColumn0;

            // Create DateTime column.
            myDataColumn0 = new DataColumn();
            myDataColumn0.DataType = Type.GetType("System.DateTime");
            myDataColumn0.ColumnName = "Date & Time";
            // Add the column to the table.
            myDataTable0.Columns.Add(myDataColumn0);

            // Create String column.
            myDataColumn0 = new DataColumn();
            myDataColumn0.DataType = Type.GetType("System.String");
            myDataColumn0.ColumnName = "CPUHi";
            // Add the column to the table.
            myDataTable0.Columns.Add(myDataColumn0);

            // Create Double column.
            myDataColumn0 = new DataColumn();
            myDataColumn0.DataType = Type.GetType("System.Double");
            myDataColumn0.ColumnName = "BusyHi";
            // Add the column to the table.
            myDataTable0.Columns.Add(myDataColumn0);

            // Create String column.
            myDataColumn0 = new DataColumn();
            myDataColumn0.DataType = Type.GetType("System.String");
            myDataColumn0.ColumnName = "BusyHiIntv";
            // Add the column to the table.
            myDataTable0.Columns.Add(myDataColumn0);

            // Create String column.
            myDataColumn0 = new DataColumn();
            myDataColumn0.DataType = Type.GetType("System.String");
            myDataColumn0.ColumnName = "CPULo";
            // Add the column to the table.
            myDataTable0.Columns.Add(myDataColumn0);

            // Create Double column.
            myDataColumn0 = new DataColumn();
            myDataColumn0.DataType = Type.GetType("System.Double");
            myDataColumn0.ColumnName = "BusyLo";
            // Add the column to the table.
            myDataTable0.Columns.Add(myDataColumn0);

            // Create String column.
            myDataColumn0 = new DataColumn();
            myDataColumn0.DataType = Type.GetType("System.String");
            myDataColumn0.ColumnName = "BusyLoIntv";
            // Add the column to the table.
            myDataTable0.Columns.Add(myDataColumn0);

            // Create Double column.
            myDataColumn0 = new DataColumn();
            myDataColumn0.DataType = Type.GetType("System.Double");
            myDataColumn0.ColumnName = "BusyAvg";
            // Add the column to the table.
            myDataTable0.Columns.Add(myDataColumn0);

            if (overlay != "0") {
                // Create Double column.
                myDataColumn0 = new DataColumn();
                myDataColumn0.DataType = Type.GetType("System.Double");
                myDataColumn0.ColumnName = "Overlay";
                // Add the column to the table.
                myDataTable0.Columns.Add(myDataColumn0);
            }

            #endregion

            string formatedTime = "";
            string[] formatDateTime;
            string formatedDateTime = "";

            var chart = new DundasChart(ServerPath);
            //DateTime currenttime = DateTime.MinValue;
            //DateTime prevtime = DateTime.MinValue;
            if (dataSet.Tables["SystemUnratedHourly"] != null) {
                try {
                    for (int x = 0; x < dataSet.Tables["SystemUnratedHourly"].Rows.Count; x++) {
                        //Format Time.
                        formatedTime =
                            chart.WhatIfDateTimeFormat(dataSet.Tables["SystemUnratedHourly"].Rows[x]["Time"].ToString());
                        formatDateTime = dataSet.Tables["SystemUnratedHourly"].Rows[x]["DataDate"].ToString().Split(' ');
                        formatedDateTime = formatDateTime[0] + " " + formatedTime;

                        myDataRow0 = myDataTable0.NewRow();
                        myDataRow0["BusyHi"] = Convert.ToDouble(dataSet.Tables["SystemUnratedHourly"].Rows[x]["BusyHi"]);
                        myDataRow0["BusyHiIntv"] =
                            dataSet.Tables["SystemUnratedHourly"].Rows[x]["BusyHiIntv"].ToString();

                        myDataRow0["CPUHi"] = dataSet.Tables["SystemUnratedHourly"].Rows[x]["CPUHi"];
                        myDataRow0["BusyLo"] =
                            Convert.ToDouble(dataSet.Tables["SystemUnratedHourly"].Rows[x]["BusyLo"].ToString());

                        myDataRow0["BusyLoIntv"] =
                            dataSet.Tables["SystemUnratedHourly"].Rows[x]["BusyLoIntv"].ToString();

                        myDataRow0["CPULo"] = dataSet.Tables["SystemUnratedHourly"].Rows[x]["CPULo"];
                        if (!dataSet.Tables["SystemUnratedHourly"].Rows[x].IsNull("BusyAvg"))
                            myDataRow0["BusyAvg"] =
                                Convert.ToDouble(dataSet.Tables["SystemUnratedHourly"].Rows[x]["BusyAvg"].ToString());
                        else
                            myDataRow0["BusyAvg"] = 0.00;
                        myDataRow0["Date & Time"] = Convert.ToDateTime(formatedDateTime);
                        if (overlay != "0") {
                            if (!dataSet.Tables["SystemUnratedHourlyOverlay"].Rows[x].IsNull("Overlay"))
                                myDataRow0["Overlay"] =
                                    Convert.ToDouble(
                                        dataSet.Tables["SystemUnratedHourlyOverlay"].Rows[x]["Overlay"].ToString());
                        }
                        myDataTable0.Rows.Add(myDataRow0);
                        //prevtime = Convert.ToDateTime(formatedDateTime);
                    }
                }
                catch {
                }
                myDataSet.Tables.Add(myDataTable0);
            }
            return myDataSet;
        }

        internal string CreateTable(string systemSerial, DateTime startDate, DateTime endDate,
            System.IO.StreamWriter fsw1) {
            //popluate spam config value.

            //DailySysUnratedService sysUnrated = new DailySysUnratedService(ConnectionStringTrend);
            var sysUnrated = new DailySysUnratedService(ConnectionStringSPAM);
            List<DateTime> intervals = sysUnrated.GetIntervalsFor(systemSerial, startDate, endDate);
            var reportDate = new DateTime[intervals.Count];
            for (int i = 0; i < intervals.Count; i++) {
                reportDate[i] = intervals[i];
            }

            //Get CPU dataset.
            var cpuDataSet = new DataSet();
            cpuDataSet = sysUnrated.GetHourlyBusyFor(systemSerial, reportDate, -1); //-1 to get all the cpus.

            //Check if TMF or Disk entry exists.
            string overlay = "0";
            //Build Disk & TMF table name and check if disk or tmf exist.
            string diskName = systemSerial + "_DISC_" + startDate.Year + "_" + startDate.Month + "_" + startDate.Day;
            string tmfName = systemSerial + "_TMF_" + startDate.Year + "_" + startDate.Month + "_" + startDate.Day;

            var databaseCheck = new Database(ConnectionStringSPAM, "");
            var databaseName = RemoteAnalyst.BusinessLogic.Util.Helper.FindKeyName(ConnectionStringSPAM, "DATABASE");

            bool entity = databaseCheck.CheckTableExists(diskName, databaseName);
            if (entity) {
                overlay = "2";
            }
            else
            {
                entity = databaseCheck.CheckTableExists(tmfName, databaseName);
                if (entity)
                    overlay = "1";
            }

            var ioDataSet = new DataSet();
            if (overlay == "2") {
                ioDataSet = sysUnrated.GetHourlyDiskIOFor(14, systemSerial, reportDate);
            }
            else if (overlay == "1") {
                //DispatchTrendReports attribute = new DispatchTrendReports();
                var counters = new CounterService(ConnectionStringTrend);
                int tmfAttributeID = counters.GetTMFAttributeIDFor();
                ioDataSet = sysUnrated.GetHourlyTMFFor(tmfAttributeID, systemSerial, reportDate);
            }

            var hiLo = new HiLoService(ConnectionStringSPAM);
            //Get HILO value.
            var HiLo = new DataSet();
            HiLo = hiLo.GetHourlyHiLoFor(systemSerial, reportDate, 3);

            int cpuNumber = sysUnrated.GetCPUNumberFor(1, startDate, endDate, systemSerial);

            //Format the dataset to display.
            DataSet dataSet = FormatCPUBusy(cpuDataSet, cpuNumber, intervals);
            DataSet dataSetIO = FormatIOs(ioDataSet, intervals);

            var sbTable = new StringBuilder();
            sbTable.Append(
                "<table border='1' bordercolor='black' cellpadding='1' cellspacing='-1' style='font-size: 8pt; font-family: Arial;width:700px;'><tr>");
            //Header.
            sbTable.Append("<td align='center'>Date</td>");
            //IOs
            if (overlay == "2") {
                sbTable.Append("<td align='center'>Disk IO/sec.</td>");
            }
            else if (overlay == "1") {
                sbTable.Append("<td align='center'>TMF/sec.</td>");
            }
            //Hi Low
            if (HiLo.Tables[0].Rows.Count > 0) {
                sbTable.Append("<td align='center'>Hi</td>");
                sbTable.Append("<td align='center'>Low</td>");
                sbTable.Append("<td align='center'>Avg</td>");
            }

            //CPUs
            for (int x = 0; x < cpuNumber; x++) {
                sbTable.Append("<td align='center'>CPU " + x + "</td>");
            }
            sbTable.Append("</tr>");
            //Data.
            for (int x = 0; x < dataSet.Tables[0].Rows.Count; x++) {
                //Filter out emapty rows.
                bool load = false;
                for (int i = 0; i < cpuNumber; i++) {
                    if (dataSet.Tables[0].Rows[x]["CPU " + i].ToString().Length > 0) {
                        load = true;
                        break;
                    }
                }
                if (load) {
                    //Check if the data is in range.
                    DateTime tempDate = Convert.ToDateTime(dataSet.Tables[0].Rows[x]["Date & Time"]);

                    if (tempDate >= startDate && tempDate <= endDate) {
                        sbTable.Append("<tr>");
                        sbTable.Append("<td align='right' style='padding-right:5px'>" +
                                       dataSet.Tables[0].Rows[x]["Date & Time"] + "</td>");
                        if (overlay != "0") {
                            double value = Math.Round(Convert.ToDouble(dataSetIO.Tables[0].Rows[x]["IO"]), 2);

                            sbTable.Append("<td align='right' style='padding-right:5px'>" +
                                           String.Format("{0:0,0.00}", value) + "</td>");
                        }
                        for (int i = 0; i < HiLo.Tables[0].Rows.Count; i++) {
                            DateTime hiLoDate = Convert.ToDateTime(HiLo.Tables[0].Rows[i]["DataDate"]);
                            hiLoDate = hiLoDate.AddHours(Convert.ToInt32(HiLo.Tables[0].Rows[i]["DataHour"]));

                            if (hiLoDate == tempDate) {
                                double value = Math.Round(Convert.ToDouble(HiLo.Tables[0].Rows[i]["Hi"]), 2);
                                sbTable.Append("<td align='right' style='padding-right:5px'>" +
                                               String.Format("{0:0.00}", value) + "</td>");

                                value = Math.Round(Convert.ToDouble(HiLo.Tables[0].Rows[i]["Lo"]), 2);
                                sbTable.Append("<td align='right' style='padding-right:5px'>" +
                                               String.Format("{0:0.00}", value) + "</td>");

                                value = Math.Round(Convert.ToDouble(HiLo.Tables[0].Rows[i]["AvgVal"]), 2);
                                sbTable.Append("<td align='right' style='padding-right:5px'>" +
                                               String.Format("{0:0.00}", value) + "</td>");
                                break;
                            }
                        }
                        for (int i = 0; i < cpuNumber; i++) {
                            double value = Math.Round(Convert.ToDouble(dataSet.Tables[0].Rows[x]["CPU " + i]), 2);
                            sbTable.Append("<td align='right' style='padding-right:5px'>" +
                                           String.Format("{0:0.00}", value) + "</td>");
                        }
                        sbTable.Append("</tr>");
                    }
                }
            }
            sbTable.Append("</table>");

            return sbTable.ToString();
        }

        private DataSet FormatCPUBusy(DataSet dataSet, int cpuNumber, List<DateTime> intervals) {
            #region DataSet Column

            //Insert into Hour dataset.
            var myDataSet = new DataSet();
            var myDataTable = new DataTable("CPUBusy");
            DataRow myDataRow;
            DataColumn myDataColumn;

            // Create DateTime column.
            myDataColumn = new DataColumn();
            myDataColumn.DataType = Type.GetType("System.DateTime");
            myDataColumn.ColumnName = "Date & Time";
            // Add the column to the table.
            myDataTable.Columns.Add(myDataColumn);

            for (int x = 0; x < cpuNumber; x++) {
                // Create String column.
                myDataColumn = new DataColumn();
                myDataColumn.DataType = Type.GetType("System.Double");
                myDataColumn.ColumnName = "CPU " + x;
                // Add the column to the table.
                myDataTable.Columns.Add(myDataColumn);
            }

            #endregion

            foreach (DateTime d in intervals) {
                for (int x = 0; x < 24; x++) {
                    var tempDate = new DateTime(d.Year, d.Month, d.Day, x, 0, 0);
                    myDataRow = myDataTable.NewRow();
                    myDataRow["Date & Time"] = tempDate.ToString("MMM/dd/yyyy HH:mm");
                    myDataTable.Rows.Add(myDataRow);
                }
            }

            if (dataSet.Tables[0].Rows.Count > 0) {
                for (int x = 0; x < dataSet.Tables[0].Rows.Count; x++) {
                    //Get date.
                    DateTime tempDate = Convert.ToDateTime(dataSet.Tables[0].Rows[x]["DataDate"]);

                    int index = intervals.IndexOf(tempDate);
                    //Get firstRow data.
                    int cpu = Convert.ToInt32(dataSet.Tables[0].Rows[x]["object"]);

                    //Dictionary<string, double> rowData = new Dictionary<string, double>();
                    for (int i = 0; i < 24; i++) {
                        if (!dataSet.Tables[0].Rows[x].IsNull("Hour" + i)) {
                            myDataTable.Rows[i + (index * 24)]["CPU " + cpu] =
                                Convert.ToDouble(dataSet.Tables[0].Rows[x]["Hour" + i]);
                        }
                        //rowData.Add("Hour" + i, Convert.ToDouble(dataSet.Tables[0].Rows[x]["Hour" + i]));
                    }
                }

                myDataSet.Tables.Add(myDataTable);
            }
            return myDataSet;
        }

        private DataSet FormatIOs(DataSet dataSet, List<DateTime> intervals) {
            #region DataSet Column

            //Insert into Hour dataset.
            var myDataSet = new DataSet();
            var myDataTable = new DataTable("IOs");
            DataRow myDataRow;
            DataColumn myDataColumn;

            // Create DateTime column.
            myDataColumn = new DataColumn();
            myDataColumn.DataType = Type.GetType("System.DateTime");
            myDataColumn.ColumnName = "Date & Time";
            // Add the column to the table.
            myDataTable.Columns.Add(myDataColumn);

            // Create String column.
            myDataColumn = new DataColumn();
            myDataColumn.DataType = Type.GetType("System.Double");
            myDataColumn.ColumnName = "IO";
            // Add the column to the table.
            myDataTable.Columns.Add(myDataColumn);

            #endregion

            foreach (DateTime d in intervals) {
                for (int x = 0; x < 24; x++) {
                    var tempDate = new DateTime(d.Year, d.Month, d.Day, x, 0, 0);
                    myDataRow = myDataTable.NewRow();
                    myDataRow["Date & Time"] = tempDate.ToString("MMM/dd/yyyy HH:mm");
                    myDataTable.Rows.Add(myDataRow);
                }
            }

            if (dataSet.Tables[0].Rows.Count > 0) {
                for (int x = 0; x < dataSet.Tables[0].Rows.Count; x++) {
                    //Get date.
                    DateTime tempDate = Convert.ToDateTime(dataSet.Tables[0].Rows[x]["DataDate"]);

                    int index = intervals.IndexOf(tempDate);

                    //Dictionary<string, double> rowData = new Dictionary<string, double>();
                    for (int i = 0; i < 24; i++) {
                        if (!dataSet.Tables[0].Rows[x].IsNull("Hour" + i)) {
                            myDataTable.Rows[i + (index * 24)]["IO"] =
                                Convert.ToDouble(dataSet.Tables[0].Rows[x]["Hour" + i]);
                        }
                    }
                }

                myDataSet.Tables.Add(myDataTable);
            }
            return myDataSet;
        }

        private DataSet InsertWalkthroughEmptyData(DateTime currentDate, int x, int type) {
            //Force all datetime to be in US format.
            System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
            var myDataSet = new DataSet();
            var myDataTable = new DataTable("HourlyBusy");
            DataRow myDataRow;
            DataColumn myDataColumn;

            // Create String column.
            myDataColumn = new DataColumn();
            myDataColumn.DataType = Type.GetType("System.DateTime");
            myDataColumn.ColumnName = "DataDate";
            // Add the column to the table.
            myDataTable.Columns.Add(myDataColumn);

            // Create Integer column.
            myDataColumn = new DataColumn();
            myDataColumn.DataType = Type.GetType("System.Int32");
            myDataColumn.ColumnName = "Hour";
            // Add the column to the table.
            myDataTable.Columns.Add(myDataColumn);
            if (type == 2) {
                // Create Double column.
                myDataColumn = new DataColumn();
                myDataColumn.DataType = Type.GetType("System.Double");
                myDataColumn.ColumnName = "Average";
                // Add the column to the table.
                myDataTable.Columns.Add(myDataColumn);
            }
            else {
                // Create Double column.
                myDataColumn = new DataColumn();
                myDataColumn.DataType = Type.GetType("System.Double");
                myDataColumn.ColumnName = "Value";
                // Add the column to the table.
                myDataTable.Columns.Add(myDataColumn);

                // Create Double column.
                myDataColumn = new DataColumn();
                myDataColumn.DataType = Type.GetType("System.String");
                myDataColumn.ColumnName = "object";
                // Add the column to the table.
                myDataTable.Columns.Add(myDataColumn);
            }


            myDataRow = myDataTable.NewRow();
            myDataRow["DataDate"] = currentDate;
            myDataRow["Hour"] = x;
            if (type == 2)
                myDataRow["Average"] = 0.00;
            else {
                myDataRow["object"] = "";
                myDataRow["Value"] = 0.00;
            }
            myDataTable.Rows.Add(myDataRow);

            // Add the new DataTable to the DataSet.
            myDataSet.Tables.Add(myDataTable);
            return myDataSet;
        }

        internal string CreateStorageToday(Dictionary<DateTime, DailyDiskInfo> storageGraphData, string path, System.IO.StreamWriter newFileLog, string longDatePattern) {
            var chart = new Chart();
            chart.Width = 900;
            chart.Height = 250;
            chart.Palette = ChartColorPalette.EarthTones;
            var chartarea = new ChartArea();
            chartarea.AxisY.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisX.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisY.IsLabelAutoFit = false;
            chartarea.AxisX.IsLabelAutoFit = false;
            chartarea.AxisY.LabelStyle.Format = "#,0";
            chartarea.AxisY.Minimum = 0;
            chartarea.AxisX.Interval = 1;

            chartarea.AxisY.MajorGrid.Enabled = true;
            chartarea.BorderWidth = 0;
            var max = storageGraphData.First().Value.UsedGB + storageGraphData.First().Value.FreeGB;
            if (max > 1024)
                chartarea.AxisY.Title = "Capacity TB";
            else
                chartarea.AxisY.Title = "Capacity GB";

            chartarea.AxisX.LabelStyle.Angle = -60;
            chartarea.AxisX.MajorGrid.Enabled = false;
            chartarea.AxisX.IntervalType = DateTimeIntervalType.Days;
            chartarea.AxisX.IntervalOffset = 0;
            chartarea.AxisX.IntervalOffsetType = DateTimeIntervalType.Auto;
            chartarea.AxisX.LabelStyle.Format = longDatePattern; //"MMM/dd/yy\ndddd";
            chartarea.AxisY.TitleFont = new Font("Calibri", 8);
            chartarea.AxisY.MajorGrid.LineColor = Color.Silver;
            chartarea.AxisX.MajorGrid.LineColor = Color.Silver;

            //Legend format.
            chart.Legends.Clear();
            chart.Legends.Add("Default");
            chart.Legends[0].LegendStyle = LegendStyle.Row;
            chart.Legends[0].IsDockedInsideChartArea = true;
            chart.Legends[0].Alignment = StringAlignment.Center;
            chart.Legends[0].Font = new Font("Calibri", 6);
            chart.Legends[0].BorderDashStyle = ChartDashStyle.NotSet;
            chart.Legends[0].Docking = Docking.Bottom;

            try {
                var serialBusy = new Series("Used");
                serialBusy.ChartType = SeriesChartType.StackedColumn;
                serialBusy["PointWidth"] = "0.8";
                serialBusy.LegendText = "Used";
                serialBusy.ToolTip = "Used";
                serialBusy.Color = Color.Red;
                serialBusy.Font = new Font("Calibri", 8.0f, FontStyle.Regular);
                serialBusy.IsValueShownAsLabel = true;
                serialBusy.Label = "test";

                serialBusy.IsXValueIndexed = true;
                serialBusy.XValueType = ChartValueType.DateTime;
                serialBusy.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                serialBusy.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");

                //populate all the data.
                foreach (var value in storageGraphData) {
                    var dpAdjust = new DataPoint();
                    dpAdjust.XValue = Convert.ToDateTime(value.Key).ToOADate();
                    if (max > 1024)
                        dpAdjust.YValues[0] = Convert.ToDouble(value.Value.UsedGB / 1024);
                    else
                        dpAdjust.YValues[0] = Convert.ToDouble(value.Value.UsedGB);

                    dpAdjust.Label = string.Format("{0:00.00}", value.Value.UsedPercent) + "%";
                    serialBusy.Points.Add(dpAdjust);
                }

                chart.Series.Add(serialBusy);
            }
            catch {
            }

            try {
                var serialBusy = new Series("Free");
                serialBusy.ChartType = SeriesChartType.StackedColumn;
                serialBusy["PointWidth"] = "0.8";
                serialBusy.LegendText = "Free";
                serialBusy.ToolTip = "Free";
                serialBusy.Color = Color.Green;
                serialBusy.Font = new Font("Calibri", 8.0f, FontStyle.Regular);
                serialBusy.IsValueShownAsLabel = true;

                serialBusy.IsXValueIndexed = true;
                serialBusy.XValueType = ChartValueType.DateTime;
                serialBusy.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                serialBusy.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");

                //populate all the data.
                foreach (var value in storageGraphData) {
                    var dpAdjust = new DataPoint();
                    dpAdjust.XValue = Convert.ToDateTime(value.Key).ToOADate();
                    if (max > 1024)
                        dpAdjust.YValues[0] = Convert.ToDouble(value.Value.FreeGB / 1024);
                    else
                        dpAdjust.YValues[0] = Convert.ToDouble(value.Value.FreeGB);
                    dpAdjust.Label = string.Format("{0:00.00}", value.Value.FreePercent) + "%";
                    serialBusy.Points.Add(dpAdjust);
                }

                chart.Series.Add(serialBusy);
            }
            catch {
            }

            chart.ChartAreas.Add(chartarea);
            chart.ImageType = ChartImageType.Jpeg;
            if (!Directory.Exists(path + "\\TempImg\\")) {
                Directory.CreateDirectory(path + "\\TempImg\\");
            }
            string saveLocation = path + "\\TempImg\\ChartPicStorage_" + DateTime.Now.Ticks + ".jpg";
            //Save the chart image.
            chart.SaveImage(saveLocation);
            return saveLocation;
        }

        internal string CreateStorageYesterday(Dictionary<string, DailyDiskInfo> storageGraphData, string path, System.IO.StreamWriter newFileLog) {
            var chart = new Chart();

            chart.Width = 225;
            chart.Height = 300;
            chart.Palette = ChartColorPalette.EarthTones;
            chart.Titles.Add(new Title {
                Font = new Font("Calibri", 10, FontStyle.Bold),
                Text = "One Day Ago"
            });

            var chartarea = new ChartArea();
            chartarea.AxisY.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisX.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisY.IsLabelAutoFit = false;
            chartarea.AxisX.IsLabelAutoFit = false;
            chartarea.AxisY.MajorGrid.Enabled = true;
            chartarea.BorderWidth = 0;

            try {
                var serialBusy = new Series("OneDayAgo");
                serialBusy.ChartType = SeriesChartType.Pie;
                serialBusy.IsValueShownAsLabel = true;

                serialBusy.IsXValueIndexed = true;
                serialBusy.XValueType = ChartValueType.DateTime;
                serialBusy.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                serialBusy.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");

                //populate all the data.
                var dataPointFree = new DataPoint();
                dataPointFree.YValues[0] = storageGraphData["OneDayAgo"].FreeGB;
                dataPointFree.Label = "Free - (#PERCENT{P2})";
                dataPointFree.Color = Color.Green;
                serialBusy.Points.Add(dataPointFree);

                var dataPointUsed = new DataPoint();
                dataPointUsed.YValues[0] = storageGraphData["OneDayAgo"].UsedGB;
                dataPointUsed.Label = "Used - (#PERCENT{P2})";
                dataPointUsed.Color = Color.Red;
                serialBusy.Points.Add(dataPointUsed);

                chart.Series.Add(serialBusy);
            }
            catch {
            }
            chart.Series["OneDayAgo"].Font = new Font("Calibri", 8.0f, FontStyle.Regular);
            chart.Series["OneDayAgo"]["PieLabelStyle"] = "Inside";
            chart.ChartAreas.Add(chartarea);

            chart.ImageType = ChartImageType.Jpeg;
            if (!Directory.Exists(path + "\\TempImg\\")) {
                Directory.CreateDirectory(path + "\\TempImg\\");
            }
            string saveLocation = path + "\\TempImg\\ChartPicStorageYesterday_" + DateTime.Now.Ticks + ".jpg";
            //Save the chart image.
            chart.SaveImage(saveLocation);
            return saveLocation;
        }

        internal string CreateStorageLastWeek(Dictionary<string, DailyDiskInfo> storageGraphData, string path, System.IO.StreamWriter newFileLog) {
            var chart = new Chart();

            chart.Width = 225;
            chart.Height = 300;
            chart.Palette = ChartColorPalette.EarthTones;
            chart.Titles.Add(new Title {
                Font = new Font("Calibri", 10, FontStyle.Bold),
                Text = "Last Week"
            });

            var chartarea = new ChartArea();
            chartarea.AxisY.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisX.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisY.IsLabelAutoFit = false;
            chartarea.AxisX.IsLabelAutoFit = false;
            chartarea.AxisY.MajorGrid.Enabled = true;
            chartarea.BorderWidth = 0;

            try {
                var serialBusy = new Series("LastWeek");
                serialBusy.ChartType = SeriesChartType.Pie;
                serialBusy.IsValueShownAsLabel = true;

                serialBusy.IsXValueIndexed = true;
                serialBusy.XValueType = ChartValueType.DateTime;
                serialBusy.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                serialBusy.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");

                //populate all the data.
                var dataPointFree = new DataPoint();
                dataPointFree.YValues[0] = storageGraphData["LastWeek"].FreeGB;
                dataPointFree.Label = "Free - (#PERCENT{P2})";
                dataPointFree.Color = Color.Green;
                serialBusy.Points.Add(dataPointFree);

                var dataPointUsed = new DataPoint();
                dataPointUsed.YValues[0] = storageGraphData["LastWeek"].UsedGB;
                dataPointUsed.Label = "Used - (#PERCENT{P2})";
                dataPointUsed.Color = Color.Red;
                serialBusy.Points.Add(dataPointUsed);

                chart.Series.Add(serialBusy);
            }
            catch {
            }
            chart.Series["LastWeek"].Font = new Font("Calibri", 8.0f, FontStyle.Regular);
            chart.Series["LastWeek"]["PieLabelStyle"] = "Inside";
            chart.ChartAreas.Add(chartarea);

            chart.ImageType = ChartImageType.Jpeg;
            if (!Directory.Exists(path + "\\TempImg\\")) {
                Directory.CreateDirectory(path + "\\TempImg\\");
            }
            string saveLocation = path + "\\TempImg\\ChartPicStorageLastWeek_" + DateTime.Now.Ticks + ".jpg";
            //Save the chart image.
            chart.SaveImage(saveLocation);
            return saveLocation;
        }

        internal string CreateStorageLastMonth(Dictionary<string, DailyDiskInfo> storageGraphData, string path, System.IO.StreamWriter newFileLog) {
            var chart = new Chart();

            chart.Width = 225;
            chart.Height = 300;
            chart.Palette = ChartColorPalette.EarthTones;
            chart.Titles.Add(new Title {
                Font = new Font("Calibri", 10, FontStyle.Bold),
                Text = "Last Month"
            });

            var chartarea = new ChartArea();
            chartarea.AxisY.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisX.LabelStyle.Font = new Font("Calibri", 8);
            chartarea.AxisY.IsLabelAutoFit = false;
            chartarea.AxisX.IsLabelAutoFit = false;
            chartarea.AxisY.MajorGrid.Enabled = true;
            chartarea.BorderWidth = 0;

            try {
                var serialBusy = new Series("LastMonth");
                serialBusy.ChartType = SeriesChartType.Pie;
                serialBusy.IsValueShownAsLabel = true;

                serialBusy.IsXValueIndexed = true;
                serialBusy.XValueType = ChartValueType.DateTime;
                serialBusy.XAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");
                serialBusy.YAxisType = (AxisType)Enum.Parse(typeof(AxisType), "Primary");

                //populate all the data.
                var dataPointFree = new DataPoint();
                dataPointFree.YValues[0] = storageGraphData["LastMonth"].FreeGB;
                dataPointFree.Label = "Free - (#PERCENT{P2})";
                dataPointFree.Color = Color.Green;
                serialBusy.Points.Add(dataPointFree);

                var dataPointUsed = new DataPoint();
                dataPointUsed.YValues[0] = storageGraphData["LastMonth"].UsedGB;
                dataPointUsed.Label = "Used - (#PERCENT{P2})";
                dataPointUsed.Color = Color.Red;
                serialBusy.Points.Add(dataPointUsed);

                chart.Series.Add(serialBusy);
            }
            catch {
            }
            chart.Series["LastMonth"].Font = new Font("Calibri", 8.0f, FontStyle.Regular);
            chart.Series["LastMonth"]["PieLabelStyle"] = "Inside";
            chart.ChartAreas.Add(chartarea);

            chart.ImageType = ChartImageType.Jpeg;
            if (!Directory.Exists(path + "\\TempImg\\")) {
                Directory.CreateDirectory(path + "\\TempImg\\");
            }
            string saveLocation = path + "\\TempImg\\ChartPicStorageLastMonth_" + DateTime.Now.Ticks + ".jpg";
            //Save the chart image.
            chart.SaveImage(saveLocation);
            return saveLocation;
        }

        internal string GetWeekOfMonth(DateTime startTime) {
            DayOfWeek dayOfWeek = startTime.DayOfWeek;
            DateTime dayStep = new DateTime(startTime.Year, startTime.Month, 1);
            int returnValue = 0;

            while (dayStep <= startTime) {
                if (dayStep.DayOfWeek == dayOfWeek) {
                    returnValue++;
                }

                dayStep = dayStep.AddDays(1);
            }
            var numberOfMonth = "";

            if (returnValue.Equals(1))
                numberOfMonth = "1st ";
            else if (returnValue.Equals(2))
                numberOfMonth = "2nd ";
            else if (returnValue.Equals(3))
                numberOfMonth = "3rd ";
            else
                numberOfMonth = returnValue + "th ";

            return numberOfMonth;
        }

        public Color GetCPUBusyAlertColor(string systemSerial, DateTime startDate, DateTime endDate, long interval, Dictionary<int, SystemWeekInfo> systemweekInfo,
            double businessTolerance, double batchTolerance, double otherTolerance, List<ForecastData> forecastData, bool alertException, StreamWriter writer)
        {
            //Force all datetime to be in US format.
            System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
            string dateFormat = "yyyy-MM-dd HH:mm:ss";
            var sysUnrated = new DailySysUnratedService(ConnectionStringSPAM);
            var reportDate = new List<DateTime>();

            if ((Convert.ToDateTime(endDate).Subtract(startDate)).Days >= 1) {
                DataSet dset = sysUnrated.GetDataDateFor(1, startDate, endDate, systemSerial);
                for (int i = 0; i < dset.Tables["Interval"].Rows.Count; i++) {
                    reportDate.Add(Convert.ToDateTime(dset.Tables["Interval"].Rows[i]["DataDate"].ToString()));
                }
            }
            else {
                reportDate.Add(Convert.ToDateTime(startDate));
            }

            //Get data from detail table.
            var databaseMapService = new DatabaseMappingService(ConnectionString);
            string newConnectionString = databaseMapService.GetConnectionStringFor(systemSerial);


            //Get TableNames.
            var databaseCheck = new Database(newConnectionString, "");
            var databaseName = Helper.FindKeyName(newConnectionString, "DATABASE");
            var cpuTrendTable = new CPUTrendTable(newConnectionString);
            var dataTable = cpuTrendTable.GetCPUBusyInterval(startDate.ToString(dateFormat), endDate.ToString(dateFormat));

            var cpuLists = dataTable.AsEnumerable().Select(x => x.Field<UInt64>("CPUNumber")).Distinct().ToList();

            var totalMaxValue = 0D;
            dataTable = dataTable.AsEnumerable().OrderBy(x => x.Field<DateTime>("Date & Time")).CopyToDataTable();
            var dataIntervals = dataTable.AsEnumerable().Select(x => x.Field<DateTime>("Date & Time")).Distinct().ToList();

            var alertExceptionColor = Color.White;
            int yellowCount = 0;
            int redCount = 0;
            if (dataIntervals.Count > 0) {
                foreach (var dataInterval in dataIntervals) {
                    foreach (var cpuNum in cpuLists) {
                        var cpuBusy = dataTable.AsEnumerable().Where(x => x.Field<UInt64>("CPUNumber").Equals(cpuNum) && 
                        x.Field<DateTime>("Date & Time").Equals(dataInterval)).Select(x => x.Field<double>("Busy")).FirstOrDefault();
                        if (forecastData.Count > 0) {
                            var isForecastData = forecastData.Any(x => x.ForecastDateTime.Equals(dataInterval) && 
                            (Convert.ToInt16(x.CpuNumber) == Convert.ToInt16(cpuNum)));
                            if (alertException && systemweekInfo[(int)dataInterval.DayOfWeek].IsWeekday && isForecastData) {
                                //var toleranceValue = GetSystemWeekInfoHourData(dataInterval.Hour, systemweekInfo[(int)dataInterval.DayOfWeek], businessTolerance, batchTolerance, otherTolerance);
                                var thresholdTypeId = GetThresholdTypeId(dataInterval.Hour, systemweekInfo[(int)dataInterval.DayOfWeek]);
                                var systemWeekThresholds = new SystemWeekThresholds(ConnectionString);
                                var threadholds = systemWeekThresholds.GetCpuBusy(systemSerial, thresholdTypeId);
                                
                                var forecastDataSub = forecastData.Where(x => x.ForecastDateTime.Equals(dataInterval) && (Convert.ToInt16(x.CpuNumber) == Convert.ToInt16(cpuNum))).Select(x => x.CpuBusy).FirstOrDefault();
                                var stdDev = forecastData.Where(x => x.ForecastDateTime.Equals(dataInterval) && (Convert.ToInt16(x.CpuNumber) == Convert.ToInt16(cpuNum))).Select(x => x.StdDevCpuBusy).FirstOrDefault();

                                var defaultValueMajor = GetThreasholdDefaultValue(thresholdTypeId, "CPUBusyMajor");
                                var exceptionMajor = defaultValueMajor;
                                if (threadholds.Rows.Count > 0)
                                    exceptionMajor = threadholds.Rows[0].IsNull("CPUBusyMajor") ? defaultValueMajor : Convert.ToDouble(threadholds.Rows[0]["CPUBusyMajor"]);
                                var upperRange = forecastDataSub + exceptionMajor + stdDev;
                                var lowerRange = Math.Abs(forecastDataSub - (exceptionMajor + stdDev));
                                
                                if (cpuBusy > upperRange) {
                                    writer.WriteLine("dataInterval: " + dataInterval);
                                    writer.WriteLine("cpuNum: " + cpuNum);
                                    writer.WriteLine("upperRange: " + upperRange);
                                    writer.WriteLine("lowerRange: " + lowerRange);
                                    writer.WriteLine("cpuBusy: " + cpuBusy);
                                    writer.WriteLine("RED");
                                    redCount++;
                                    alertExceptionColor = Color.Red;
                                }
                                else {
                                    var defaultValueMinor = GetThreasholdDefaultValue(thresholdTypeId, "CPUBusyMinor");
                                    var exceptionMinor = defaultValueMinor;
                                    if (threadholds.Rows.Count > 0)
                                        exceptionMinor = threadholds.Rows[0].IsNull("CPUBusyMinor") ? defaultValueMinor : Convert.ToDouble(threadholds.Rows[0]["CPUBusyMinor"]);
                                    var upperRangeSub = forecastDataSub + exceptionMinor + stdDev;
                                    var lowerRangeSub = Math.Abs(forecastDataSub - (exceptionMinor - stdDev));

                                    if (cpuBusy > upperRangeSub) {
                                        writer.WriteLine("dataInterval: " + dataInterval);
                                        writer.WriteLine("cpuNum: " + cpuNum);
                                        writer.WriteLine("upperRangeSub: " + upperRangeSub);
                                        writer.WriteLine("lowerRangeSub: " + lowerRangeSub);
                                        writer.WriteLine("cpuBusy: " + cpuBusy);
                                        writer.WriteLine("Yellow");
                                        yellowCount++;
                                        if (alertExceptionColor != Color.Red) {
                                            alertExceptionColor = Color.Yellow;
                                        }
                                    }
                                }
                            }
                            else {
                                if (cpuBusy > totalMaxValue)
                                    totalMaxValue = cpuBusy;
                            }
                        }
                        else {
                            if (cpuBusy > totalMaxValue)
                                totalMaxValue = cpuBusy;
                        }
                    }
                }
            }
            writer.WriteLine("yellowCount: " + yellowCount);
            writer.WriteLine("redCount: " + redCount);
            if (alertException && forecastData.Count > 0) {
                return alertExceptionColor;
            }
            var color = Color.White;
            if (totalMaxValue > 79 && totalMaxValue < 90)
                color = Color.Yellow;
            else if (totalMaxValue >= 90)
                color = Color.Red;
            return color;
        }

        public Color GetIPUBusyAlertColor(string systemSerial, DateTime startDate, DateTime endDate, long interval, Dictionary<int, SystemWeekInfo> systemweekInfo,
            double businessTolerance, double batchTolerance, double otherTolerance, List<ForecastData> forecastData, bool alertException, StreamWriter writer) {
            //Force all datetime to be in US format.
            System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
            string dateFormat = "yyyy-MM-dd HH:mm:ss";
            var sysUnrated = new DailySysUnratedService(ConnectionStringSPAM);
            var reportDate = new List<DateTime>();

            if ((Convert.ToDateTime(endDate).Subtract(startDate)).Days >= 1) {
                DataSet dset = sysUnrated.GetDataDateFor(1, startDate, endDate, systemSerial);
                for (int i = 0; i < dset.Tables["Interval"].Rows.Count; i++) {
                    reportDate.Add(Convert.ToDateTime(dset.Tables["Interval"].Rows[i]["DataDate"].ToString()));
                }
            }
            else {
                reportDate.Add(Convert.ToDateTime(startDate));
            }

            //Get data from detail table.
            var databaseMapService = new DatabaseMappingService(ConnectionString);
            string newConnectionString = databaseMapService.GetConnectionStringFor(systemSerial);


            //Get TableNames.
            var databaseCheck = new Database(newConnectionString, "");
            var databaseName = Helper.FindKeyName(newConnectionString, "DATABASE");
            var cpuTrendTable = new CPUTrendTable(newConnectionString);
            var dataTable = cpuTrendTable.GetIPUBusyInterval(startDate.ToString(dateFormat), endDate.ToString(dateFormat));

            var totalMaxValue = 0D;
            dataTable = dataTable.AsEnumerable().OrderBy(x => x.Field<DateTime>("Date & Time")).CopyToDataTable();
            var dataIntervals = dataTable.AsEnumerable().Select(x => x.Field<DateTime>("Date & Time")).Distinct().ToList();

            var alertExceptionColor = Color.White;
            int yellowCount = 0;
            int redCount = 0;
            if (dataTable.Rows.Count > 0) {
                foreach (DataRow row in dataTable.Rows) {
                    var ipuBusy = Convert.ToDouble(row["Busy"]);
                    if (forecastData.Count > 0) {
                        var cpuNum = Convert.ToInt32(row["CPUNumber"]);
                        var ipuNum = Convert.ToInt32(row["IPUNumber"]);
                        DateTime dateInterval = Convert.ToDateTime(row["Date & Time"]);

                        var isForecastData = forecastData.Any(x => x.ForecastDateTime.Equals(dateInterval) &&
                                                                    (Convert.ToInt16(x.CpuNumber) == Convert.ToInt16(cpuNum)) &&
                                                                    (Convert.ToInt16(x.IpuNumber) == Convert.ToInt16(ipuNum)));

                        if (alertException && systemweekInfo[(int)dateInterval.DayOfWeek].IsWeekday && isForecastData) {
                            //var toleranceValue = GetSystemWeekInfoHourData(dateInterval.Hour, systemweekInfo[(int)dateInterval.DayOfWeek], businessTolerance, batchTolerance, otherTolerance);
                                    
                            var thresholdTypeId = GetThresholdTypeId(dateInterval.Hour, systemweekInfo[(int)dateInterval.DayOfWeek]);
                            var systemWeekThresholds = new SystemWeekThresholds(ConnectionString);
                            var threadholds = systemWeekThresholds.GetIpuBusy(systemSerial, thresholdTypeId);

                            var forecastDataSub = forecastData.Where(x => x.ForecastDateTime.Equals(dateInterval) &&
                                                                            (Convert.ToInt16(x.CpuNumber) == Convert.ToInt16(cpuNum)) &&
                                                                            (Convert.ToInt16(x.IpuNumber) == Convert.ToInt16(ipuNum))).Select(x => x.IpuBusy).FirstOrDefault();
                            var stdDev = forecastData.Where(x => x.ForecastDateTime.Equals(dateInterval) &&
                                                                        (Convert.ToInt16(x.CpuNumber) == Convert.ToInt16(cpuNum)) &&
                                                                        (Convert.ToInt16(x.IpuNumber) == Convert.ToInt16(ipuNum))).Select(x => x.StdDevIpuBusy).FirstOrDefault();

                            var defaultValueMajor = GetThreasholdDefaultValue(thresholdTypeId, "IPUBusyMajor");
                            var exceptionMajor = defaultValueMajor;
                            if (threadholds.Rows.Count > 0)
                                exceptionMajor = threadholds.Rows[0].IsNull("IPUBusyMajor") ? defaultValueMajor : Convert.ToDouble(threadholds.Rows[0]["IPUBusyMajor"]);
                            var upperRange = forecastDataSub + exceptionMajor + stdDev;
                            var lowerRange = Math.Abs(forecastDataSub - (exceptionMajor + stdDev));
                            
                            if (ipuBusy > upperRange) {
                                writer.WriteLine("dateInterval: " + dateInterval);
                                writer.WriteLine("cpuNum: " + cpuNum);
                                writer.WriteLine("upperRange: " + upperRange);
                                writer.WriteLine("lowerRange: " + lowerRange);
                                writer.WriteLine("ipuBusy: " + ipuBusy);
                                writer.WriteLine("ipuNum: " + ipuNum);
                                writer.WriteLine("RED");
                                redCount++;
                                alertExceptionColor = Color.Red;
                            }
                            else {
                                var defaultValueMinor = GetThreasholdDefaultValue(thresholdTypeId, "IPUBusyMinor");
                                var exceptionMinor = defaultValueMinor;
                                if (threadholds.Rows.Count > 0)
                                    exceptionMinor = threadholds.Rows[0].IsNull("IPUBusyMinor") ? defaultValueMinor : Convert.ToDouble(threadholds.Rows[0]["IPUBusyMinor"]);
                                var upperRangeSub = forecastDataSub + exceptionMinor + stdDev;
                                var lowerRangeSub = Math.Abs(forecastDataSub - (exceptionMinor - stdDev));

                                if (ipuBusy > upperRangeSub) {
                                    writer.WriteLine("dateInterval: " + dateInterval);
                                    writer.WriteLine("cpuNum: " + cpuNum);
                                    writer.WriteLine("upperRangeSub: " + upperRangeSub);
                                    writer.WriteLine("lowerRangeSub: " + lowerRangeSub);
                                    writer.WriteLine("ipuBusy: " + ipuBusy);
                                    writer.WriteLine("ipuNum: " + ipuNum);
                                    writer.WriteLine("Yellow");
                                    yellowCount++;
                                    if (alertExceptionColor != Color.Red) {
                                        alertExceptionColor = Color.Yellow;
                                    }
                                }
                            }
                        }
                        else {
                            if (ipuBusy > totalMaxValue)
                                totalMaxValue = ipuBusy;
                        }
                    }
                    else {
                        if (ipuBusy > totalMaxValue)
                            totalMaxValue = ipuBusy;
                    }
                }
            }
            writer.WriteLine("yellowCount: " + yellowCount);
            writer.WriteLine("redCount: " + redCount);

            if (alertException && forecastData.Count > 0) return alertExceptionColor;

            var color = Color.White;
            if (totalMaxValue > 79 && totalMaxValue < 90)
                color = Color.Yellow;
            else if (totalMaxValue >= 90)
                color = Color.Red;

            return color;
        }

        public Color GetCPUQueueAlertColor(string systemSerial, DateTime startDate, DateTime endDate, long interval, Dictionary<int, SystemWeekInfo> systemweekInfo,
            double businessTolerance, double batchTolerance, double otherTolerance, List<ForecastData> forecastData, bool alertException, StreamWriter writer)
        {
            //Force all datetime to be in US format.
            System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
            string dateFormat = "yyyy-MM-dd HH:mm:ss";
            var sysUnrated = new DailySysUnratedService(ConnectionStringSPAM);
            var reportDate = new List<DateTime>();

            if ((Convert.ToDateTime(endDate).Subtract(startDate)).Days >= 1) {
                DataSet dset = sysUnrated.GetDataDateFor(1, startDate, endDate, systemSerial);
                for (int i = 0; i < dset.Tables["Interval"].Rows.Count; i++) {
                    reportDate.Add(Convert.ToDateTime(dset.Tables["Interval"].Rows[i]["DataDate"].ToString()));
                }
            }
            else {
                reportDate.Add(Convert.ToDateTime(startDate));
            }

            //Get data from detail table.
            var databaseMapService = new DatabaseMappingService(ConnectionString);
            string newConnectionString = databaseMapService.GetConnectionStringFor(systemSerial);


            //Get TableNames.
            var databaseCheck = new Database(newConnectionString, "");
            var databaseName = Helper.FindKeyName(newConnectionString, "DATABASE");
            var cpuTrendTable = new CPUTrendTable(newConnectionString);
            var dataTable = cpuTrendTable.GetCPUQueueInterval(startDate.ToString(dateFormat), endDate.ToString(dateFormat));
            var cpuLists = dataTable.AsEnumerable().Select(x => x.Field<UInt64>("CPUNumber")).Distinct().ToList();

            dataTable = dataTable.AsEnumerable().OrderBy(x => x.Field<DateTime>("Date & Time")).CopyToDataTable();
            var dataIntervals = dataTable.AsEnumerable().Select(x => x.Field<DateTime>("Date & Time")).Distinct().ToList();

            var totalMaxValue = 0D;
            var alertExceptionColor = Color.White;
            int yellowCount = 0;
            int redCount = 0;
            if (dataIntervals.Count > 0) {
                foreach (var dataInterval in dataIntervals) {
                    foreach (var cpuNum in cpuLists) {
                        var cpuQueue = dataTable.AsEnumerable().Where(x => x.Field<UInt64>("CPUNumber").Equals(cpuNum) && x.Field<DateTime>("Date & Time").Equals(dataInterval)).Select(x => x.Field<double>("Queue")).FirstOrDefault();
                        if (forecastData.Count > 0) {
                            var isForecastData = forecastData.Any(x => x.ForecastDateTime.Equals(dataInterval) && (Convert.ToInt16(x.CpuNumber) == Convert.ToInt16(cpuNum)));
                            if (alertException && systemweekInfo[(int)dataInterval.DayOfWeek].IsWeekday && isForecastData) {
                                //var toleranceValue = GetSystemWeekInfoHourData(dataInterval.Hour, systemweekInfo[(int)dataInterval.DayOfWeek], businessTolerance, batchTolerance, otherTolerance);
                                var thresholdTypeId = GetThresholdTypeId(dataInterval.Hour, systemweekInfo[(int)dataInterval.DayOfWeek]);
                                var systemWeekThresholds = new SystemWeekThresholds(ConnectionString);
                                var threadholds = systemWeekThresholds.GetCpuQueueLength(systemSerial, thresholdTypeId);

                                var forecastDataSub = forecastData.Where(x => x.ForecastDateTime.Equals(dataInterval) && (Convert.ToInt16(x.CpuNumber) == Convert.ToInt16(cpuNum))).Select(x => x.Queue).FirstOrDefault();
                                var stdDev = forecastData.Where(x => x.ForecastDateTime.Equals(dataInterval) && (Convert.ToInt16(x.CpuNumber) == Convert.ToInt16(cpuNum))).Select(x => x.StdDevQueue).FirstOrDefault();

                                var defaultValueMajor = GetThreasholdDefaultValue(thresholdTypeId, "CPUQueueLengthMajor");
                                var exceptionMajor = defaultValueMajor;
                                if (threadholds.Rows.Count > 0)
                                    exceptionMajor = threadholds.Rows[0].IsNull("CPUQueueLengthMajor") ? defaultValueMajor : Convert.ToDouble(threadholds.Rows[0]["CPUQueueLengthMajor"]);
                                var upperRange = forecastDataSub + exceptionMajor + stdDev;
                                var lowerRange = Math.Abs(forecastDataSub - (exceptionMajor + stdDev));
                                
                                if (cpuQueue > upperRange) {
                                    writer.WriteLine("dataInterval: " + dataInterval);
                                    writer.WriteLine("cpuNum: " + cpuNum);
                                    writer.WriteLine("upperRange: " + upperRange);
                                    writer.WriteLine("lowerRange: " + lowerRange);
                                    writer.WriteLine("cpuQueue: " + cpuQueue);
                                    writer.WriteLine("RED");
                                    redCount++;
                                    alertExceptionColor = Color.Red;
                                }
                                else {
                                    var defaultValueMinor = GetThreasholdDefaultValue(thresholdTypeId, "CPUQueueLengthMinor");
                                    var exceptionMinor = defaultValueMinor;
                                    if (threadholds.Rows.Count > 0)
                                        exceptionMinor = threadholds.Rows[0].IsNull("CPUQueueLengthMinor") ? defaultValueMinor : Convert.ToDouble(threadholds.Rows[0]["CPUQueueLengthMinor"]);
                                    var upperRangeSub = forecastDataSub + exceptionMinor + stdDev;
                                    var lowerRangeSub = Math.Abs(forecastDataSub - (exceptionMinor - stdDev));

                                    if (cpuQueue > upperRangeSub) {
                                        writer.WriteLine("dataInterval: " + dataInterval);
                                        writer.WriteLine("cpuNum: " + cpuNum);
                                        writer.WriteLine("upperRangeSub: " + upperRangeSub);
                                        writer.WriteLine("lowerRangeSub: " + lowerRangeSub);
                                        writer.WriteLine("cpuQueue: " + cpuQueue);
                                        writer.WriteLine("Yellow");
                                        yellowCount++;
                                        if (alertExceptionColor != Color.Red) {
                                            alertExceptionColor = Color.Yellow;
                                        }
                                    }
                                }
                            }
                            else {
                                if (cpuQueue > totalMaxValue)
                                    totalMaxValue = cpuQueue;
                            }
                        }
                        else {
                            if (cpuQueue > totalMaxValue)
                                totalMaxValue = cpuQueue;
                        }
                    }
                }
            }
            writer.WriteLine("yellowCount: " + yellowCount);
            writer.WriteLine("redCount: " + redCount);

            if (alertException && forecastData.Count > 0) return alertExceptionColor;

            var color = Color.White;
            if (totalMaxValue >= 5 && totalMaxValue < 10)
                color = Color.Yellow;
            else if (totalMaxValue >= 10)
                color = Color.Red;

            return color;
        }
        public Color GetIpuQueueAlertColor(string systemSerial, DateTime startDate, DateTime endDate, long interval, Dictionary<int, SystemWeekInfo> systemweekInfo,
            double businessTolerance, double batchTolerance, double otherTolerance, List<ForecastData> forecastData, bool alertException, StreamWriter writer) {
            //Force all datetime to be in US format.
            System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
            string dateFormat = "yyyy-MM-dd HH:mm:ss";
            var sysUnrated = new DailySysUnratedService(ConnectionStringSPAM);
            var reportDate = new List<DateTime>();

            if ((Convert.ToDateTime(endDate).Subtract(startDate)).Days >= 1) {
                DataSet dset = sysUnrated.GetDataDateFor(1, startDate, endDate, systemSerial);
                for (int i = 0; i < dset.Tables["Interval"].Rows.Count; i++) {
                    reportDate.Add(Convert.ToDateTime(dset.Tables["Interval"].Rows[i]["DataDate"].ToString()));
                }
            }
            else {
                reportDate.Add(Convert.ToDateTime(startDate));
            }

            //Get data from detail table.
            var databaseMapService = new DatabaseMappingService(ConnectionString);
            string newConnectionString = databaseMapService.GetConnectionStringFor(systemSerial);

            //Get TableNames.
            var databaseCheck = new Database(newConnectionString, "");
            var databaseName = Helper.FindKeyName(newConnectionString, "DATABASE");
            var cpuTrendTable = new CPUTrendTable(newConnectionString);
            var dataTable = cpuTrendTable.GetIPUQueueInterval(startDate.ToString(dateFormat), endDate.ToString(dateFormat));

            var totalMaxValue = 0D;
            var alertExceptionColor = Color.White;
            int yellowCount = 0;
            int redCount = 0;
            if (dataTable.Rows.Count > 0) {
                foreach (DataRow row in dataTable.Rows) {
                    var ipuQueue = Convert.ToDouble(row["Queue"]);
                    if (forecastData.Count > 0) {
                        var cpuNum = Convert.ToInt32(row["CPUNumber"]);
                        var ipuNum = Convert.ToInt32(row["IPUNumber"]);
                        DateTime dateInterval = Convert.ToDateTime(row["Date & Time"]);
                        var isForecastData = forecastData.Any(x => x.ForecastDateTime.Equals(dateInterval) && (Convert.ToInt16(x.CpuNumber) == Convert.ToInt16(cpuNum)) && (Convert.ToInt16(x.IpuNumber) == Convert.ToInt16(ipuNum)));
                        if (alertException && systemweekInfo[(int)dateInterval.DayOfWeek].IsWeekday && isForecastData) {
                            var thresholdTypeId = GetThresholdTypeId(dateInterval.Hour, systemweekInfo[(int)dateInterval.DayOfWeek]);
                            var systemWeekThresholds = new SystemWeekThresholds(ConnectionString);
                            var threadholds = systemWeekThresholds.GetIpuQueueLength(systemSerial, thresholdTypeId);

                            var forecastDataSub = forecastData.Where(x => x.ForecastDateTime.Equals(dateInterval) &&
                                                                            (Convert.ToInt16(x.CpuNumber) == Convert.ToInt16(cpuNum)) && 
                                                                            (Convert.ToInt16(x.IpuNumber) == Convert.ToInt16(ipuNum))).Select(x => x.IpuQueue).FirstOrDefault();
                            var stdDev = forecastData.Where(x => x.ForecastDateTime.Equals(dateInterval) &&
                                                                            (Convert.ToInt16(x.CpuNumber) == Convert.ToInt16(cpuNum)) && 
                                                                            (Convert.ToInt16(x.IpuNumber) == Convert.ToInt16(ipuNum))).Select(x => x.StdDevIpuQueue).FirstOrDefault();
                            var defaultValueMajor = GetThreasholdDefaultValue(thresholdTypeId, "IPUQueueLengthMajor");
                            var exceptionMajor = defaultValueMajor;
                            if (threadholds.Rows.Count > 0)
                                exceptionMajor = threadholds.Rows[0].IsNull("IPUQueueLengthMajor") ? defaultValueMajor : Convert.ToDouble(threadholds.Rows[0]["IPUQueueLengthMajor"]);
                            var upperRange = forecastDataSub + exceptionMajor + stdDev;
                            var lowerRange = Math.Abs(forecastDataSub - (exceptionMajor + stdDev));
                            
                            if (ipuQueue > upperRange) {
                                writer.WriteLine("dateInterval: " + dateInterval);
                                writer.WriteLine("cpuNum: " + cpuNum);
                                writer.WriteLine("upperRange: " + upperRange);
                                writer.WriteLine("lowerRange: " + lowerRange);
                                writer.WriteLine("ipuQueue: " + ipuQueue);
                                writer.WriteLine("ipuNum: " + ipuNum);
                                writer.WriteLine("RED");
                                redCount++;
                                alertExceptionColor = Color.Red;

                            }
                            else {
                                //Check half of toleranceValue.
                                var defaultValueMinor = GetThreasholdDefaultValue(thresholdTypeId, "IPUQueueLengthMinor");
                                var exceptionMinor = defaultValueMinor;
                                if (threadholds.Rows.Count > 0)
                                    exceptionMinor = threadholds.Rows[0].IsNull("IPUQueueLengthMinor") ? defaultValueMinor : Convert.ToDouble(threadholds.Rows[0]["IPUQueueLengthMinor"]);
                                var upperRangeSub = forecastDataSub + exceptionMinor + stdDev;
                                var lowerRangeSub = Math.Abs(forecastDataSub - (exceptionMinor + stdDev));

                                if (ipuQueue > upperRangeSub) {
                                    writer.WriteLine("dateInterval: " + dateInterval);
                                    writer.WriteLine("cpuNum: " + cpuNum);
                                    writer.WriteLine("upperRangeSub: " + upperRangeSub);
                                    writer.WriteLine("lowerRangeSub: " + lowerRangeSub);
                                    writer.WriteLine("ipuQueue: " + ipuQueue);
                                    writer.WriteLine("ipuNum: " + ipuNum);
                                    writer.WriteLine("Yellow");
                                    yellowCount++;
                                    if (alertExceptionColor != Color.Red) {
                                        alertExceptionColor = Color.Yellow;
                                    }
                                }
                            }
                        }
                        else {
                            if (ipuQueue > totalMaxValue)
                                totalMaxValue = ipuQueue;
                        }
                    }
                    else {
                        if (ipuQueue > totalMaxValue)
                            totalMaxValue = ipuQueue;
                    }

                }
            }
            writer.WriteLine("yellowCount: " + yellowCount);
            writer.WriteLine("redCount: " + redCount);

            if (alertException && forecastData.Count > 0) return alertExceptionColor;
            var color = Color.White;
            if (totalMaxValue >= 5 && totalMaxValue < 10)
                color = Color.Yellow;
            else if (totalMaxValue >= 10)
                color = Color.Red;

            return color;
        }

        private void ExpectionBulkInsert(string databaseName, List<ExceptionView> exceptionList, string tempSaveLocation) {
            var databaseCheck = new Database(ConnectionStringSPAM, "");
            var tableName = "Exceptions";
            var exists = databaseCheck.CheckTableExists(tableName, databaseName);

            if (!exists) {
                databaseCheck.CreateExceptionsTable();
            }

            var pathToCsv = tempSaveLocation + "\\BulkInsertExceptions_" + DateTime.Now.Ticks + ".csv";
            var sb = new StringBuilder();

            foreach (var exception in exceptionList) {
                var displayRed = exception.DisplayRed == true ? "1" : "0";

                sb.Append(exception.FromTimestamp.ToString("yyyy-MM-dd HH:mm:ss") + "|" +
                          exception.EntityId + "|" +
                          exception.CounterId + "|" +
                          exception.Instance + "|" +
                          exception.Actual + "|" +
                          exception.Upper + "|" +
                          exception.Lower + "|" +
                          displayRed + Environment.NewLine);
            }
            File.AppendAllText(pathToCsv, sb.ToString());

            var dataTables = new DataTables(ConnectionStringSPAM);
            dataTables.InsertForecastData(tableName, pathToCsv);
        }

        public void ExpectionUniqueBulkInsert(List<ExceptionView> exceptionList, string tempSaveLocation) {
            var databaseName = Helper.FindKeyName(ConnectionStringSPAM, "DATABASE");
            var databaseCheck = new Database(ConnectionStringSPAM, "");

            var tableName = "Exceptions";
            var exists = databaseCheck.CheckTableExists(tableName, databaseName);

            if (!exists) {
                databaseCheck.CreateExceptionsTable();
            }

            var pathToCsv = tempSaveLocation + "\\BulkInsertExceptions_" + DateTime.Now.Ticks + ".csv";
            var sb = new StringBuilder();

            var exceptionDates = exceptionList.Select(x => x.FromTimestamp).Distinct().ToList();
            var cpuList = exceptionList.Select(x => x.Instance).Distinct().ToList();
            var newList = new List<ExceptionView>();

            foreach (var exceptionDate in exceptionDates) {
                foreach (var cpu in cpuList) {
                    var list = exceptionList.Where(x => x.FromTimestamp.Equals(exceptionDate) && x.Instance.Equals(cpu));

                    if (list.Any(x => x.IsException.Equals(true))) {
                        newList.AddRange(list);
                    }
                }
            }

            foreach (var exception in newList) {
                var displayRed = exception.DisplayRed == true ? "1" : "0";
                if (!exception.IsException)
                    displayRed = "2";

                sb.Append(exception.FromTimestamp.ToString("yyyy-MM-dd HH:mm:ss") + "|" +
                          exception.EntityId + "|" +
                          exception.CounterId + "|" +
                          exception.Instance + "|" +
                          exception.Actual + "|" +
                          exception.Upper + "|" +
                          exception.Lower + "|" +
                          displayRed + Environment.NewLine);
            }
            File.AppendAllText(pathToCsv, sb.ToString());

            var dataTables = new DataTables(ConnectionStringSPAM);
            dataTables.InsertForecastData(tableName, pathToCsv);
        }
    }
}